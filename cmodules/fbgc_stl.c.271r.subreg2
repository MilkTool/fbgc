
;; Function fbgc_stl_initializer (fbgc_stl_initializer, funcdef_no=65, decl_uid=5685, cgraph_uid=66, symbol_order=77)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
ending the processing of deferred insns


fbgc_stl_initializer

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r19={1d,2u} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} 
;;    total ref usage 29{20d,9u,0e} in 3{3 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 7 4 12 2 (debug_marker) "cmodules/fbgc_stl.c":166:2 -1
     (nil))
(insn 12 7 13 2 (set (reg/i:DI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":167:1 66 {*movdi_internal}
     (nil))
(insn 13 12 0 2 (use (reg/i:DI 0 ax)) "cmodules/fbgc_stl.c":167:1 -1
     (nil))
;;  succ:       EXIT [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function fbgc_tuple (fbgc_tuple, funcdef_no=62, decl_uid=5705, cgraph_uid=63, symbol_order=71)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
ending the processing of deferred insns


fbgc_tuple

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;;  ref usage 	r0={11d,7u} r1={13d,4u} r2={9d} r4={13d,5u} r5={17d,9u} r6={1d,18u} r7={1d,26u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r16={1d,17u} r17={20d,9u} r18={8d} r19={1d,18u} r20={9d} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={9d} r37={9d} r38={8d} r39={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r82={1d,11u} r83={1d,3u} r87={2d,6u} r88={1d,1u} r89={2d,3u} r92={1d,2u} r96={1d,2u} r97={1d,1u} r98={1d,5u} r99={2d,2u} r101={2d,11u} r102={1d,2u} r104={4d,7u} r105={1d,1u} r106={2d,5u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} 
;;    total ref usage 809{621d,188u,0e} in 128{120 regular + 8 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 656996803 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL)
;;  pred:       ENTRY [always]  count:656996803 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(19){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 105 106 115 116
;; live  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  gen 	 17 [flags] 105 106 115 116
;; live  kill	
(note 9 1 184 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 184 9 2 2 (set (reg:DI 115)
        (reg:DI 5 di [ arg ])) "cmodules/fbgc_stl.c":99:39 -1
     (expr_list:REG_DEAD (reg:DI 5 di [ arg ])
        (nil)))
(insn 2 184 185 2 (set (reg/v/f:DI 105 [ arg ])
        (reg:DI 115)) "cmodules/fbgc_stl.c":99:39 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 115)
        (nil)))
(insn 185 2 3 2 (set (reg:SI 116)
        (reg:SI 4 si [ argc ])) "cmodules/fbgc_stl.c":99:39 -1
     (expr_list:REG_DEAD (reg:SI 4 si [ argc ])
        (nil)))
(insn 3 185 4 2 (set (reg/v:SI 106 [ argc ])
        (reg:SI 116)) "cmodules/fbgc_stl.c":99:39 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 116)
        (nil)))
(note 4 3 11 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 11 4 12 2 (debug_marker) "cmodules/fbgc_stl.c":100:2 -1
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 106 [ argc ])
            (const_int 1 [0x1]))) "cmodules/fbgc_stl.c":100:4 11 {*cmpsi_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 144)
            (pc))) "cmodules/fbgc_stl.c":100:4 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 301614084 (nil)))
 -> 144)
;;  succ:       3 [71.9% (guessed)]  count:472446400 (estimated locally) (FALLTHRU)
;;              17 [28.1% (guessed)]  count:184550403 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 105 106
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 105 106

;; basic block 3, loop depth 0, count 472446400 (estimated locally), maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [71.9% (guessed)]  count:472446400 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(6){ }u9(7){ }u10(16){ }u11(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 105 106
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 105
;; lr  def 	 17 [flags] 82 83
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 105 106
;; live  gen 	 17 [flags] 82 83
;; live  kill	
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 15 14 16 3 (debug_marker) "cmodules/fbgc_stl.c":101:3 -1
     (nil))
(insn 16 15 17 3 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (reg/v/f:DI 105 [ arg ]) [1 *arg_29(D)+0 S8 A64])) "cmodules/fbgc_stl.c":101:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 105 [ arg ])
        (nil)))
(insn 17 16 18 3 (set (reg:QI 83 [ _2 ])
        (mem:QI (reg/f:DI 82 [ _1 ]) [0 _1->type+0 S1 A8])) "cmodules/fbgc_stl.c":101:16 69 {*movqi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 83 [ _2 ])
            (const_int 6 [0x6]))) "cmodules/fbgc_stl.c":101:3 9 {*cmpqi_1}
     (nil))
(jump_insn 19 18 20 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) "cmodules/fbgc_stl.c":101:3 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 268435462 (nil)))
 -> 33)
;;  succ:       4 [75.0% (adjusted)]  count:354334800 (estimated locally) (FALLTHRU)
;;              7 [25.0% (adjusted)]  count:118111600 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 106
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 106

;; basic block 4, loop depth 0, count 472446400 (estimated locally), maybe hot
;; Invalid sum of incoming counts 354334800 (estimated locally), should be 472446400 (estimated locally)
;;  prev block 3, next block 5, flags: (HOT_PARTITION, RTL)
;;  pred:       3 [75.0% (adjusted)]  count:354334800 (estimated locally) (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u16(6){ }u17(7){ }u18(16){ }u19(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 106
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 106
;; live  gen 	 17 [flags]
;; live  kill	
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 83 [ _2 ])
            (const_int 14 [0xe]))) "cmodules/fbgc_stl.c":101:3 9 {*cmpqi_1}
     (nil))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) "cmodules/fbgc_stl.c":101:3 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 357913950 (nil)))
 -> 78)
;;  succ:       5 [66.7% (adjusted)]  count:314964265 (estimated locally) (FALLTHRU)
;;              11 [33.3% (adjusted)]  count:157482135 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 106
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 106

;; basic block 5, loop depth 0, count 472446400 (estimated locally), maybe hot
;; Invalid sum of incoming counts 314964265 (estimated locally), should be 472446400 (estimated locally)
;;  prev block 4, next block 6, flags: (HOT_PARTITION, RTL)
;;  pred:       4 [66.7% (adjusted)]  count:314964265 (estimated locally) (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u22(6){ }u23(7){ }u24(16){ }u25(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  def 	 17 [flags] 104
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83
;; live  gen 	 17 [flags] 104
;; live  kill	
(note 23 22 8 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 8 23 24 5 (set (reg/v/f:DI 104 [ <retval> ])
        (const_int 0 [0])) "cmodules/fbgc_stl.c":101:3 66 {*movdi_internal}
     (nil))
(insn 24 8 25 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 83 [ _2 ])
            (const_int 3 [0x3]))) "cmodules/fbgc_stl.c":101:3 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 83 [ _2 ])
        (nil)))
(jump_insn 25 24 26 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 156)
            (pc))) "cmodules/fbgc_stl.c":101:3 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 715827886 (nil)))
 -> 156)
;;  succ:       18 [66.7% (adjusted)]  count:314964265 (estimated locally)
;;              6 [33.3% (adjusted)]  count:157482135 (estimated locally) (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 104
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 104

;; basic block 6, loop depth 0, count 118111600 (estimated locally), maybe hot
;; Invalid sum of incoming counts 157482135 (estimated locally), should be 118111600 (estimated locally)
;;  prev block 5, next block 7, flags: (HOT_PARTITION, RTL)
;;  pred:       5 [33.3% (adjusted)]  count:157482135 (estimated locally) (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u28(6){ }u29(7){ }u30(16){ }u31(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 107
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; live  gen 	 0 [ax] 5 [di] 107
;; live  kill	
(note 26 25 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 27 26 28 6 (debug_marker) "cmodules/fbgc_stl.c":104:5 -1
     (nil))
(insn 28 27 29 6 (set (reg:SI 107 [ MEM[(struct fbgc_int_object *)_1].content ])
        (mem:SI (plus:DI (reg/f:DI 82 [ _1 ])
                (const_int 9 [0x9])) [6 MEM[(struct fbgc_int_object *)_1].content+0 S4 A8])) "cmodules/fbgc_stl.c":104:12 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
        (nil)))
(insn 29 28 30 6 (set (reg:SI 5 di)
        (reg:SI 107 [ MEM[(struct fbgc_int_object *)_1].content ])) "cmodules/fbgc_stl.c":104:12 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 107 [ MEM[(struct fbgc_int_object *)_1].content ])
        (nil)))
(call_insn/j 30 29 31 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f626c80bc00 new_fbgc_tuple_object>) [0 new_fbgc_tuple_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":104:12 681 {*sibcall_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f626c80bc00 new_fbgc_tuple_object>)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:       EXIT [always]  count:118111600 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 31 30 33)
;; basic block 7, loop depth 0, count 118111600 (estimated locally), maybe hot
;;  prev block 6, next block 8, flags: (HOT_PARTITION, RTL)
;;  pred:       3 [25.0% (adjusted)]  count:118111600 (estimated locally)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u36(6){ }u37(7){ }u38(16){ }u39(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 89 104 108 117
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 89 104 108 117
;; live  kill	
(code_label 33 31 34 7 5 (nil) [1 uses])
(note 34 33 35 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(debug_insn 35 34 36 7 (debug_marker) "cmodules/fbgc_stl.c":108:5 -1
     (nil))
(debug_insn 36 35 37 7 (var_location:DI s (reg/f:DI 82 [ _1 ])) "cmodules/fbgc_stl.c":108:26 -1
     (nil))
(debug_insn 37 36 38 7 (debug_marker) "cmodules/fbgc_stl.c":109:5 -1
     (nil))
(insn 38 37 39 7 (set (reg:SI 108 [ MEM[(struct fbgc_str_object *)_1].len ])
        (mem:SI (plus:DI (reg/f:DI 82 [ _1 ])
                (const_int 9 [0x9])) [6 MEM[(struct fbgc_str_object *)_1].len+0 S4 A8])) "cmodules/fbgc_stl.c":109:31 67 {*movsi_internal}
     (nil))
(insn 39 38 40 7 (set (reg:SI 5 di)
        (reg:SI 108 [ MEM[(struct fbgc_str_object *)_1].len ])) "cmodules/fbgc_stl.c":109:31 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 108 [ MEM[(struct fbgc_str_object *)_1].len ])
        (nil)))
(call_insn 40 39 186 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f626c80bc00 new_fbgc_tuple_object>) [0 new_fbgc_tuple_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":109:31 677 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f626c80bc00 new_fbgc_tuple_object>)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 186 40 41 7 (set (reg:DI 117)
        (reg:DI 0 ax)) "cmodules/fbgc_stl.c":109:31 -1
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 41 186 42 7 (set (reg/v/f:DI 104 [ <retval> ])
        (reg:DI 117)) "cmodules/fbgc_stl.c":109:31 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 117)
        (nil)))
(debug_insn 42 41 43 7 (var_location:DI t (reg/v/f:DI 104 [ <retval> ])) "cmodules/fbgc_stl.c":109:31 -1
     (nil))
(debug_insn 43 42 44 7 (debug_marker) "cmodules/fbgc_stl.c":110:5 -1
     (nil))
(debug_insn 44 43 45 7 (debug_marker) "cmodules/fbgc_stl.c":110:9 -1
     (nil))
(debug_insn 45 44 46 7 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(debug_insn 46 45 47 7 (debug_marker) "cmodules/fbgc_stl.c":110:20 -1
     (nil))
(insn 47 46 48 7 (set (reg:SI 89 [ _8 ])
        (mem:SI (plus:DI (reg/f:DI 82 [ _1 ])
                (const_int 9 [0x9])) [6 MEM[(struct fbgc_str_object *)_1].len+0 S4 A8])) "cmodules/fbgc_stl.c":110:24 67 {*movsi_internal}
     (nil))
(insn 48 47 49 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ _8 ])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":110:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 49 48 164 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 71)
            (pc))) "cmodules/fbgc_stl.c":110:5 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 118111604 (nil)))
 -> 71)
;;  succ:       8 [89.0% (guessed)]  count:105119324 (estimated locally) (FALLTHRU)
;;              10 [11.0% (guessed)]  count:12992276 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 89 104
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 89 104

;; basic block 8, loop depth 0, count 105119324 (estimated locally), maybe hot
;;  prev block 7, next block 9, flags: (HOT_PARTITION, RTL)
;;  pred:       7 [89.0% (guessed)]  count:105119324 (estimated locally) (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u50(6){ }u51(7){ }u52(16){ }u53(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 104
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 87
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 104
;; live  gen 	 87
;; live  kill	
(note 164 49 5 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 5 164 68 8 (set (reg/v:SI 87 [ _6 ])
        (const_int 0 [0])) "cmodules/fbgc_stl.c":110:13 67 {*movsi_internal}
     (nil))
;;  succ:       9 [always]  count:105119324 (estimated locally) (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 87 104
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 87 104

;; basic block 9, loop depth 0, count 955630224 (estimated locally), maybe hot
;;  prev block 8, next block 10, flags: (HOT_PARTITION, RTL)
;;  pred:       8 [always]  count:105119324 (estimated locally) (FALLTHRU)
;;              9 [89.0% (guessed)]  count:850510900 (estimated locally) (DFS_BACK)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u54(6){ }u55(7){ }u56(16){ }u57(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 87 104
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 87 104
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 87 88 89 102 118
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 87 104
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 17 [flags] 87 88 89 102 118
;; live  kill	 17 [flags]
(code_label 68 5 50 9 9 (nil) [1 uses])
(note 50 68 51 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(debug_insn 51 50 52 9 (var_location:SI i (reg/v:SI 87 [ _6 ])) -1
     (nil))
(debug_insn 52 51 53 9 (debug_marker) "cmodules/fbgc_stl.c":111:6 -1
     (nil))
(insn 53 52 54 9 (set (reg/v:SI 102 [ i ])
        (reg/v:SI 87 [ _6 ])) 67 {*movsi_internal}
     (nil))
(insn 54 53 55 9 (parallel [
            (set (reg/v:SI 87 [ _6 ])
                (plus:SI (reg/v:SI 87 [ _6 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_stl.c":111:6 190 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 55 54 56 9 (set (reg:SI 1 dx)
        (reg/v:SI 87 [ _6 ])) "cmodules/fbgc_stl.c":111:6 67 {*movsi_internal}
     (nil))
(insn 56 55 57 9 (set (reg:SI 4 si)
        (reg/v:SI 102 [ i ])) "cmodules/fbgc_stl.c":111:6 67 {*movsi_internal}
     (nil))
(insn 57 56 58 9 (set (reg:DI 5 di)
        (reg/f:DI 82 [ _1 ])) "cmodules/fbgc_stl.c":111:6 66 {*movdi_internal}
     (nil))
(call_insn 58 57 187 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("get_object_in_fbgc_str_object") [flags 0x41]  <function_decl 0x7f626c806400 get_object_in_fbgc_str_object>) [0 get_object_in_fbgc_str_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":111:6 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("get_object_in_fbgc_str_object") [flags 0x41]  <function_decl 0x7f626c806400 get_object_in_fbgc_str_object>)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 187 58 59 9 (set (reg:DI 118)
        (reg:DI 0 ax)) "cmodules/fbgc_stl.c":111:6 -1
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 59 187 60 9 (set (reg/f:DI 88 [ _7 ])
        (reg:DI 118)) "cmodules/fbgc_stl.c":111:6 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 118)
        (nil)))
(insn 60 59 61 9 (set (reg:SI 1 dx)
        (reg/v:SI 102 [ i ])) "cmodules/fbgc_stl.c":111:6 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 102 [ i ])
        (nil)))
(insn 61 60 62 9 (set (reg:DI 4 si)
        (reg/f:DI 88 [ _7 ])) "cmodules/fbgc_stl.c":111:6 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ _7 ])
        (nil)))
(insn 62 61 63 9 (set (reg:DI 5 di)
        (reg/v/f:DI 104 [ <retval> ])) "cmodules/fbgc_stl.c":111:6 66 {*movdi_internal}
     (nil))
(call_insn 63 62 64 9 (call (mem:QI (symbol_ref:DI ("set_object_in_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f626c80be00 set_object_in_fbgc_tuple_object>) [0 set_object_in_fbgc_tuple_object S1 A8])
        (const_int 0 [0])) "cmodules/fbgc_stl.c":111:6 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("set_object_in_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f626c80be00 set_object_in_fbgc_tuple_object>)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(debug_insn 64 63 65 9 (debug_marker) "cmodules/fbgc_stl.c":110:52 -1
     (nil))
(debug_insn 65 64 66 9 (var_location:SI i (reg/v:SI 87 [ _6 ])) -1
     (nil))
(debug_insn 66 65 67 9 (debug_marker) "cmodules/fbgc_stl.c":110:20 -1
     (nil))
(insn 67 66 69 9 (set (reg:SI 89 [ _8 ])
        (mem:SI (plus:DI (reg/f:DI 82 [ _1 ])
                (const_int 9 [0x9])) [6 MEM[(struct fbgc_str_object *)_1].len+0 S4 A8])) "cmodules/fbgc_stl.c":110:24 67 {*movsi_internal}
     (nil))
(insn 69 67 70 9 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 89 [ _8 ])
            (reg/v:SI 87 [ _6 ]))) "cmodules/fbgc_stl.c":110:5 11 {*cmpsi_1}
     (nil))
(jump_insn 70 69 71 9 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 68)
            (pc))) "cmodules/fbgc_stl.c":110:5 659 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 955630228 (nil)))
 -> 68)
;;  succ:       9 [89.0% (guessed)]  count:850510900 (estimated locally) (DFS_BACK)
;;              10 [11.0% (guessed)]  count:105119324 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 87 89 104
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 87 89 104

;; basic block 10, loop depth 0, count 118111601 (estimated locally), maybe hot
;;  prev block 9, next block 11, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [11.0% (guessed)]  count:12992276 (estimated locally)
;;              9 [11.0% (guessed)]  count:105119324 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u81(6){ }u82(7){ }u83(16){ }u84(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89 104
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89 104
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89 104
;; live  gen 	
;; live  kill	
(code_label 71 70 72 10 8 (nil) [1 uses])
(note 72 71 73 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(debug_insn 73 72 74 10 (debug_marker) "cmodules/fbgc_stl.c":113:5 -1
     (nil))
(insn 74 73 75 10 (set (mem:SI (plus:DI (reg/v/f:DI 104 [ <retval> ])
                (const_int 13 [0xd])) [6 MEM[(struct fbgc_tuple_object *)t_42].size+0 S4 A8])
        (reg:SI 89 [ _8 ])) "cmodules/fbgc_stl.c":113:31 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 89 [ _8 ])
        (nil)))
(debug_insn 75 74 190 10 (debug_marker) "cmodules/fbgc_stl.c":115:5 -1
     (nil))
(jump_insn 190 75 191 10 (set (pc)
        (label_ref 156)) "cmodules/fbgc_stl.c":115:12 -1
     (nil)
 -> 156)
;;  succ:       18 [always]  count:118111601 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104

(barrier 191 190 78)
;; basic block 11, loop depth 0, count 118111600 (estimated locally), maybe hot
;; Invalid sum of incoming counts 157482135 (estimated locally), should be 118111600 (estimated locally)
;;  prev block 10, next block 12, flags: (HOT_PARTITION, RTL)
;;  pred:       4 [33.3% (adjusted)]  count:157482135 (estimated locally)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u87(6){ }u88(7){ }u89(16){ }u90(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 106
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  def 	 17 [flags] 92 98 99 101 109 110
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 106
;; live  gen 	 17 [flags] 92 98 99 101 109 110
;; live  kill	
(code_label 78 191 79 11 6 (nil) [1 uses])
(note 79 78 80 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(debug_insn 80 79 81 11 (debug_marker) "cmodules/fbgc_stl.c":120:5 -1
     (nil))
(debug_insn 81 80 82 11 (var_location:DI ran (reg/f:DI 82 [ _1 ])) "cmodules/fbgc_stl.c":120:32 -1
     (nil))
(debug_insn 82 81 83 11 (debug_marker) "cmodules/fbgc_stl.c":121:5 -1
     (nil))
(insn 83 82 84 11 (set (reg/f:DI 109 [ MEM[(struct fbgc_range_object *)_1].start ])
        (mem/f:DI (plus:DI (reg/f:DI 82 [ _1 ])
                (const_int 9 [0x9])) [1 MEM[(struct fbgc_range_object *)_1].start+0 S8 A8])) "cmodules/fbgc_stl.c":121:9 66 {*movdi_internal}
     (nil))
(insn 84 83 85 11 (set (reg/v:SI 101 [ start ])
        (mem:SI (plus:DI (reg/f:DI 109 [ MEM[(struct fbgc_range_object *)_1].start ])
                (const_int 9 [0x9])) [6 MEM[(struct fbgc_int_object *)_10].content+0 S4 A8])) "cmodules/fbgc_stl.c":121:9 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 109 [ MEM[(struct fbgc_range_object *)_1].start ])
        (nil)))
(debug_insn 85 84 86 11 (var_location:SI start (reg/v:SI 101 [ start ])) "cmodules/fbgc_stl.c":121:9 -1
     (nil))
(debug_insn 86 85 87 11 (debug_marker) "cmodules/fbgc_stl.c":122:5 -1
     (nil))
(insn 87 86 88 11 (set (reg/f:DI 110 [ MEM[(struct fbgc_range_object *)_1].end ])
        (mem/f:DI (plus:DI (reg/f:DI 82 [ _1 ])
                (const_int 17 [0x11])) [1 MEM[(struct fbgc_range_object *)_1].end+0 S8 A8])) "cmodules/fbgc_stl.c":122:9 66 {*movdi_internal}
     (nil))
(insn 88 87 89 11 (set (reg/v:SI 98 [ end ])
        (mem:SI (plus:DI (reg/f:DI 110 [ MEM[(struct fbgc_range_object *)_1].end ])
                (const_int 9 [0x9])) [6 MEM[(struct fbgc_int_object *)_11].content+0 S4 A8])) "cmodules/fbgc_stl.c":122:9 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 110 [ MEM[(struct fbgc_range_object *)_1].end ])
        (nil)))
(debug_insn 89 88 90 11 (var_location:SI end (reg/v:SI 98 [ end ])) "cmodules/fbgc_stl.c":122:9 -1
     (nil))
(debug_insn 90 89 91 11 (debug_marker) "cmodules/fbgc_stl.c":123:5 -1
     (nil))
(insn 91 90 6 11 (set (reg/f:DI 92 [ _12 ])
        (mem/f:DI (plus:DI (reg/f:DI 82 [ _1 ])
                (const_int 25 [0x19])) [1 MEM[(struct fbgc_range_object *)_1].step+0 S8 A8])) "cmodules/fbgc_stl.c":123:19 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
        (nil)))
(insn 6 91 92 11 (set (reg:DF 99 [ _32 ])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) 111 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 92 6 93 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 92 [ _12 ])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":123:38 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 93 92 94 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 97)
            (pc))) "cmodules/fbgc_stl.c":123:38 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 322122548 (nil)))
 -> 97)
;;  succ:       12 [70.0% (guessed)]  count:82678120 (estimated locally) (FALLTHRU)
;;              13 [30.0% (guessed)]  count:35433480 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 92 98 99 101 106
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 92 98 99 101 106

;; basic block 12, loop depth 0, count 82678120 (estimated locally), maybe hot
;;  prev block 11, next block 13, flags: (HOT_PARTITION, RTL)
;;  pred:       11 [70.0% (guessed)]  count:82678120 (estimated locally) (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u101(6){ }u102(7){ }u103(16){ }u104(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 92 98 101
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 92
;; lr  def 	 99 106
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 92 98 101
;; live  gen 	 99 106
;; live  kill	
(note 94 93 95 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 12 (set (reg/v:SI 106 [ argc ])
        (mem:SI (plus:DI (reg/f:DI 92 [ _12 ])
                (const_int 9 [0x9])) [6 MEM[(struct fbgc_int_object *)_12].content+0 S4 A8])) "cmodules/fbgc_stl.c":123:38 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92 [ _12 ])
        (nil)))
(insn 96 95 97 12 (set (reg:DF 99 [ _32 ])
        (float:DF (reg/v:SI 106 [ argc ]))) 172 {*floatsidf2}
     (nil))
;;  succ:       13 [always]  count:82678120 (estimated locally) (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 98 99 101 106
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 98 99 101 106

;; basic block 13, loop depth 0, count 118111600 (estimated locally), maybe hot
;;  prev block 12, next block 14, flags: (HOT_PARTITION, RTL)
;;  pred:       11 [30.0% (guessed)]  count:35433480 (estimated locally)
;;              12 [always]  count:82678120 (estimated locally) (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u107(6){ }u108(7){ }u109(16){ }u110(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 98 99 101 106
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 98 99 101
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 96 104 111 112 113 119
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 98 99 101 106
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 96 104 111 112 113 119
;; live  kill	 17 [flags]
(code_label 97 96 98 13 10 (nil) [1 uses])
(note 98 97 99 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(debug_insn 99 98 100 13 (var_location:SI step (reg/v:SI 106 [ argc ])) "cmodules/fbgc_stl.c":123:9 -1
     (nil))
(debug_insn 100 99 101 13 (debug_marker) "cmodules/fbgc_stl.c":125:5 -1
     (nil))
(debug_insn 101 100 102 13 (var_location:SI sz (fix:SI (div:DF (float:DF (minus:SI (reg/v:SI 98 [ end ])
                    (reg/v:SI 101 [ start ])))
            (reg:DF 99 [ _32 ])))) "cmodules/fbgc_stl.c":125:9 -1
     (nil))
(debug_insn 102 101 103 13 (debug_marker) "cmodules/fbgc_stl.c":127:5 -1
     (nil))
(insn 103 102 104 13 (parallel [
            (set (reg:SI 111)
                (minus:SI (reg/v:SI 98 [ end ])
                    (reg/v:SI 101 [ start ])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_stl.c":125:26 246 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 104 103 105 13 (set (reg:DF 112)
        (float:DF (reg:SI 111))) "cmodules/fbgc_stl.c":125:14 172 {*floatsidf2}
     (expr_list:REG_DEAD (reg:SI 111)
        (nil)))
(insn 105 104 106 13 (set (reg:DF 113)
        (div:DF (reg:DF 112)
            (reg:DF 99 [ _32 ]))) "cmodules/fbgc_stl.c":125:33 822 {*fop_df_1}
     (expr_list:REG_DEAD (reg:DF 112)
        (expr_list:REG_DEAD (reg:DF 99 [ _32 ])
            (nil))))
(insn 106 105 107 13 (set (reg:SI 96 [ sz.3_17 ])
        (fix:SI (reg:DF 113))) "cmodules/fbgc_stl.c":125:9 153 {fix_truncdfsi_sse}
     (expr_list:REG_DEAD (reg:DF 113)
        (nil)))
(insn 107 106 108 13 (set (reg:SI 5 di)
        (reg:SI 96 [ sz.3_17 ])) "cmodules/fbgc_stl.c":127:31 67 {*movsi_internal}
     (nil))
(call_insn 108 107 188 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f626c80bc00 new_fbgc_tuple_object>) [0 new_fbgc_tuple_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":127:31 677 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f626c80bc00 new_fbgc_tuple_object>)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 188 108 109 13 (set (reg:DI 119)
        (reg:DI 0 ax)) "cmodules/fbgc_stl.c":127:31 -1
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 109 188 110 13 (set (reg/v/f:DI 104 [ <retval> ])
        (reg:DI 119)) "cmodules/fbgc_stl.c":127:31 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 119)
        (nil)))
(debug_insn 110 109 111 13 (var_location:DI tp (reg/v/f:DI 104 [ <retval> ])) "cmodules/fbgc_stl.c":127:31 -1
     (nil))
(debug_insn 111 110 112 13 (debug_marker) "cmodules/fbgc_stl.c":128:5 -1
     (nil))
(debug_insn 112 111 113 13 (debug_marker) "cmodules/fbgc_stl.c":128:9 -1
     (nil))
(debug_insn 113 112 114 13 (var_location:SI i (reg/v:SI 101 [ start ])) -1
     (nil))
(debug_insn 114 113 115 13 (debug_marker) "cmodules/fbgc_stl.c":128:24 -1
     (nil))
(insn 115 114 116 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 101 [ start ])
            (reg/v:SI 98 [ end ]))) "cmodules/fbgc_stl.c":128:5 11 {*cmpsi_1}
     (nil))
(jump_insn 116 115 140 13 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 123)
            (pc))) "cmodules/fbgc_stl.c":128:5 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 955630228 (nil)))
 -> 123)
;;  succ:       15 [89.0% (guessed)]  count:105119324 (estimated locally)
;;              14 [11.0% (guessed)]  count:12992276 (estimated locally) (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 98 101 104 106
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 98 101 104 106

;; basic block 14, loop depth 0, count 118111601 (estimated locally), maybe hot
;;  prev block 13, next block 15, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [11.0% (guessed)]  count:12992276 (estimated locally) (FALLTHRU)
;;              16 [always]  count:105119324 (estimated locally) (LOOP_EXIT)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u130(6){ }u131(7){ }u132(16){ }u133(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 104
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 104
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 104
;; live  gen 	
;; live  kill	
(code_label 140 116 117 14 12 (nil) [1 uses])
(note 117 140 118 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(debug_insn 118 117 119 14 (debug_marker) "cmodules/fbgc_stl.c":132:5 -1
     (nil))
(insn 119 118 120 14 (set (mem:SI (plus:DI (reg/v/f:DI 104 [ <retval> ])
                (const_int 13 [0xd])) [6 MEM[(struct fbgc_tuple_object *)tp_36].size+0 S4 A8])
        (reg:SI 96 [ sz.3_17 ])) "cmodules/fbgc_stl.c":132:32 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 96 [ sz.3_17 ])
        (nil)))
(debug_insn 120 119 192 14 (debug_marker) "cmodules/fbgc_stl.c":134:5 -1
     (nil))
(jump_insn 192 120 193 14 (set (pc)
        (label_ref 156)) "cmodules/fbgc_stl.c":134:12 -1
     (nil)
 -> 156)
;;  succ:       18 [always]  count:118111601 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104

(barrier 193 192 123)
;; basic block 15, loop depth 0, count 955630224 (estimated locally), maybe hot
;;  prev block 14, next block 16, flags: (HOT_PARTITION, RTL)
;;  pred:       13 [89.0% (guessed)]  count:105119324 (estimated locally)
;;              15 [89.0% (guessed)]  count:850510900 (estimated locally) (DFS_BACK)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u136(6){ }u137(7){ }u138(16){ }u139(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 98 101 104 106
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 98 101 104 106
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 97 101 120
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 98 101 104 106
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 17 [flags] 97 101 120
;; live  kill	 17 [flags]
(code_label 123 193 124 15 11 (nil) [2 uses])
(note 124 123 125 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(debug_insn 125 124 126 15 (var_location:SI i (reg/v:SI 101 [ start ])) -1
     (nil))
(debug_insn 126 125 127 15 (debug_marker) "cmodules/fbgc_stl.c":129:6 -1
     (nil))
(insn 127 126 128 15 (set (reg:SI 5 di)
        (reg/v:SI 101 [ start ])) "cmodules/fbgc_stl.c":129:6 67 {*movsi_internal}
     (nil))
(call_insn 128 127 189 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_int_object") [flags 0x41]  <function_decl 0x7f626c7fa500 new_fbgc_int_object>) [0 new_fbgc_int_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":129:6 677 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_int_object") [flags 0x41]  <function_decl 0x7f626c7fa500 new_fbgc_int_object>)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 189 128 129 15 (set (reg:DI 120)
        (reg:DI 0 ax)) "cmodules/fbgc_stl.c":129:6 -1
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 129 189 130 15 (set (reg/f:DI 97 [ _18 ])
        (reg:DI 120)) "cmodules/fbgc_stl.c":129:6 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 120)
        (nil)))
(insn 130 129 131 15 (set (reg:SI 1 dx)
        (reg/v:SI 101 [ start ])) "cmodules/fbgc_stl.c":129:6 67 {*movsi_internal}
     (nil))
(insn 131 130 132 15 (set (reg:DI 4 si)
        (reg/f:DI 97 [ _18 ])) "cmodules/fbgc_stl.c":129:6 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97 [ _18 ])
        (nil)))
(insn 132 131 133 15 (set (reg:DI 5 di)
        (reg/v/f:DI 104 [ <retval> ])) "cmodules/fbgc_stl.c":129:6 66 {*movdi_internal}
     (nil))
(call_insn 133 132 134 15 (call (mem:QI (symbol_ref:DI ("set_object_in_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f626c80be00 set_object_in_fbgc_tuple_object>) [0 set_object_in_fbgc_tuple_object S1 A8])
        (const_int 0 [0])) "cmodules/fbgc_stl.c":129:6 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("set_object_in_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f626c80be00 set_object_in_fbgc_tuple_object>)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(debug_insn 134 133 135 15 (debug_marker) "cmodules/fbgc_stl.c":128:31 -1
     (nil))
(insn 135 134 136 15 (parallel [
            (set (reg/v:SI 101 [ start ])
                (plus:SI (reg/v:SI 101 [ start ])
                    (reg/v:SI 106 [ argc ])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_stl.c":128:32 190 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 136 135 137 15 (var_location:SI i (reg/v:SI 101 [ start ])) -1
     (nil))
(debug_insn 137 136 138 15 (debug_marker) "cmodules/fbgc_stl.c":128:24 -1
     (nil))
(insn 138 137 139 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 98 [ end ])
            (reg/v:SI 101 [ start ]))) "cmodules/fbgc_stl.c":128:5 11 {*cmpsi_1}
     (nil))
(jump_insn 139 138 194 15 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 123)
            (pc))) "cmodules/fbgc_stl.c":128:5 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 955630228 (nil)))
 -> 123)
;;  succ:       15 [89.0% (guessed)]  count:850510900 (estimated locally) (DFS_BACK)
;;              16 [11.0% (guessed)]  count:105119324 (estimated locally) (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 98 101 104 106
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 98 101 104 106

;; basic block 16, loop depth 0, count 105119324 (estimated locally), maybe hot
;;  prev block 15, next block 17, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [11.0% (guessed)]  count:105119324 (estimated locally) (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	
;; lr  use 	
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
(note 194 139 195 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(jump_insn 195 194 196 16 (set (pc)
        (label_ref 140)) -1
     (nil)
 -> 140)
;;  succ:       14 [always]  count:105119324 (estimated locally) (LOOP_EXIT)
;; lr  out 	
;; live  out 	

(barrier 196 195 144)
;; basic block 17, loop depth 0, count 184550402 (estimated locally), maybe hot
;;  prev block 16, next block 18, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [28.1% (guessed)]  count:184550403 (estimated locally)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u158(6){ }u159(7){ }u160(16){ }u161(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 104
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 104
;; live  kill	
(code_label 144 196 145 17 4 (nil) [1 uses])
(note 145 144 146 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(debug_insn 146 145 147 17 (debug_marker) "cmodules/fbgc_stl.c":139:7 -1
     (nil))
(insn 147 146 148 17 (set (reg:SI 1 dx)
        (reg/v:SI 106 [ argc ])) "cmodules/fbgc_stl.c":139:7 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 106 [ argc ])
        (nil)))
(insn 148 147 149 17 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f626c3ef510 *.LC1>)) "cmodules/fbgc_stl.c":139:7 66 {*movdi_internal}
     (nil))
(insn 149 148 150 17 (set (reg:SI 5 di)
        (const_int 100 [0x64])) "cmodules/fbgc_stl.c":139:7 67 {*movsi_internal}
     (nil))
(insn 150 149 151 17 (set (reg:QI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":139:7 69 {*movqi_internal}
     (nil))
(call_insn 151 150 7 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f626c7e3d00 cprintf>) [0 cprintf S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":139:7 677 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f626c7e3d00 cprintf>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 7 151 156 17 (set (reg/v/f:DI 104 [ <retval> ])
        (const_int 0 [0])) "cmodules/fbgc_stl.c":140:9 66 {*movdi_internal}
     (nil))
;;  succ:       18 [always]  count:184550402 (estimated locally) (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104

;; basic block 18, loop depth 0, count 538885205 (estimated locally), maybe hot
;; Invalid sum of incoming counts 735737869 (estimated locally), should be 538885205 (estimated locally)
;;  prev block 17, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       5 [66.7% (adjusted)]  count:314964265 (estimated locally)
;;              17 [always]  count:184550402 (estimated locally) (FALLTHRU)
;;              10 [always]  count:118111601 (estimated locally)
;;              14 [always]  count:118111601 (estimated locally)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u168(6){ }u169(7){ }u170(16){ }u171(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104
;; lr  def 	 0 [ax]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 156 7 159 18 3 (nil) [3 uses])
(note 159 156 157 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 157 159 158 18 (set (reg/i:DI 0 ax)
        (reg/v/f:DI 104 [ <retval> ])) "cmodules/fbgc_stl.c":141:1 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 104 [ <retval> ])
        (nil)))
(insn 158 157 0 18 (use (reg/i:DI 0 ax)) "cmodules/fbgc_stl.c":141:1 -1
     (nil))
;;  succ:       EXIT [always]  count:538885205 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function fbgc_len (fbgc_len, funcdef_no=56, decl_uid=5689, cgraph_uid=57, symbol_order=59)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
ending the processing of deferred insns


fbgc_len

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d,3u} r1={4d,1u} r2={3d} r4={4d,2u} r5={5d,3u} r6={1d,4u} r7={1d,6u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,3u} r17={3d,1u} r18={2d} r19={1d,4u} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={3d} r37={3d} r38={2d} r39={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r84={1d,2u} r85={1d,2u} r87={1d,1u} r88={1d,1u} 
;;    total ref usage 197{164d,33u,0e} in 24{22 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(19){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 85 87 88
;; live  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  gen 	 17 [flags] 84 85 87 88
;; live  kill	
(note 6 1 38 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 38 6 2 2 (set (reg:DI 87)
        (reg:DI 5 di [ arg ])) "cmodules/fbgc_stl.c":18:1 -1
     (expr_list:REG_DEAD (reg:DI 5 di [ arg ])
        (nil)))
(insn 2 38 39 2 (set (reg/v/f:DI 84 [ arg ])
        (reg:DI 87)) "cmodules/fbgc_stl.c":18:1 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 87)
        (nil)))
(insn 39 2 3 2 (set (reg:SI 88)
        (reg:SI 4 si [ argc ])) "cmodules/fbgc_stl.c":18:1 -1
     (expr_list:REG_DEAD (reg:SI 4 si [ argc ])
        (nil)))
(insn 3 39 4 2 (set (reg/v:SI 85 [ argc ])
        (reg:SI 88)) "cmodules/fbgc_stl.c":18:1 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 88)
        (nil)))
(note 4 3 8 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 8 4 9 2 (debug_marker) "cmodules/fbgc_stl.c":19:2 -1
     (nil))
(insn 9 8 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 85 [ argc ])
            (const_int 1 [0x1]))) "cmodules/fbgc_stl.c":19:4 11 {*cmpsi_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "cmodules/fbgc_stl.c":19:4 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 650902300 (nil)))
 -> 22)
;;  succ:       3 [39.4% (guessed)]  count:422839528 (estimated locally) (FALLTHRU)
;;              4 [60.6% (guessed)]  count:650902296 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84 85
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84 85

;; basic block 3, loop depth 0, count 422839530 (estimated locally), maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [39.4% (guessed)]  count:422839528 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(6){ }u9(7){ }u10(16){ }u11(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 12 11 13 3 (var_location:SI D#1 (const_int 1 [0x1])) -1
     (nil))
(debug_insn 13 12 14 3 (var_location:DI arg (reg/v/f:DI 84 [ arg ])) -1
     (nil))
(debug_insn 14 13 15 3 (debug_marker:BLK) "cmodules/fbgc_stl.c":17:1 -1
     (nil))
(debug_insn 15 14 16 3 (var_location:SI D#2 (debug_expr:SI D#1)) -1
     (nil))
(debug_insn 16 15 17 3 (var_location:SI argc (debug_expr:SI D#2)) -1
     (nil))
(debug_insn 17 16 18 3 (debug_marker) "cmodules/fbgc_stl.c":20:3 -1
     (nil))
(insn 18 17 19 3 (set (reg:DI 5 di)
        (mem/f:DI (reg/v/f:DI 84 [ arg ]) [1 *arg_6(D)+0 S8 A64])) "cmodules/fbgc_stl.c":20:10 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 84 [ arg ])
        (nil)))
(call_insn/j 19 18 20 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("get_length_fbgc_object") [flags 0x41]  <function_decl 0x7f626c7e8a00 get_length_fbgc_object>) [0 get_length_fbgc_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":20:10 681 {*sibcall_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("get_length_fbgc_object") [flags 0x41]  <function_decl 0x7f626c7e8a00 get_length_fbgc_object>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [always]  count:422839530 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 20 19 22)
;; basic block 4, loop depth 0, count 650902295 (estimated locally), maybe hot
;;  prev block 3, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [60.6% (guessed)]  count:650902296 (estimated locally)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u16(6){ }u17(7){ }u18(16){ }u19(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
(code_label 22 20 23 4 25 (nil) [1 uses])
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 24 23 25 4 (debug_marker) "cmodules/fbgc_stl.c":22:7 -1
     (nil))
(insn 25 24 26 4 (set (reg:SI 1 dx)
        (reg/v:SI 85 [ argc ])) "cmodules/fbgc_stl.c":22:7 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 85 [ argc ])
        (nil)))
(insn 26 25 27 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f626c44e3f0 *.LC2>)) "cmodules/fbgc_stl.c":22:7 66 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:SI 5 di)
        (const_int 100 [0x64])) "cmodules/fbgc_stl.c":22:7 67 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":22:7 69 {*movqi_internal}
     (nil))
(call_insn 29 28 30 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f626c7e3d00 cprintf>) [0 cprintf S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":22:7 677 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f626c7e3d00 cprintf>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(debug_insn 30 29 35 4 (debug_marker) "cmodules/fbgc_stl.c":23:2 -1
     (nil))
(insn 35 30 36 4 (set (reg/i:DI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":24:1 66 {*movdi_internal}
     (nil))
(insn 36 35 0 4 (use (reg/i:DI 0 ax)) "cmodules/fbgc_stl.c":24:1 -1
     (nil))
;;  succ:       EXIT [always]  count:650902295 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function fbgc_id (fbgc_id, funcdef_no=58, decl_uid=5697, cgraph_uid=59, symbol_order=63)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
ending the processing of deferred insns


fbgc_id

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,4u} r1={5d,2u} r2={4d,1u} r4={5d,3u} r5={5d,3u} r6={1d,5u} r7={1d,7u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,4u} r17={3d,1u} r18={2d} r19={1d,5u} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={3d} r37={3d} r38={2d} r39={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r85={1d,2u} r86={1d,2u} r87={1d,1u} r89={1d,1u} r90={1d,1u} 
;;    total ref usage 211{169d,42u,0e} in 38{36 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(19){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 85 86 89 90
;; live  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  gen 	 17 [flags] 85 86 89 90
;; live  kill	
(note 5 1 52 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 52 5 2 2 (set (reg:DI 89)
        (reg:DI 5 di [ arg ])) "cmodules/fbgc_stl.c":63:33 -1
     (expr_list:REG_DEAD (reg:DI 5 di [ arg ])
        (nil)))
(insn 2 52 53 2 (set (reg/v/f:DI 85 [ arg ])
        (reg:DI 89)) "cmodules/fbgc_stl.c":63:33 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 89)
        (nil)))
(insn 53 2 3 2 (set (reg:SI 90)
        (reg:SI 4 si [ argc ])) "cmodules/fbgc_stl.c":63:33 -1
     (expr_list:REG_DEAD (reg:SI 4 si [ argc ])
        (nil)))
(insn 3 53 4 2 (set (reg/v:SI 86 [ argc ])
        (reg:SI 90)) "cmodules/fbgc_stl.c":63:33 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 90)
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 7 4 8 2 (debug_marker) "cmodules/fbgc_stl.c":64:2 -1
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 86 [ argc ])
            (const_int 1 [0x1]))) "cmodules/fbgc_stl.c":64:4 11 {*cmpsi_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "cmodules/fbgc_stl.c":64:4 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 708669604 (nil)))
 -> 30)
;;  succ:       3 [34.0% (guessed)]  count:365072224 (estimated locally) (FALLTHRU)
;;              4 [66.0% (guessed)]  count:708669600 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 86
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 86

;; basic block 3, loop depth 0, count 365072220 (estimated locally), maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [34.0% (guessed)]  count:365072224 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(6){ }u9(7){ }u10(16){ }u11(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 87
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 87
;; live  kill	
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 11 10 12 3 (var_location:SI D#3 (const_int 1 [0x1])) -1
     (nil))
(debug_insn 12 11 13 3 (var_location:DI arg (reg/v/f:DI 85 [ arg ])) -1
     (nil))
(debug_insn 13 12 14 3 (debug_marker:BLK) "cmodules/fbgc_stl.c":63:1 -1
     (nil))
(debug_insn 14 13 15 3 (var_location:SI D#4 (debug_expr:SI D#3)) -1
     (nil))
(debug_insn 15 14 16 3 (var_location:SI argc (debug_expr:SI D#4)) -1
     (nil))
(debug_insn 16 15 17 3 (debug_marker) "cmodules/fbgc_stl.c":65:3 -1
     (nil))
(debug_insn 17 16 18 3 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7f626ca21240 stdout>) [2 stdout+0 S8 A64])) "cmodules/fbgc_stl.c":65:3 -1
     (nil))
(debug_insn 18 17 19 3 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f626c44ec60 *.LC3>)) "cmodules/fbgc_stl.c":65:3 -1
     (nil))
(debug_insn 19 18 20 3 (debug_marker:BLK) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":98:1 -1
     (nil))
(debug_insn 20 19 21 3 (debug_marker) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":100:3 -1
     (nil))
(insn 21 20 22 3 (set (reg/f:DI 87 [ stdout ])
        (mem/f/c:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7f626ca21240 stdout>) [2 stdout+0 S8 A64])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":100:10 66 {*movdi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:DI 2 cx)
        (mem/f:DI (reg/v/f:DI 85 [ arg ]) [1 *arg_4(D)+0 S8 A64])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":100:10 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 85 [ arg ])
        (nil)))
(insn 23 22 24 3 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f626c44ec60 *.LC3>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":100:10 66 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":100:10 67 {*movsi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:DI 5 di)
        (reg/f:DI 87 [ stdout ])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":100:10 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ stdout ])
        (nil)))
(insn 26 25 27 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":100:10 69 {*movqi_internal}
     (nil))
(call_insn 27 26 54 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f626c919100 __fprintf_chk>) [0 __builtin___fprintf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":100:10 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                        (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f626c919100 __fprintf_chk>)
                            (nil)))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(jump_insn 54 27 55 3 (set (pc)
        (label_ref 38)) -1
     (nil)
 -> 38)
;;  succ:       5 [always]  count:365072220 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 55 54 30)
;; basic block 4, loop depth 0, count 708669605 (estimated locally), maybe hot
;;  prev block 3, next block 5, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [66.0% (guessed)]  count:708669600 (estimated locally)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u21(6){ }u22(7){ }u23(16){ }u24(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
(code_label 30 55 31 4 30 (nil) [1 uses])
(note 31 30 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 32 31 33 4 (debug_marker) "cmodules/fbgc_stl.c":67:7 -1
     (nil))
(insn 33 32 34 4 (set (reg:SI 1 dx)
        (reg/v:SI 86 [ argc ])) "cmodules/fbgc_stl.c":67:7 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 86 [ argc ])
        (nil)))
(insn 34 33 35 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f626c44ecf0 *.LC4>)) "cmodules/fbgc_stl.c":67:7 66 {*movdi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:SI 5 di)
        (const_int 100 [0x64])) "cmodules/fbgc_stl.c":67:7 67 {*movsi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":67:7 69 {*movqi_internal}
     (nil))
(call_insn 37 36 38 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f626c7e3d00 cprintf>) [0 cprintf S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":67:7 677 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f626c7e3d00 cprintf>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
;;  succ:       5 [always]  count:708669605 (estimated locally) (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 4, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       4 [always]  count:708669605 (estimated locally) (FALLTHRU)
;;              3 [always]  count:365072220 (estimated locally)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u31(6){ }u32(7){ }u33(16){ }u34(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 38 37 39 5 31 (nil) [1 uses])
(note 39 38 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(debug_insn 40 39 41 5 (var_location:DI arg (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 41 40 42 5 (var_location:SI argc (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 42 41 43 5 (var_location:DI __stream (clobber (const_int 0 [0]))) "cmodules/fbgc_stl.c":65:3 -1
     (nil))
(debug_insn 43 42 44 5 (var_location:DI __fmt (clobber (const_int 0 [0]))) "cmodules/fbgc_stl.c":65:3 -1
     (nil))
(debug_insn 44 43 49 5 (debug_marker) "cmodules/fbgc_stl.c":68:2 -1
     (nil))
(insn 49 44 50 5 (set (reg/i:DI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":69:1 66 {*movdi_internal}
     (nil))
(insn 50 49 0 5 (use (reg/i:DI 0 ax)) "cmodules/fbgc_stl.c":69:1 -1
     (nil))
;;  succ:       EXIT [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function fbgc_load (fbgc_load, funcdef_no=57, decl_uid=5693, cgraph_uid=58, symbol_order=61)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
ending the processing of deferred insns


fbgc_load

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,4u} r1={8d,3u} r2={5d} r4={9d,5u} r5={9d,5u} r6={1d,15u} r7={1d,19u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,14u} r17={17d,7u} r18={4d} r19={1d,15u} r20={5d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={5d} r37={5d} r38={4d} r39={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r82={1d,2u} r91={2d,5u} r104={2d,5u} r106={4d,3u} r107={1d,7u,2e} r108={1d,4u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} 
;;    total ref usage 474{341d,131u,2e} in 91{87 regular + 4 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 223437739 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL)
;;  pred:       ENTRY [always]  count:223437739 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(19){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 107 108 124 125
;; live  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  gen 	 17 [flags] 107 108 124 125
;; live  kill	
(note 10 1 137 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 137 10 2 2 (set (reg:DI 124)
        (reg:DI 5 di [ arg ])) "cmodules/fbgc_stl.c":27:1 -1
     (expr_list:REG_DEAD (reg:DI 5 di [ arg ])
        (nil)))
(insn 2 137 138 2 (set (reg/v/f:DI 107 [ arg ])
        (reg:DI 124)) "cmodules/fbgc_stl.c":27:1 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 124)
        (nil)))
(insn 138 2 3 2 (set (reg:SI 125)
        (reg:SI 4 si [ argc ])) "cmodules/fbgc_stl.c":27:1 -1
     (expr_list:REG_DEAD (reg:SI 4 si [ argc ])
        (nil)))
(insn 3 138 4 2 (set (reg/v:SI 108 [ argc ])
        (reg:SI 125)) "cmodules/fbgc_stl.c":27:1 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 125)
        (nil)))
(note 4 3 12 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 12 4 13 2 (debug_marker) "cmodules/fbgc_stl.c":34:2 -1
     (nil))
(debug_insn 13 12 14 2 (var_location:DI res (const_int 0 [0])) "cmodules/fbgc_stl.c":34:23 -1
     (nil))
(debug_insn 14 13 15 2 (debug_marker) "cmodules/fbgc_stl.c":36:2 -1
     (nil))
(insn 15 14 16 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 108 [ argc ])
            (const_int 1 [0x1]))) "cmodules/fbgc_stl.c":36:4 11 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 2 (set (pc)
        (if_then_else (ne (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) "cmodules/fbgc_stl.c":36:4 659 {*jcc}
     (int_list:REG_BR_PROB 708669604 (nil))
 -> 31)
;;  succ:       3 [34.0% (guessed)]  count:75968832 (estimated locally) (FALLTHRU)
;;              5 [66.0% (guessed)]  count:147468907 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 19 [frame] 107 108
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 19 [frame] 107 108

;; basic block 3, loop depth 0, count 75968831 (estimated locally), maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [34.0% (guessed)]  count:75968832 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(6){ }u9(7){ }u10(16){ }u11(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 107
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 107
;; lr  def 	 17 [flags] 82 106
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 107
;; live  gen 	 17 [flags] 82 106
;; live  kill	
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 18 17 19 3 (debug_marker) "cmodules/fbgc_stl.c":37:3 -1
     (nil))
(insn 19 18 9 3 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (reg/v/f:DI 107 [ arg ]) [1 *arg_17(D)+0 S8 A64])) "cmodules/fbgc_stl.c":37:9 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 107 [ arg ])
        (nil)))
(insn 9 19 20 3 (set (reg/v/f:DI 106 [ <retval> ])
        (const_int 0 [0])) "cmodules/fbgc_stl.c":34:23 66 {*movdi_internal}
     (nil))
(insn 20 9 21 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (reg/f:DI 82 [ _1 ]) [0 _1->type+0 S1 A8])
            (const_int 6 [0x6]))) "cmodules/fbgc_stl.c":37:5 9 {*cmpqi_1}
     (nil))
(jump_insn 21 20 22 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 111)
            (pc))) "cmodules/fbgc_stl.c":37:5 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 813466812 (nil)))
 -> 111)
;;  succ:       4 [24.2% (guessed)]  count:18414844 (estimated locally) (FALLTHRU)
;;              15 [75.8% (guessed)]  count:57553987 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 106
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 106

;; basic block 4, loop depth 0, count 18414845 (estimated locally), maybe hot
;;  prev block 3, next block 5, flags: (HOT_PARTITION, RTL)
;;  pred:       3 [24.2% (guessed)]  count:18414844 (estimated locally) (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u15(6){ }u16(7){ }u17(16){ }u18(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 109
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 109
;; live  kill	 17 [flags]
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 23 22 24 4 (debug_marker) "cmodules/fbgc_stl.c":38:4 -1
     (nil))
(insn 24 23 25 4 (parallel [
            (set (reg/f:DI 109)
                (plus:DI (reg/f:DI 82 [ _1 ])
                    (const_int 13 [0xd])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_stl.c":38:28 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 25 24 26 4 (set (reg:SI 1 dx)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":38:11 67 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 4 si)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":38:11 66 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 5 di)
        (reg/f:DI 109)) "cmodules/fbgc_stl.c":38:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 109)
        (nil)))
(call_insn/j 28 27 29 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fbgc_load_module") [flags 0x41]  <function_decl 0x7f626c82cb00 fbgc_load_module>) [0 fbgc_load_module S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":38:11 681 {*sibcall_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("fbgc_load_module") [flags 0x41]  <function_decl 0x7f626c82cb00 fbgc_load_module>)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
;;  succ:       EXIT [always]  count:18414845 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 29 28 31)
;; basic block 5, loop depth 0, count 147468908 (estimated locally), maybe hot
;;  prev block 4, next block 6, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [66.0% (guessed)]  count:147468907 (estimated locally)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u25(6){ }u26(7){ }u27(16){ }u28(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 19 [frame] 107 108
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 19 [frame]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 19 [frame] 107 108
;; live  gen 	
;; live  kill	
(code_label 31 29 32 5 35 (nil) [1 uses])
(note 32 31 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(debug_insn 33 32 37 5 (debug_marker) "cmodules/fbgc_stl.c":40:7 -1
     (nil))
(jump_insn 37 33 120 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 124)
            (pc))) "cmodules/fbgc_stl.c":40:9 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 237404324 (nil)))
 -> 124)
;;  succ:       6 [77.9% (guessed)]  count:114863532 (estimated locally) (FALLTHRU)
;;              13 [22.1% (guessed)]  count:32605376 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 107 108
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 107 108

;; basic block 6, loop depth 0, count 114863532 (estimated locally), maybe hot
;;  prev block 5, next block 7, flags: (HOT_PARTITION, RTL)
;;  pred:       5 [77.9% (guessed)]  count:114863532 (estimated locally) (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u30(6){ }u31(7){ }u32(16){ }u33(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 107 108
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 91
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 107 108
;; live  gen 	 91
;; live  kill	
(note 120 37 5 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 5 120 50 6 (set (reg/v:QI 91 [ i ])
        (const_int 0 [0])) "cmodules/fbgc_stl.c":41:15 69 {*movqi_internal}
     (nil))
;;  succ:       7 [always]  count:114863532 (estimated locally) (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91 107 108
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91 107 108

;; basic block 7, loop depth 0, count 1014686024 (estimated locally), maybe hot
;;  prev block 6, next block 8, flags: (HOT_PARTITION, RTL)
;;  pred:       6 [always]  count:114863532 (estimated locally) (FALLTHRU)
;;              8 [94.5% (guessed)]  count:906139987 (estimated locally) (DFS_BACK)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u34(6){ }u35(7){ }u36(16){ }u37(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91 107 108
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91 107
;; lr  def 	 17 [flags] 110 111
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91 107 108
;; live  gen 	 17 [flags] 110 111
;; live  kill	
(code_label 50 5 38 7 37 (nil) [1 uses])
(note 38 50 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(debug_insn 39 38 40 7 (var_location:QI i (reg/v:QI 91 [ i ])) -1
     (nil))
(debug_insn 40 39 41 7 (debug_marker) "cmodules/fbgc_stl.c":42:4 -1
     (nil))
(insn 41 40 42 7 (set (reg:DI 110 [ i ])
        (zero_extend:DI (reg/v:QI 91 [ i ]))) "cmodules/fbgc_stl.c":42:10 115 {zero_extendqidi2}
     (nil))
(insn 42 41 43 7 (set (reg/f:DI 111 [ *_7 ])
        (mem/f:DI (plus:DI (mult:DI (reg:DI 110 [ i ])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 107 [ arg ])) [1 *_7+0 S8 A64])) "cmodules/fbgc_stl.c":42:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 110 [ i ])
        (nil)))
(insn 43 42 44 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (reg/f:DI 111 [ *_7 ]) [0 _8->type+0 S1 A8])
            (const_int 6 [0x6]))) "cmodules/fbgc_stl.c":42:6 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg/f:DI 111 [ *_7 ])
        (nil)))
(jump_insn 44 43 45 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 128)
            (pc))) "cmodules/fbgc_stl.c":42:6 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 59055804 (nil)))
 -> 128)
;;  succ:       14 [5.5% (guessed)]  count:55807731 (estimated locally) (LOOP_EXIT)
;;              8 [94.5% (guessed)]  count:958878293 (estimated locally) (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91 107 108
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91 107 108

;; basic block 8, loop depth 0, count 958878293 (estimated locally), maybe hot
;;  prev block 7, next block 9, flags: (HOT_PARTITION, RTL)
;;  pred:       7 [94.5% (guessed)]  count:958878293 (estimated locally) (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u44(6){ }u45(7){ }u46(16){ }u47(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91 107 108
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91 108
;; lr  def 	 17 [flags] 91 112
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91 107 108
;; live  gen 	 17 [flags] 91 112
;; live  kill	 17 [flags]
(note 45 44 46 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 46 45 47 8 (debug_marker) "cmodules/fbgc_stl.c":41:30 -1
     (nil))
(insn 47 46 48 8 (parallel [
            (set (reg/v:QI 91 [ i ])
                (plus:QI (reg/v:QI 91 [ i ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_stl.c":41:30 194 {*addqi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 48 47 49 8 (var_location:QI i (reg/v:QI 91 [ i ])) -1
     (nil))
(debug_insn 49 48 51 8 (debug_marker) "cmodules/fbgc_stl.c":41:22 -1
     (nil))
(insn 51 49 52 8 (set (reg:SI 112 [ i ])
        (zero_extend:SI (reg/v:QI 91 [ i ]))) "cmodules/fbgc_stl.c":41:23 119 {*zero_extendqisi2}
     (nil))
(insn 52 51 53 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 112 [ i ])
            (reg/v:SI 108 [ argc ]))) "cmodules/fbgc_stl.c":41:3 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 112 [ i ])
        (nil)))
(jump_insn 53 52 54 8 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 50)
            (pc))) "cmodules/fbgc_stl.c":41:3 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 1014686028 (nil)))
 -> 50)
;;  succ:       7 [94.5% (guessed)]  count:906139987 (estimated locally) (DFS_BACK)
;;              9 [5.5% (guessed)]  count:52738306 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91 107 108
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91 107 108

;; basic block 9, loop depth 0, count 59055800 (estimated locally), maybe hot
;; Invalid sum of incoming counts 52738306 (estimated locally), should be 59055800 (estimated locally)
;;  prev block 8, next block 10, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [5.5% (guessed)]  count:52738306 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u54(6){ }u55(7){ }u56(16){ }u57(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 107 108
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 107
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 104 113 114 126
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 107 108
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags] 104 113 114 126
;; live  kill	 17 [flags]
(note 54 53 55 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(debug_insn 55 54 56 9 (var_location:DI arg (reg/v/f:DI 107 [ arg ])) -1
     (nil))
(debug_insn 56 55 57 9 (var_location:SI argc (reg/v:SI 108 [ argc ])) -1
     (nil))
(debug_insn 57 56 58 9 (debug_marker:BLK) "cmodules/fbgc_stl.c":26:1 -1
     (nil))
(debug_insn 58 57 59 9 (debug_marker) "cmodules/fbgc_stl.c":45:3 -1
     (nil))
(insn 59 58 60 9 (set (reg/f:DI 114 [ MEM[(struct fbgc_object * *)arg_17(D) + 8B] ])
        (mem/f:DI (plus:DI (reg/v/f:DI 107 [ arg ])
                (const_int 8 [0x8])) [1 MEM[(struct fbgc_object * *)arg_17(D) + 8B]+0 S8 A64])) "cmodules/fbgc_stl.c":45:17 66 {*movdi_internal}
     (nil))
(insn 60 59 61 9 (parallel [
            (set (reg/f:DI 113)
                (plus:DI (reg/f:DI 114 [ MEM[(struct fbgc_object * *)arg_17(D) + 8B] ])
                    (const_int 13 [0xd])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_stl.c":45:17 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 114 [ MEM[(struct fbgc_object * *)arg_17(D) + 8B] ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f:DI (plus:DI (reg/v/f:DI 107 [ arg ])
                            (const_int 8 [0x8])) [1 MEM[(struct fbgc_object * *)arg_17(D) + 8B]+0 S8 A64])
                    (const_int 13 [0xd]))
                (nil)))))
(insn 61 60 62 9 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f626c461d80 *.LC5>)) "cmodules/fbgc_stl.c":45:7 66 {*movdi_internal}
     (nil))
(insn 62 61 63 9 (set (reg:DI 5 di)
        (reg/f:DI 113)) "cmodules/fbgc_stl.c":45:7 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113)
        (nil)))
(call_insn 63 62 139 9 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("my_strcmp") [flags 0x41]  <function_decl 0x7f626c806900 my_strcmp>) [0 my_strcmp S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":45:7 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("my_strcmp") [flags 0x41]  <function_decl 0x7f626c806900 my_strcmp>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 139 63 64 9 (set (reg:QI 126)
        (reg:QI 0 ax)) "cmodules/fbgc_stl.c":45:7 -1
     (expr_list:REG_DEAD (reg:QI 0 ax)
        (nil)))
(note 64 139 6 9 NOTE_INSN_DELETED)
(insn 6 64 65 9 (set (reg/v:QI 104 [ i ])
        (const_int 1 [0x1])) "cmodules/fbgc_stl.c":50:16 69 {*movqi_internal}
     (nil))
(insn 65 6 66 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 126)
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":45:5 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 126)
        (nil)))
(jump_insn 66 65 67 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 77)
            (pc))) "cmodules/fbgc_stl.c":45:5 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 719407028 (nil)))
 -> 77)
;;  succ:       10 [33.0% (guessed)]  count:19488414 (estimated locally) (FALLTHRU)
;;              11 [67.0% (guessed)]  count:39567386 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104 107 108
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104 107 108

;; basic block 10, loop depth 0, count 19488414 (estimated locally), maybe hot
;;  prev block 9, next block 11, flags: (HOT_PARTITION, RTL)
;;  pred:       9 [33.0% (guessed)]  count:19488414 (estimated locally) (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u70(6){ }u71(7){ }u72(16){ }u73(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 107
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 107
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 115 116
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 107
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 115 116
;; live  kill	 17 [flags]
(note 67 66 68 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(debug_insn 68 67 69 10 (debug_marker) "cmodules/fbgc_stl.c":46:4 -1
     (nil))
(insn 69 68 70 10 (set (reg/f:DI 116 [ *arg_17(D) ])
        (mem/f:DI (reg/v/f:DI 107 [ arg ]) [1 *arg_17(D)+0 S8 A64])) "cmodules/fbgc_stl.c":46:27 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 107 [ arg ])
        (nil)))
(insn 70 69 71 10 (parallel [
            (set (reg/f:DI 115)
                (plus:DI (reg/f:DI 116 [ *arg_17(D) ])
                    (const_int 13 [0xd])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_stl.c":46:27 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 116 [ *arg_17(D) ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 71 70 72 10 (set (reg:SI 1 dx)
        (const_int 1 [0x1])) "cmodules/fbgc_stl.c":46:10 67 {*movsi_internal}
     (nil))
(insn 72 71 73 10 (set (reg:DI 4 si)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":46:10 66 {*movdi_internal}
     (nil))
(insn 73 72 74 10 (set (reg:DI 5 di)
        (reg/f:DI 115)) "cmodules/fbgc_stl.c":46:10 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 115)
        (nil)))
(call_insn/j 74 73 75 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fbgc_load_module") [flags 0x41]  <function_decl 0x7f626c82cb00 fbgc_load_module>) [0 fbgc_load_module S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":46:10 681 {*sibcall_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("fbgc_load_module") [flags 0x41]  <function_decl 0x7f626c82cb00 fbgc_load_module>)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
;;  succ:       EXIT [always]  count:19488414 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 75 74 77)
;; basic block 11, loop depth 0, count 320136127 (estimated locally), maybe hot
;;  prev block 10, next block 12, flags: (HOT_PARTITION, RTL)
;;  pred:       9 [67.0% (guessed)]  count:39567386 (estimated locally)
;;              11 [89.0% (guessed)]  count:284921153 (estimated locally) (DFS_BACK)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u81(6){ }u82(7){ }u83(16){ }u84(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104 107 108
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104 107 108
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 104 106 117 118 119 120 121 122 127
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104 107 108
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 17 [flags] 104 106 117 118 119 120 121 122 127
;; live  kill	 17 [flags]
(code_label 77 75 78 11 38 (nil) [2 uses])
(note 78 77 79 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(debug_insn 79 78 80 11 (var_location:QI i (reg/v:QI 104 [ i ])) -1
     (nil))
(debug_insn 80 79 81 11 (var_location:DI res (const_int 0 [0])) -1
     (nil))
(debug_insn 81 80 82 11 (debug_marker) "cmodules/fbgc_stl.c":51:5 -1
     (nil))
(insn 82 81 83 11 (set (reg:DI 117 [ i ])
        (zero_extend:DI (reg/v:QI 104 [ i ]))) "cmodules/fbgc_stl.c":51:60 115 {zero_extendqidi2}
     (nil))
(insn 83 82 84 11 (set (reg/f:DI 119 [ *_30 ])
        (mem/f:DI (plus:DI (mult:DI (reg:DI 117 [ i ])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 107 [ arg ])) [1 *_30+0 S8 A64])) "cmodules/fbgc_stl.c":51:60 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 117 [ i ])
        (nil)))
(insn 84 83 85 11 (parallel [
            (set (reg/f:DI 118)
                (plus:DI (reg/f:DI 119 [ *_30 ])
                    (const_int 13 [0xd])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_stl.c":51:60 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 119 [ *_30 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 85 84 86 11 (set (reg/f:DI 121 [ *arg_17(D) ])
        (mem/f:DI (reg/v/f:DI 107 [ arg ]) [1 *arg_17(D)+0 S8 A64])) "cmodules/fbgc_stl.c":51:28 66 {*movdi_internal}
     (nil))
(insn 86 85 87 11 (parallel [
            (set (reg/f:DI 120)
                (plus:DI (reg/f:DI 121 [ *arg_17(D) ])
                    (const_int 13 [0xd])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_stl.c":51:28 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 121 [ *arg_17(D) ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f:DI (reg/v/f:DI 107 [ arg ]) [1 *arg_17(D)+0 S8 A64])
                    (const_int 13 [0xd]))
                (nil)))))
(insn 87 86 88 11 (set (reg:SI 1 dx)
        (const_int 2 [0x2])) "cmodules/fbgc_stl.c":51:11 67 {*movsi_internal}
     (nil))
(insn 88 87 89 11 (set (reg:DI 4 si)
        (reg/f:DI 118)) "cmodules/fbgc_stl.c":51:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 118)
        (nil)))
(insn 89 88 90 11 (set (reg:DI 5 di)
        (reg/f:DI 120)) "cmodules/fbgc_stl.c":51:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 120)
        (nil)))
(call_insn 90 89 140 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fbgc_load_module") [flags 0x41]  <function_decl 0x7f626c82cb00 fbgc_load_module>) [0 fbgc_load_module S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":51:11 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("fbgc_load_module") [flags 0x41]  <function_decl 0x7f626c82cb00 fbgc_load_module>)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 140 90 91 11 (set (reg:DI 127)
        (reg:DI 0 ax)) "cmodules/fbgc_stl.c":51:11 -1
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 91 140 92 11 (set (reg/v/f:DI 106 [ <retval> ])
        (reg:DI 127)) "cmodules/fbgc_stl.c":51:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 127)
        (nil)))
(debug_insn 92 91 93 11 (var_location:DI res (reg/v/f:DI 106 [ <retval> ])) "cmodules/fbgc_stl.c":51:11 -1
     (nil))
(debug_insn 93 92 94 11 (debug_marker) "cmodules/fbgc_stl.c":50:31 -1
     (nil))
(insn 94 93 95 11 (parallel [
            (set (reg/v:QI 104 [ i ])
                (plus:QI (reg/v:QI 104 [ i ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_stl.c":50:31 194 {*addqi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 95 94 96 11 (var_location:QI i (reg/v:QI 104 [ i ])) -1
     (nil))
(debug_insn 96 95 97 11 (var_location:DI res (reg/v/f:DI 106 [ <retval> ])) -1
     (nil))
(debug_insn 97 96 98 11 (debug_marker) "cmodules/fbgc_stl.c":50:23 -1
     (nil))
(insn 98 97 99 11 (set (reg:SI 122 [ i ])
        (zero_extend:SI (reg/v:QI 104 [ i ]))) "cmodules/fbgc_stl.c":50:24 119 {*zero_extendqisi2}
     (nil))
(insn 99 98 100 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 108 [ argc ])
            (reg:SI 122 [ i ]))) "cmodules/fbgc_stl.c":50:4 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 122 [ i ])
        (nil)))
(jump_insn 100 99 141 11 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 77)
            (pc))) "cmodules/fbgc_stl.c":50:4 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 955630228 (nil)))
 -> 77)
;;  succ:       11 [89.0% (guessed)]  count:284921153 (estimated locally) (DFS_BACK)
;;              12 [11.0% (guessed)]  count:35214974 (estimated locally) (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104 106 107 108
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104 106 107 108

;; basic block 12, loop depth 0, count 35214974 (estimated locally), maybe hot
;;  prev block 11, next block 13, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [11.0% (guessed)]  count:35214974 (estimated locally) (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	
;; lr  use 	
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
(note 141 100 142 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(jump_insn 142 141 143 12 (set (pc)
        (label_ref 111)) -1
     (nil)
 -> 111)
;;  succ:       15 [always]  count:35214974 (estimated locally) (LOOP_EXIT)
;; lr  out 	
;; live  out 	

(barrier 143 142 124)
;; basic block 13, loop depth 0, count 32605376 (estimated locally), maybe hot
;;  prev block 12, next block 14, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [22.1% (guessed)]  count:32605376 (estimated locally)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u108(6){ }u109(7){ }u110(16){ }u111(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 106
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  gen 	 106
;; live  kill	
(code_label 124 143 123 13 40 (nil) [1 uses])
(note 123 124 8 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 8 123 144 13 (set (reg/v/f:DI 106 [ <retval> ])
        (const_int 0 [0])) "cmodules/fbgc_stl.c":34:23 66 {*movdi_internal}
     (nil))
(jump_insn 144 8 145 13 (set (pc)
        (label_ref 111)) -1
     (nil)
 -> 111)
;;  succ:       15 [always]  count:32605376 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106

(barrier 145 144 128)
;; basic block 14, loop depth 0, count 55807731 (estimated locally), maybe hot
;;  prev block 13, next block 15, flags: (HOT_PARTITION, RTL)
;;  pred:       7 [5.5% (guessed)]  count:55807731 (estimated locally) (LOOP_EXIT)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u112(6){ }u113(7){ }u114(16){ }u115(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 106
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  gen 	 106
;; live  kill	
(code_label 128 145 127 14 41 (nil) [1 uses])
(note 127 128 7 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 7 127 103 14 (set (reg/v/f:DI 106 [ <retval> ])
        (const_int 0 [0])) "cmodules/fbgc_stl.c":34:23 66 {*movdi_internal}
     (nil))
(debug_insn 103 7 104 14 (var_location:DI arg (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 104 103 105 14 (var_location:SI argc (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 105 104 106 14 (var_location:DI res (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 106 105 107 14 (var_location:QI i (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 107 106 108 14 (var_location:QI i (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 108 107 111 14 (var_location:DI res (clobber (const_int 0 [0]))) -1
     (nil))
;;  succ:       15 [always]  count:55807731 (estimated locally) (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106

;; basic block 15, loop depth 0, count 185534479 (estimated locally), maybe hot
;; Invalid sum of incoming counts 181182068 (estimated locally), should be 185534479 (estimated locally)
;;  prev block 14, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       14 [always]  count:55807731 (estimated locally) (FALLTHRU)
;;              12 [always]  count:35214974 (estimated locally) (LOOP_EXIT)
;;              3 [75.8% (guessed)]  count:57553987 (estimated locally)
;;              13 [always]  count:32605376 (estimated locally)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u116(6){ }u117(7){ }u118(16){ }u119(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106
;; lr  def 	 0 [ax]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 111 108 114 15 34 (nil) [3 uses])
(note 114 111 112 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 112 114 113 15 (set (reg/i:DI 0 ax)
        (reg/v/f:DI 106 [ <retval> ])) "cmodules/fbgc_stl.c":59:1 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 106 [ <retval> ])
        (nil)))
(insn 113 112 0 15 (use (reg/i:DI 0 ax)) "cmodules/fbgc_stl.c":59:1 -1
     (nil))
;;  succ:       EXIT [always]  count:185534479 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function fbgc_type (fbgc_type, funcdef_no=59, decl_uid=5717, cgraph_uid=60, symbol_order=65)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
ending the processing of deferred insns


fbgc_type

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d,3u} r1={4d,1u} r2={3d} r4={4d,2u} r5={5d,3u} r6={1d,4u} r7={1d,6u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,3u} r17={3d,1u} r18={2d} r19={1d,4u} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={3d} r37={3d} r38={2d} r39={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r86={1d,2u} r87={1d,2u} r88={1d,1u} r89={1d,1u} r91={1d,1u} r92={1d,1u} 
;;    total ref usage 201{166d,35u,0e} in 26{24 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(19){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 86 87 91 92
;; live  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  gen 	 17 [flags] 86 87 91 92
;; live  kill	
(note 6 1 40 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 40 6 2 2 (set (reg:DI 91)
        (reg:DI 5 di [ arg ])) "cmodules/fbgc_stl.c":72:37 -1
     (expr_list:REG_DEAD (reg:DI 5 di [ arg ])
        (nil)))
(insn 2 40 41 2 (set (reg/v/f:DI 86 [ arg ])
        (reg:DI 91)) "cmodules/fbgc_stl.c":72:37 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 91)
        (nil)))
(insn 41 2 3 2 (set (reg:SI 92)
        (reg:SI 4 si [ argc ])) "cmodules/fbgc_stl.c":72:37 -1
     (expr_list:REG_DEAD (reg:SI 4 si [ argc ])
        (nil)))
(insn 3 41 4 2 (set (reg/v:SI 87 [ argc ])
        (reg:SI 92)) "cmodules/fbgc_stl.c":72:37 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92)
        (nil)))
(note 4 3 8 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 8 4 9 2 (debug_marker) "cmodules/fbgc_stl.c":73:2 -1
     (nil))
(insn 9 8 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 87 [ argc ])
            (const_int 1 [0x1]))) "cmodules/fbgc_stl.c":73:4 11 {*cmpsi_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) "cmodules/fbgc_stl.c":73:4 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 650902300 (nil)))
 -> 24)
;;  succ:       3 [39.4% (guessed)]  count:422839528 (estimated locally) (FALLTHRU)
;;              4 [60.6% (guessed)]  count:650902296 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 87
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 87

;; basic block 3, loop depth 0, count 422839530 (estimated locally), maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [39.4% (guessed)]  count:422839528 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(6){ }u9(7){ }u10(16){ }u11(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 88 89
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; live  gen 	 0 [ax] 5 [di] 88 89
;; live  kill	
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 12 11 13 3 (var_location:SI D#5 (const_int 1 [0x1])) -1
     (nil))
(debug_insn 13 12 14 3 (var_location:DI arg (reg/v/f:DI 86 [ arg ])) -1
     (nil))
(debug_insn 14 13 15 3 (debug_marker:BLK) "cmodules/fbgc_stl.c":72:1 -1
     (nil))
(debug_insn 15 14 16 3 (var_location:SI D#6 (debug_expr:SI D#5)) -1
     (nil))
(debug_insn 16 15 17 3 (var_location:SI argc (debug_expr:SI D#6)) -1
     (nil))
(debug_insn 17 16 18 3 (debug_marker) "cmodules/fbgc_stl.c":74:3 -1
     (nil))
(insn 18 17 19 3 (set (reg/f:DI 88 [ *arg_6(D) ])
        (mem/f:DI (reg/v/f:DI 86 [ arg ]) [1 *arg_6(D)+0 S8 A64])) "cmodules/fbgc_stl.c":74:36 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 86 [ arg ])
        (nil)))
(insn 19 18 20 3 (set (reg:SI 89 [ _9->type ])
        (zero_extend:SI (mem:QI (reg/f:DI 88 [ *arg_6(D) ]) [0 _9->type+0 S1 A8]))) "cmodules/fbgc_stl.c":74:10 119 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:DI 88 [ *arg_6(D) ])
        (nil)))
(insn 20 19 21 3 (set (reg:SI 5 di)
        (reg:SI 89 [ _9->type ])) "cmodules/fbgc_stl.c":74:10 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 89 [ _9->type ])
        (nil)))
(call_insn/j 21 20 22 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_int_object") [flags 0x41]  <function_decl 0x7f626c7fa500 new_fbgc_int_object>) [0 new_fbgc_int_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":74:10 681 {*sibcall_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_int_object") [flags 0x41]  <function_decl 0x7f626c7fa500 new_fbgc_int_object>)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:       EXIT [always]  count:422839530 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 22 21 24)
;; basic block 4, loop depth 0, count 650902295 (estimated locally), maybe hot
;;  prev block 3, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [60.6% (guessed)]  count:650902296 (estimated locally)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u18(6){ }u19(7){ }u20(16){ }u21(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 87
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
(code_label 24 22 25 4 53 (nil) [1 uses])
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 26 25 27 4 (debug_marker) "cmodules/fbgc_stl.c":76:7 -1
     (nil))
(insn 27 26 28 4 (set (reg:SI 1 dx)
        (reg/v:SI 87 [ argc ])) "cmodules/fbgc_stl.c":76:7 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 87 [ argc ])
        (nil)))
(insn 28 27 29 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f626c44ecf0 *.LC4>)) "cmodules/fbgc_stl.c":76:7 66 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:SI 5 di)
        (const_int 100 [0x64])) "cmodules/fbgc_stl.c":76:7 67 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":76:7 69 {*movqi_internal}
     (nil))
(call_insn 31 30 32 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f626c7e3d00 cprintf>) [0 cprintf S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":76:7 677 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f626c7e3d00 cprintf>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(debug_insn 32 31 37 4 (debug_marker) "cmodules/fbgc_stl.c":77:2 -1
     (nil))
(insn 37 32 38 4 (set (reg/i:DI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":78:1 66 {*movdi_internal}
     (nil))
(insn 38 37 0 4 (use (reg/i:DI 0 ax)) "cmodules/fbgc_stl.c":78:1 -1
     (nil))
;;  succ:       EXIT [always]  count:650902295 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function fbgc_int (fbgc_int, funcdef_no=60, decl_uid=5701, cgraph_uid=61, symbol_order=67)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
ending the processing of deferred insns


fbgc_int

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,4u} r1={5d,1u} r2={4d} r4={5d,2u} r5={7d,4u} r6={1d,4u} r7={1d,7u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,3u} r17={4d,1u} r18={3d} r19={1d,4u} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r83={1d,2u} r85={1d,2u} r86={1d,2u} r88={1d,1u} r89={1d,1u} r90={1d,1u} 
;;    total ref usage 273{234d,39u,0e} in 30{27 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(19){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 85 86 88 89
;; live  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  gen 	 17 [flags] 85 86 88 89
;; live  kill	
(note 6 1 43 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 43 6 2 2 (set (reg:DI 88)
        (reg:DI 5 di [ arg ])) "cmodules/fbgc_stl.c":80:35 -1
     (expr_list:REG_DEAD (reg:DI 5 di [ arg ])
        (nil)))
(insn 2 43 44 2 (set (reg/v/f:DI 85 [ arg ])
        (reg:DI 88)) "cmodules/fbgc_stl.c":80:35 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 88)
        (nil)))
(insn 44 2 3 2 (set (reg:SI 89)
        (reg:SI 4 si [ argc ])) "cmodules/fbgc_stl.c":80:35 -1
     (expr_list:REG_DEAD (reg:SI 4 si [ argc ])
        (nil)))
(insn 3 44 4 2 (set (reg/v:SI 86 [ argc ])
        (reg:SI 89)) "cmodules/fbgc_stl.c":80:35 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 89)
        (nil)))
(note 4 3 8 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 8 4 9 2 (debug_marker) "cmodules/fbgc_stl.c":81:2 -1
     (nil))
(insn 9 8 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 86 [ argc ])
            (const_int 1 [0x1]))) "cmodules/fbgc_stl.c":81:4 11 {*cmpsi_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "cmodules/fbgc_stl.c":81:4 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 650902300 (nil)))
 -> 27)
;;  succ:       3 [39.4% (guessed)]  count:422839528 (estimated locally) (FALLTHRU)
;;              4 [60.6% (guessed)]  count:650902296 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 86
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 86

;; basic block 3, loop depth 0, count 422839530 (estimated locally), maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [39.4% (guessed)]  count:422839528 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(6){ }u9(7){ }u10(16){ }u11(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 83 90
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; live  gen 	 0 [ax] 5 [di] 83 90
;; live  kill	
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 12 11 13 3 (var_location:SI D#7 (const_int 1 [0x1])) -1
     (nil))
(debug_insn 13 12 14 3 (var_location:DI arg (reg/v/f:DI 85 [ arg ])) -1
     (nil))
(debug_insn 14 13 15 3 (debug_marker:BLK) "cmodules/fbgc_stl.c":80:1 -1
     (nil))
(debug_insn 15 14 16 3 (var_location:SI D#8 (debug_expr:SI D#7)) -1
     (nil))
(debug_insn 16 15 17 3 (var_location:SI argc (debug_expr:SI D#8)) -1
     (nil))
(debug_insn 17 16 18 3 (debug_marker) "cmodules/fbgc_stl.c":82:3 -1
     (nil))
(insn 18 17 19 3 (set (reg:DI 5 di)
        (mem/f:DI (reg/v/f:DI 85 [ arg ]) [1 *arg_6(D)+0 S8 A64])) "cmodules/fbgc_stl.c":82:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 85 [ arg ])
        (nil)))
(call_insn 19 18 45 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f626c7e8600 convert_fbgc_object_to_int>) [0 convert_fbgc_object_to_int S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":82:11 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f626c7e8600 convert_fbgc_object_to_int>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 45 19 20 3 (set (reg:SI 90)
        (reg:SI 0 ax)) "cmodules/fbgc_stl.c":82:11 -1
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 20 45 21 3 (set (reg/v:SI 83 [ d ])
        (reg:SI 90)) "cmodules/fbgc_stl.c":82:11 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 90)
        (nil)))
(debug_insn 21 20 22 3 (var_location:SI d (reg/v:SI 83 [ d ])) "cmodules/fbgc_stl.c":82:11 -1
     (nil))
(debug_insn 22 21 23 3 (debug_marker) "cmodules/fbgc_stl.c":83:3 -1
     (nil))
(insn 23 22 24 3 (set (reg:SI 5 di)
        (reg/v:SI 83 [ d ])) "cmodules/fbgc_stl.c":83:10 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 83 [ d ])
        (nil)))
(call_insn/j 24 23 25 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_int_object") [flags 0x41]  <function_decl 0x7f626c7fa500 new_fbgc_int_object>) [0 new_fbgc_int_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":83:10 681 {*sibcall_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_int_object") [flags 0x41]  <function_decl 0x7f626c7fa500 new_fbgc_int_object>)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:       EXIT [always]  count:422839530 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 25 24 27)
;; basic block 4, loop depth 0, count 650902295 (estimated locally), maybe hot
;;  prev block 3, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [60.6% (guessed)]  count:650902296 (estimated locally)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u21(6){ }u22(7){ }u23(16){ }u24(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
(code_label 27 25 28 4 58 (nil) [1 uses])
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 29 28 30 4 (debug_marker) "cmodules/fbgc_stl.c":85:7 -1
     (nil))
(insn 30 29 31 4 (set (reg:SI 1 dx)
        (reg/v:SI 86 [ argc ])) "cmodules/fbgc_stl.c":85:7 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 86 [ argc ])
        (nil)))
(insn 31 30 32 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f626c494cf0 *.LC6>)) "cmodules/fbgc_stl.c":85:7 66 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:SI 5 di)
        (const_int 100 [0x64])) "cmodules/fbgc_stl.c":85:7 67 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":85:7 69 {*movqi_internal}
     (nil))
(call_insn 34 33 35 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f626c7e3d00 cprintf>) [0 cprintf S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":85:7 677 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f626c7e3d00 cprintf>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(debug_insn 35 34 40 4 (debug_marker) "cmodules/fbgc_stl.c":86:2 -1
     (nil))
(insn 40 35 41 4 (set (reg/i:DI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":87:1 66 {*movdi_internal}
     (nil))
(insn 41 40 0 4 (use (reg/i:DI 0 ax)) "cmodules/fbgc_stl.c":87:1 -1
     (nil))
;;  succ:       EXIT [always]  count:650902295 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function fbgc_double (fbgc_double, funcdef_no=61, decl_uid=5709, cgraph_uid=62, symbol_order=69)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
ending the processing of deferred insns


fbgc_double

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 7 [sp] 17 [flags] 20 [xmm0]
;;  ref usage 	r0={6d,3u} r1={5d,1u} r2={4d} r4={5d,2u} r5={6d,3u} r6={1d,4u} r7={1d,7u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,3u} r17={4d,1u} r18={3d} r19={1d,4u} r20={5d,2u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r83={1d,2u} r85={1d,2u} r86={1d,2u} r88={1d,1u} r89={1d,1u} r90={1d,1u} 
;;    total ref usage 273{234d,39u,0e} in 30{27 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(19){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 85 86 88 89
;; live  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  gen 	 17 [flags] 85 86 88 89
;; live  kill	
(note 6 1 43 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 43 6 2 2 (set (reg:DI 88)
        (reg:DI 5 di [ arg ])) "cmodules/fbgc_stl.c":89:41 -1
     (expr_list:REG_DEAD (reg:DI 5 di [ arg ])
        (nil)))
(insn 2 43 44 2 (set (reg/v/f:DI 85 [ arg ])
        (reg:DI 88)) "cmodules/fbgc_stl.c":89:41 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 88)
        (nil)))
(insn 44 2 3 2 (set (reg:SI 89)
        (reg:SI 4 si [ argc ])) "cmodules/fbgc_stl.c":89:41 -1
     (expr_list:REG_DEAD (reg:SI 4 si [ argc ])
        (nil)))
(insn 3 44 4 2 (set (reg/v:SI 86 [ argc ])
        (reg:SI 89)) "cmodules/fbgc_stl.c":89:41 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 89)
        (nil)))
(note 4 3 8 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 8 4 9 2 (debug_marker) "cmodules/fbgc_stl.c":90:2 -1
     (nil))
(insn 9 8 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 86 [ argc ])
            (const_int 1 [0x1]))) "cmodules/fbgc_stl.c":90:4 11 {*cmpsi_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "cmodules/fbgc_stl.c":90:4 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 650902300 (nil)))
 -> 27)
;;  succ:       3 [39.4% (guessed)]  count:422839528 (estimated locally) (FALLTHRU)
;;              4 [60.6% (guessed)]  count:650902296 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 86
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 86

;; basic block 3, loop depth 0, count 422839530 (estimated locally), maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [39.4% (guessed)]  count:422839528 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(6){ }u9(7){ }u10(16){ }u11(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 83 90
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; live  gen 	 0 [ax] 5 [di] 20 [xmm0] 83 90
;; live  kill	
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 12 11 13 3 (var_location:SI D#9 (const_int 1 [0x1])) -1
     (nil))
(debug_insn 13 12 14 3 (var_location:DI arg (reg/v/f:DI 85 [ arg ])) -1
     (nil))
(debug_insn 14 13 15 3 (debug_marker:BLK) "cmodules/fbgc_stl.c":89:1 -1
     (nil))
(debug_insn 15 14 16 3 (var_location:SI D#10 (debug_expr:SI D#9)) -1
     (nil))
(debug_insn 16 15 17 3 (var_location:SI argc (debug_expr:SI D#10)) -1
     (nil))
(debug_insn 17 16 18 3 (debug_marker) "cmodules/fbgc_stl.c":91:3 -1
     (nil))
(insn 18 17 19 3 (set (reg:DI 5 di)
        (mem/f:DI (reg/v/f:DI 85 [ arg ]) [1 *arg_6(D)+0 S8 A64])) "cmodules/fbgc_stl.c":91:14 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 85 [ arg ])
        (nil)))
(call_insn 19 18 45 3 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_double") [flags 0x41]  <function_decl 0x7f626c7e8700 convert_fbgc_object_to_double>) [0 convert_fbgc_object_to_double S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":91:14 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_double") [flags 0x41]  <function_decl 0x7f626c7e8700 convert_fbgc_object_to_double>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 45 19 20 3 (set (reg:DF 90)
        (reg:DF 20 xmm0)) "cmodules/fbgc_stl.c":91:14 -1
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 20 45 21 3 (set (reg/v:DF 83 [ d ])
        (reg:DF 90)) "cmodules/fbgc_stl.c":91:14 111 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 90)
        (nil)))
(debug_insn 21 20 22 3 (var_location:DF d (reg/v:DF 83 [ d ])) "cmodules/fbgc_stl.c":91:14 -1
     (nil))
(debug_insn 22 21 23 3 (debug_marker) "cmodules/fbgc_stl.c":92:3 -1
     (nil))
(insn 23 22 24 3 (set (reg:DF 20 xmm0)
        (reg/v:DF 83 [ d ])) "cmodules/fbgc_stl.c":92:10 111 {*movdf_internal}
     (expr_list:REG_DEAD (reg/v:DF 83 [ d ])
        (nil)))
(call_insn/j 24 23 25 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_double_object") [flags 0x41]  <function_decl 0x7f626c7f3d00 new_fbgc_double_object>) [0 new_fbgc_double_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":92:10 681 {*sibcall_value}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_double_object") [flags 0x41]  <function_decl 0x7f626c7f3d00 new_fbgc_double_object>)
            (nil)))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
;;  succ:       EXIT [always]  count:422839530 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 25 24 27)
;; basic block 4, loop depth 0, count 650902295 (estimated locally), maybe hot
;;  prev block 3, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [60.6% (guessed)]  count:650902296 (estimated locally)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u21(6){ }u22(7){ }u23(16){ }u24(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
(code_label 27 25 28 4 62 (nil) [1 uses])
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 29 28 30 4 (debug_marker) "cmodules/fbgc_stl.c":94:7 -1
     (nil))
(insn 30 29 31 4 (set (reg:SI 1 dx)
        (reg/v:SI 86 [ argc ])) "cmodules/fbgc_stl.c":94:7 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 86 [ argc ])
        (nil)))
(insn 31 30 32 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f626c494cf0 *.LC6>)) "cmodules/fbgc_stl.c":94:7 66 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:SI 5 di)
        (const_int 100 [0x64])) "cmodules/fbgc_stl.c":94:7 67 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":94:7 69 {*movqi_internal}
     (nil))
(call_insn 34 33 35 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f626c7e3d00 cprintf>) [0 cprintf S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":94:7 677 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f626c7e3d00 cprintf>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(debug_insn 35 34 40 4 (debug_marker) "cmodules/fbgc_stl.c":95:2 -1
     (nil))
(insn 40 35 41 4 (set (reg/i:DI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":96:1 66 {*movdi_internal}
     (nil))
(insn 41 40 0 4 (use (reg/i:DI 0 ax)) "cmodules/fbgc_stl.c":96:1 -1
     (nil))
;;  succ:       EXIT [always]  count:650902295 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function fbgc_matrix (fbgc_matrix, funcdef_no=63, decl_uid=5713, cgraph_uid=64, symbol_order=73)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
ending the processing of deferred insns


fbgc_matrix

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;;  ref usage 	r0={8d,6u} r1={8d,2u} r2={7d,1u} r4={8d,3u} r5={11d,6u} r6={1d,4u} r7={1d,9u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r16={1d,3u} r17={6d,1u} r18={5d} r19={1d,4u} r20={6d} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={6d} r37={6d} r38={5d} r39={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r83={1d,2u} r86={1d,2u} r93={1d,4u} r94={1d,2u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} 
;;    total ref usage 436{379d,57u,0e} in 45{40 regular + 5 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(19){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 93 94 99 100
;; live  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  gen 	 17 [flags] 93 94 99 100
;; live  kill	
(note 6 1 57 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 57 6 2 2 (set (reg:DI 99)
        (reg:DI 5 di [ arg ])) "cmodules/fbgc_stl.c":143:41 -1
     (expr_list:REG_DEAD (reg:DI 5 di [ arg ])
        (nil)))
(insn 2 57 58 2 (set (reg/v/f:DI 93 [ arg ])
        (reg:DI 99)) "cmodules/fbgc_stl.c":143:41 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 99)
        (nil)))
(insn 58 2 3 2 (set (reg:SI 100)
        (reg:SI 4 si [ argc ])) "cmodules/fbgc_stl.c":143:41 -1
     (expr_list:REG_DEAD (reg:SI 4 si [ argc ])
        (nil)))
(insn 3 58 4 2 (set (reg/v:SI 94 [ argc ])
        (reg:SI 100)) "cmodules/fbgc_stl.c":143:41 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 100)
        (nil)))
(note 4 3 8 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 8 4 9 2 (debug_marker) "cmodules/fbgc_stl.c":145:2 -1
     (nil))
(insn 9 8 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 94 [ argc ])
            (const_int 3 [0x3]))) "cmodules/fbgc_stl.c":145:4 11 {*cmpsi_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 41)
            (pc))) "cmodules/fbgc_stl.c":145:4 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 650902300 (nil)))
 -> 41)
;;  succ:       3 [39.4% (guessed)]  count:422839528 (estimated locally) (FALLTHRU)
;;              4 [60.6% (guessed)]  count:650902296 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 93 94
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 93 94

;; basic block 3, loop depth 0, count 422839530 (estimated locally), maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [39.4% (guessed)]  count:422839528 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(6){ }u9(7){ }u10(16){ }u11(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 93
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 83 86 95 96 97 101 102 103
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 93
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 83 86 95 96 97 101 102 103
;; live  kill	
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 12 11 13 3 (var_location:SI D#11 (const_int 3 [0x3])) -1
     (nil))
(debug_insn 13 12 14 3 (var_location:DI arg (reg/v/f:DI 93 [ arg ])) -1
     (nil))
(debug_insn 14 13 15 3 (debug_marker:BLK) "cmodules/fbgc_stl.c":143:1 -1
     (nil))
(debug_insn 15 14 16 3 (var_location:SI D#12 (debug_expr:SI D#11)) -1
     (nil))
(debug_insn 16 15 17 3 (var_location:SI argc (debug_expr:SI D#12)) -1
     (nil))
(debug_insn 17 16 18 3 (debug_marker) "cmodules/fbgc_stl.c":146:3 -1
     (nil))
(insn 18 17 19 3 (set (reg:DI 5 di)
        (mem/f:DI (reg/v/f:DI 93 [ arg ]) [1 *arg_8(D)+0 S8 A64])) "cmodules/fbgc_stl.c":146:14 66 {*movdi_internal}
     (nil))
(call_insn 19 18 59 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f626c7e8600 convert_fbgc_object_to_int>) [0 convert_fbgc_object_to_int S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":146:14 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f626c7e8600 convert_fbgc_object_to_int>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 59 19 20 3 (set (reg:SI 101)
        (reg:SI 0 ax)) "cmodules/fbgc_stl.c":146:14 -1
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 20 59 21 3 (set (reg:SI 83 [ _10 ])
        (reg:SI 101)) "cmodules/fbgc_stl.c":146:14 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 101)
        (nil)))
(debug_insn 21 20 22 3 (var_location:SI r (reg:SI 83 [ _10 ])) "cmodules/fbgc_stl.c":146:10 -1
     (nil))
(debug_insn 22 21 23 3 (debug_marker) "cmodules/fbgc_stl.c":147:3 -1
     (nil))
(insn 23 22 24 3 (set (reg/f:DI 95 [ MEM[(struct fbgc_object * *)arg_8(D) + 8B] ])
        (mem/f:DI (plus:DI (reg/v/f:DI 93 [ arg ])
                (const_int 8 [0x8])) [1 MEM[(struct fbgc_object * *)arg_8(D) + 8B]+0 S8 A64])) "cmodules/fbgc_stl.c":147:14 66 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 5 di)
        (reg/f:DI 95 [ MEM[(struct fbgc_object * *)arg_8(D) + 8B] ])) "cmodules/fbgc_stl.c":147:14 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95 [ MEM[(struct fbgc_object * *)arg_8(D) + 8B] ])
        (nil)))
(call_insn 25 24 60 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f626c7e8600 convert_fbgc_object_to_int>) [0 convert_fbgc_object_to_int S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":147:14 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f626c7e8600 convert_fbgc_object_to_int>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 60 25 26 3 (set (reg:SI 102)
        (reg:SI 0 ax)) "cmodules/fbgc_stl.c":147:14 -1
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 26 60 27 3 (set (reg:SI 86 [ _13 ])
        (reg:SI 102)) "cmodules/fbgc_stl.c":147:14 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 102)
        (nil)))
(debug_insn 27 26 28 3 (var_location:SI c (reg:SI 86 [ _13 ])) "cmodules/fbgc_stl.c":147:10 -1
     (nil))
(debug_insn 28 27 29 3 (debug_marker) "cmodules/fbgc_stl.c":148:3 -1
     (nil))
(insn 29 28 30 3 (set (reg/f:DI 96 [ MEM[(struct fbgc_object * *)arg_8(D) + 16B] ])
        (mem/f:DI (plus:DI (reg/v/f:DI 93 [ arg ])
                (const_int 16 [0x10])) [1 MEM[(struct fbgc_object * *)arg_8(D) + 16B]+0 S8 A64])) "cmodules/fbgc_stl.c":148:44 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 93 [ arg ])
        (nil)))
(insn 30 29 31 3 (set (reg:DI 5 di)
        (reg/f:DI 96 [ MEM[(struct fbgc_object * *)arg_8(D) + 16B] ])) "cmodules/fbgc_stl.c":148:44 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96 [ MEM[(struct fbgc_object * *)arg_8(D) + 16B] ])
        (nil)))
(call_insn 31 30 61 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f626c7e8600 convert_fbgc_object_to_int>) [0 convert_fbgc_object_to_int S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":148:44 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f626c7e8600 convert_fbgc_object_to_int>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 61 31 32 3 (set (reg:SI 103)
        (reg:SI 0 ax)) "cmodules/fbgc_stl.c":148:44 -1
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(note 32 61 33 3 NOTE_INSN_DELETED)
(insn 33 32 34 3 (set (reg:SI 97 [ _16 ])
        (sign_extend:SI (subreg:QI (reg:SI 103) 0))) "cmodules/fbgc_stl.c":148:10 134 {extendqisi2}
     (expr_list:REG_DEAD (reg:SI 103)
        (nil)))
(insn 34 33 35 3 (set (reg:SI 2 cx)
        (reg:SI 97 [ _16 ])) "cmodules/fbgc_stl.c":148:10 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 97 [ _16 ])
        (nil)))
(insn 35 34 36 3 (set (reg:SI 1 dx)
        (reg:SI 86 [ _13 ])) "cmodules/fbgc_stl.c":148:10 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 86 [ _13 ])
        (nil)))
(insn 36 35 37 3 (set (reg:SI 4 si)
        (reg:SI 83 [ _10 ])) "cmodules/fbgc_stl.c":148:10 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 83 [ _10 ])
        (nil)))
(insn 37 36 38 3 (set (reg:SI 5 di)
        (const_int 4 [0x4])) "cmodules/fbgc_stl.c":148:10 67 {*movsi_internal}
     (nil))
(call_insn/j 38 37 39 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_matrix_object") [flags 0x41]  <function_decl 0x7f626c80b100 new_fbgc_matrix_object>) [0 new_fbgc_matrix_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":148:10 681 {*sibcall_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_matrix_object") [flags 0x41]  <function_decl 0x7f626c80b100 new_fbgc_matrix_object>)
                        (nil))))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
;;  succ:       EXIT [always]  count:422839530 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 39 38 41)
;; basic block 4, loop depth 0, count 650902295 (estimated locally), maybe hot
;;  prev block 3, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [60.6% (guessed)]  count:650902296 (estimated locally)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u38(6){ }u39(7){ }u40(16){ }u41(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 94
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 94
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 94
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
(code_label 41 39 42 4 66 (nil) [1 uses])
(note 42 41 43 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 43 42 44 4 (debug_marker) "cmodules/fbgc_stl.c":150:7 -1
     (nil))
(insn 44 43 45 4 (set (reg:SI 1 dx)
        (reg/v:SI 94 [ argc ])) "cmodules/fbgc_stl.c":150:7 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 94 [ argc ])
        (nil)))
(insn 45 44 46 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f626c4a5e10 *.LC7>)) "cmodules/fbgc_stl.c":150:7 66 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:SI 5 di)
        (const_int 100 [0x64])) "cmodules/fbgc_stl.c":150:7 67 {*movsi_internal}
     (nil))
(insn 47 46 48 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":150:7 69 {*movqi_internal}
     (nil))
(call_insn 48 47 49 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f626c7e3d00 cprintf>) [0 cprintf S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":150:7 677 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f626c7e3d00 cprintf>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(debug_insn 49 48 54 4 (debug_marker) "cmodules/fbgc_stl.c":151:2 -1
     (nil))
(insn 54 49 55 4 (set (reg/i:DI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":152:1 66 {*movdi_internal}
     (nil))
(insn 55 54 0 4 (use (reg/i:DI 0 ax)) "cmodules/fbgc_stl.c":152:1 -1
     (nil))
;;  succ:       EXIT [always]  count:650902295 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function fbgc_mem (fbgc_mem, funcdef_no=64, decl_uid=5721, cgraph_uid=65, symbol_order=75)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
ending the processing of deferred insns


fbgc_mem

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,4u} r1={4d,1u} r2={3d} r4={4d,2u} r5={4d,1u} r6={1d,5u} r7={1d,7u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,4u} r17={3d,1u} r18={2d} r19={1d,5u} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={3d} r37={3d} r38={2d} r39={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r84={1d,3u} r86={1d,1u} 
;;    total ref usage 196{162d,34u,0e} in 25{23 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(19){ }}
;; lr  in  	 4 [si] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 86
;; live  in  	 4 [si] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  gen 	 17 [flags] 84 86
;; live  kill	
(note 5 1 41 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 41 5 3 2 (set (reg:SI 86)
        (reg:SI 4 si [ argc ])) "cmodules/fbgc_stl.c":155:35 -1
     (expr_list:REG_DEAD (reg:SI 4 si [ argc ])
        (nil)))
(insn 3 41 4 2 (set (reg/v:SI 84 [ argc ])
        (reg:SI 86)) "cmodules/fbgc_stl.c":155:35 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 86)
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 7 4 8 2 (debug_marker) "cmodules/fbgc_stl.c":156:2 -1
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 84 [ argc ])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":156:4 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 16)
            (pc))) "cmodules/fbgc_stl.c":156:4 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 536870916 (nil)))
 -> 16)
;;  succ:       3 [50.0% (guessed)]  count:536870912 (estimated locally) (FALLTHRU)
;;              4 [50.0% (guessed)]  count:536870912 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84

;; basic block 3, loop depth 0, count 536870913 (estimated locally), maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0% (guessed)]  count:536870912 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u7(6){ }u8(7){ }u9(16){ }u10(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 11 10 12 3 (debug_marker) "cmodules/fbgc_stl.c":157:3 -1
     (nil))
(insn 12 11 13 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":157:3 69 {*movqi_internal}
     (nil))
(call_insn 13 12 42 3 (call (mem:QI (symbol_ref:DI ("print_fbgc_memory_block") [flags 0x41]  <function_decl 0x7f626c7ed000 print_fbgc_memory_block>) [0 print_fbgc_memory_block S1 A8])
        (const_int 0 [0])) "cmodules/fbgc_stl.c":157:3 666 {*call}
     (expr_list:REG_DEAD (reg:QI 0 ax)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("print_fbgc_memory_block") [flags 0x41]  <function_decl 0x7f626c7ed000 print_fbgc_memory_block>)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (nil)))
(jump_insn 42 13 43 3 (set (pc)
        (label_ref 29)) -1
     (nil)
 -> 29)
;;  succ:       5 [always]  count:536870913 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 43 42 16)
;; basic block 4, loop depth 0, count 536870913 (estimated locally), maybe hot
;;  prev block 3, next block 5, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [50.0% (guessed)]  count:536870912 (estimated locally)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u13(6){ }u14(7){ }u15(16){ }u16(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
(code_label 16 43 17 4 70 (nil) [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 18 17 19 4 (var_location:DI D#13 (entry_value:DI (reg:DI 5 di [ arg ]))) -1
     (nil))
(debug_insn 19 18 20 4 (var_location:SI argc (reg/v:SI 84 [ argc ])) -1
     (nil))
(debug_insn 20 19 21 4 (debug_marker:BLK) "cmodules/fbgc_stl.c":155:1 -1
     (nil))
(debug_insn 21 20 22 4 (var_location:DI D#14 (debug_expr:DI D#13)) -1
     (nil))
(debug_insn 22 21 23 4 (var_location:DI arg (debug_expr:DI D#14)) -1
     (nil))
(debug_insn 23 22 24 4 (debug_marker) "cmodules/fbgc_stl.c":159:7 -1
     (nil))
(insn 24 23 25 4 (set (reg:SI 1 dx)
        (reg/v:SI 84 [ argc ])) "cmodules/fbgc_stl.c":159:7 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 84 [ argc ])
        (nil)))
(insn 25 24 26 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f626c4b86c0 *.LC8>)) "cmodules/fbgc_stl.c":159:7 66 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:SI 5 di)
        (const_int 100 [0x64])) "cmodules/fbgc_stl.c":159:7 67 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":159:7 69 {*movqi_internal}
     (nil))
(call_insn 28 27 29 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f626c7e3d00 cprintf>) [0 cprintf S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_stl.c":159:7 677 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f626c7e3d00 cprintf>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
;;  succ:       5 [always]  count:536870913 (estimated locally) (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 4, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       4 [always]  count:536870913 (estimated locally) (FALLTHRU)
;;              3 [always]  count:536870913 (estimated locally)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u24(6){ }u25(7){ }u26(16){ }u27(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 29 28 30 5 71 (nil) [1 uses])
(note 30 29 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(debug_insn 31 30 32 5 (var_location:SI argc (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 32 31 33 5 (var_location:DI arg (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 33 32 38 5 (debug_marker) "cmodules/fbgc_stl.c":160:2 -1
     (nil))
(insn 38 33 39 5 (set (reg/i:DI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_stl.c":161:1 66 {*movdi_internal}
     (nil))
(insn 39 38 0 5 (use (reg/i:DI 0 ax)) "cmodules/fbgc_stl.c":161:1 -1
     (nil))
;;  succ:       EXIT [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

