
;; Function c_exp (c_exp, funcdef_no=56, decl_uid=5748, cgraph_uid=57, symbol_order=58)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 12:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 18:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=616,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=613,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=14,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=17,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=18,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=19,overall=11,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=20,overall=607,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=21,overall=616,losers=2 -- refuse
	 Choosing alt 14 in insn 19:  (0) v  (1) m {*movdf_internal}
      Creating newreg=118 from oldreg=90, assigning class ALL_SSE_REGS to r118
   19: r118:DF=[frame:DI+0x8]
    Inserting insn reload after:
   66: r90:DF=r118:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=616,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=15,overall=2,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 66:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rBwBz {*call_value}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
	 Choosing alt 1 in insn 32:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=119 from oldreg=89, assigning class SSE_REGS to r119
   32: r119:DF=r119:DF*r87:DF
      REG_DEAD r89:DF
    Inserting insn reload before:
   67: r119:DF=r89:DF
    Inserting insn reload after:
   68: r102:DF=r119:DF

          alt=1,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 1 in insn 48:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=120 from oldreg=90, assigning class SSE_REGS to r120
      Making reload reg 120 for reg 90 optional
   48: xmm1:DF=r87:DF*r120:DF
      REG_DEAD r90:DF
      REG_DEAD r87:DF
    Inserting insn reload before:
   69: r120:DF=r90:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 69:  (0) v  (1) m {*movdf_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 2
   Insn 50: point = 0, n_alt = -1
   Insn 49: point = 0, n_alt = -1
   Insn 48: point = 0, n_alt = 1
   Insn 69: point = 1, n_alt = 14
   Insn 47: point = 3, n_alt = -2
   Insn 68: point = 4, n_alt = -2
	Hard reg 20 is preferable by r119 with profit 1000
   Insn 32: point = 6, n_alt = 1
   Insn 67: point = 7, n_alt = -2
	Hard reg 20 is preferable by r119 with profit 1000
	Hard reg 22 is preferable by r119 with profit 1000
   Insn 25: point = 9, n_alt = -2
   Insn 64: point = 11, n_alt = -2
   Insn 24: point = 12, n_alt = 0
   Insn 23: point = 12, n_alt = -2
   Insn 66: point = 13, n_alt = 15
   Insn 19: point = 15, n_alt = 14
   Insn 18: point = 16, n_alt = 14
   Insn 17: point = 17, n_alt = 0
   Insn 16: point = 17, n_alt = -2
   Insn 15: point = 18, n_alt = -2
   Insn 14: point = 19, n_alt = -2
   Insn 13: point = 20, n_alt = -2
   Insn 12: point = 21, n_alt = 3
   Insn 3: point = 22, n_alt = -2
   Insn 63: point = 24, n_alt = -2
   Insn 2: point = 25, n_alt = -2
   Insn 62: point = 27, n_alt = -2
 r87: [0..9]
 r89: [8..16]
 r90: [2..13]
 r97: [12..25]
 r98: [17..22]
 r99: [18..21]
 r100: [19..20]
 r102: [3..4]
 r115: [26..27]
 r116: [23..24]
 r117: [10..11]
 r118: [14..15]
 r119: [5..7]
 r120: [0..1]
Compressing live ranges: from 28 to 20 - 71%
Ranges after the compression:
 r87: [0..7]
 r89: [6..13]
 r90: [2..11]
 r97: [10..17]
 r98: [14..15]
 r99: [14..15]
 r100: [14..15]
 r102: [2..3]
 r115: [18..19]
 r116: [16..17]
 r117: [8..9]
 r118: [12..13]
 r119: [4..5]
 r120: [0..1]

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=121 from oldreg=90, assigning class ALL_SSE_REGS to inheritance r121
    Original reg change 90->121 (bb2):
   66: r121:DF=r118:DF
      REG_DEAD r118:DF
    Add original<-inheritance after:
   70: r90:DF=r121:DF

    Inheritance reuse change 90->121 (bb2):
   30: debug res$imag => r121:DF*r87:DF
    Inheritance reuse change 90->121 (bb2):
   69: r120:DF=r121:DF
      REG_DEAD r121:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=122, assigning class NO_REGS to save r122
    Split reuse change 89->122:
   28: debug res$real => r122:DF*r87:DF
   67: r119:DF=r89:DF
      REG_DEAD r89:DF
    Add reg<-save before:
   72: r89:DF=r122:DF

   18: r89:DF=[frame:DI]
    Add save<-reg after:
   71: r122:DF=r89:DF

	  ))))))))))))))))))))))))))))))))))))))))))))))))
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=123, assigning class NO_REGS to save r123
   23: xmm0:DF=r97:DF
      REG_DEAD r97:DF
    Add reg<-save before:
   74: r97:DF=r123:DF

    2: r97:DF=r115:DF
      REG_DEAD r115:DF
    Add save<-reg after:
   73: r123:DF=r97:DF

	  ))))))))))))))))))))))))))))))))))))))))))))))))
	    Removing dead insn:
    70: r90:DF=r121:DF
deleting insn with uid = 70.

********** Pseudo live ranges #2: **********

  BB 2
   Insn 50: point = 0, n_alt = -1
   Insn 49: point = 0, n_alt = -1
   Insn 48: point = 0, n_alt = 1
   Insn 69: point = 1, n_alt = 14
	   Creating copy r120<-r121@1000
   Insn 47: point = 3, n_alt = -2
   Insn 68: point = 4, n_alt = -2
	Hard reg 20 is preferable by r119 with profit 1000
   Insn 32: point = 6, n_alt = 1
   Insn 67: point = 7, n_alt = -2
	Hard reg 20 is preferable by r119 with profit 1000
	Hard reg 22 is preferable by r119 with profit 1000
   Insn 72: point = 9, n_alt = -1
	Hard reg 22 is preferable by r122 with profit 1000
   Insn 25: point = 11, n_alt = -2
   Insn 64: point = 13, n_alt = -2
   Insn 24: point = 14, n_alt = 0
   Insn 23: point = 14, n_alt = -2
   Insn 74: point = 15, n_alt = -1
	Hard reg 23 is preferable by r123 with profit 1000
   Insn 66: point = 17, n_alt = 15
	   Creating copy r118->r121@1000
   Insn 19: point = 19, n_alt = 14
   Insn 71: point = 20, n_alt = -1
	Hard reg 22 is preferable by r122 with profit 2000
   Insn 18: point = 22, n_alt = 14
   Insn 17: point = 23, n_alt = 0
   Insn 16: point = 23, n_alt = -2
   Insn 15: point = 24, n_alt = -2
   Insn 14: point = 25, n_alt = -2
   Insn 13: point = 26, n_alt = -2
   Insn 12: point = 27, n_alt = 3
   Insn 3: point = 28, n_alt = -2
   Insn 63: point = 30, n_alt = -2
   Insn 73: point = 31, n_alt = -1
	Hard reg 23 is preferable by r123 with profit 2000
   Insn 2: point = 33, n_alt = -2
   Insn 62: point = 35, n_alt = -2
 r87: [0..11]
 r89: [21..22] [8..9]
 r97: [32..33] [14..15]
 r98: [23..28]
 r99: [24..27]
 r100: [25..26]
 r102: [3..4]
 r115: [34..35]
 r116: [29..30]
 r117: [12..13]
 r118: [18..19]
 r119: [5..7]
 r120: [0..1]
 r121: [2..17]
 r122: [10..20]
 r123: [16..31]
Compressing live ranges: from 36 to 28 - 77%
Ranges after the compression:
 r87: [0..9]
 r89: [18..19] [6..7]
 r97: [24..25] [12..13]
 r98: [20..21]
 r99: [20..21]
 r100: [20..21]
 r102: [2..3]
 r115: [26..27]
 r116: [22..23]
 r117: [10..11]
 r118: [16..17]
 r119: [4..5]
 r120: [0..1]
 r121: [2..15]
 r122: [8..17]
 r123: [14..23]

********** Assignment #1: **********

	 Assigning to 119 (cl=SSE_REGS, orig=89, freq=3000, tfirst=119, tfreq=3000)...
	   Assign 22 to reload r119 (freq=3000)
	 Assigning to 121 (cl=ALL_SSE_REGS, orig=90, freq=2000, tfirst=118, tfreq=2000)...
	 Assigning to 118 (cl=ALL_SSE_REGS, orig=90, freq=2000, tfirst=118, tfreq=2000)...
	   Assign 24 to reload r118 (freq=2000)
	Hard reg 24 is preferable by r121 with profit 1000
	Hard reg 24 is preferable by r120 with profit 500
	 Assigning to 120 (cl=SSE_REGS, orig=90, freq=2000, tfirst=118, tfreq=2000)...
	   Assign 24 to optional reload r120 (freq=2000)
	Hard reg 24 is preferable by r121 with profit 2000
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
	     Keep split r122 (orig=r89)
	     Keep split r123 (orig=r97)
Split 2 out of 2 (100.00%)
   Insn after restoring regs:
   69: r120:DF=r90:DF
      REG_DEAD r90:DF
   Insn after restoring regs:
   30: debug res$imag => r90:DF*r87:DF
   Insn after restoring regs:
   66: r90:DF=r118:DF
      REG_DEAD r118:DF
Remove optional reload reg 120
  Restoring original insn:
   48: xmm1:DF=r87:DF*r90:DF
      REG_DEAD r90:DF
      REG_DEAD r87:DF
  Deleting move 69
   69: r120:DF=r90:DF
      REG_DEAD r90:DF
deleting insn with uid = 69.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 48:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=124 from oldreg=90, assigning class SSE_REGS to r124
      Making reload reg 124 for reg 90 optional
   48: xmm1:DF=r87:DF*r124:DF
      REG_DEAD r90:DF
      REG_DEAD r87:DF
    Inserting insn reload before:
   75: r124:DF=r90:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 75:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=619,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=15,overall=1,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 73:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 74:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=619,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=15,overall=1,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 71:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 72:  (0) v  (1) m {*movdf_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #3: **********

  BB 2
   Insn 50: point = 0, n_alt = -1
   Insn 49: point = 0, n_alt = -1
   Insn 48: point = 0, n_alt = 1
   Insn 75: point = 1, n_alt = 14
   Insn 47: point = 3, n_alt = -2
   Insn 68: point = 4, n_alt = -2
	Hard reg 20 is preferable by r119 with profit 1000
   Insn 32: point = 6, n_alt = 1
   Insn 67: point = 7, n_alt = -2
	Hard reg 20 is preferable by r119 with profit 1000
	Hard reg 22 is preferable by r119 with profit 1000
   Insn 72: point = 9, n_alt = 14
	Hard reg 22 is preferable by r122 with profit 1000
   Insn 25: point = 11, n_alt = -2
   Insn 64: point = 13, n_alt = -2
   Insn 24: point = 14, n_alt = 0
   Insn 23: point = 14, n_alt = -2
   Insn 74: point = 15, n_alt = 14
	Hard reg 23 is preferable by r123 with profit 1000
   Insn 66: point = 17, n_alt = 15
   Insn 19: point = 19, n_alt = 14
   Insn 71: point = 20, n_alt = 15
	Hard reg 22 is preferable by r122 with profit 2000
   Insn 18: point = 22, n_alt = 14
   Insn 17: point = 23, n_alt = 0
   Insn 16: point = 23, n_alt = -2
   Insn 15: point = 24, n_alt = -2
   Insn 14: point = 25, n_alt = -2
   Insn 13: point = 26, n_alt = -2
   Insn 12: point = 27, n_alt = 3
   Insn 3: point = 28, n_alt = -2
   Insn 63: point = 30, n_alt = -2
   Insn 73: point = 31, n_alt = 15
	Hard reg 23 is preferable by r123 with profit 2000
   Insn 2: point = 33, n_alt = -2
   Insn 62: point = 35, n_alt = -2
 r87: [0..11]
 r89: [21..22] [8..9]
 r90: [2..17]
 r97: [32..33] [14..15]
 r98: [23..28]
 r99: [24..27]
 r100: [25..26]
 r102: [3..4]
 r115: [34..35]
 r116: [29..30]
 r117: [12..13]
 r118: [18..19]
 r119: [5..7]
 r122: [10..20]
 r123: [16..31]
 r124: [0..1]
Compressing live ranges: from 36 to 28 - 77%
Ranges after the compression:
 r87: [0..9]
 r89: [18..19] [6..7]
 r90: [2..15]
 r97: [24..25] [12..13]
 r98: [20..21]
 r99: [20..21]
 r100: [20..21]
 r102: [2..3]
 r115: [26..27]
 r116: [22..23]
 r117: [10..11]
 r118: [16..17]
 r119: [4..5]
 r122: [8..17]
 r123: [14..23]
 r124: [0..1]

********** Inheritance #2: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=125 from oldreg=90, assigning class ALL_SSE_REGS to inheritance r125
    Original reg change 90->125 (bb2):
   66: r125:DF=r118:DF
      REG_DEAD r118:DF
    Add original<-inheritance after:
   76: r90:DF=r125:DF

    Inheritance reuse change 90->125 (bb2):
   30: debug res$imag => r125:DF*r87:DF
    Inheritance reuse change 90->125 (bb2):
   75: r124:DF=r125:DF
      REG_DEAD r125:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
    76: r90:DF=r125:DF
deleting insn with uid = 76.

********** Pseudo live ranges #4: **********

  BB 2
   Insn 50: point = 0, n_alt = -1
   Insn 49: point = 0, n_alt = -1
   Insn 48: point = 0, n_alt = 1
   Insn 75: point = 1, n_alt = 14
	   Creating copy r124<-r125@1000
   Insn 47: point = 3, n_alt = -2
   Insn 68: point = 4, n_alt = -2
	Hard reg 20 is preferable by r119 with profit 1000
   Insn 32: point = 6, n_alt = 1
   Insn 67: point = 7, n_alt = -2
	Hard reg 20 is preferable by r119 with profit 1000
	Hard reg 22 is preferable by r119 with profit 1000
   Insn 72: point = 9, n_alt = 14
	Hard reg 22 is preferable by r122 with profit 1000
   Insn 25: point = 11, n_alt = -2
   Insn 64: point = 13, n_alt = -2
   Insn 24: point = 14, n_alt = 0
   Insn 23: point = 14, n_alt = -2
   Insn 74: point = 15, n_alt = 14
	Hard reg 23 is preferable by r123 with profit 1000
   Insn 66: point = 17, n_alt = 15
	   Creating copy r118->r125@1000
   Insn 19: point = 19, n_alt = 14
   Insn 71: point = 20, n_alt = 15
	Hard reg 22 is preferable by r122 with profit 2000
   Insn 18: point = 22, n_alt = 14
   Insn 17: point = 23, n_alt = 0
   Insn 16: point = 23, n_alt = -2
   Insn 15: point = 24, n_alt = -2
   Insn 14: point = 25, n_alt = -2
   Insn 13: point = 26, n_alt = -2
   Insn 12: point = 27, n_alt = 3
   Insn 3: point = 28, n_alt = -2
   Insn 63: point = 30, n_alt = -2
   Insn 73: point = 31, n_alt = 15
	Hard reg 23 is preferable by r123 with profit 2000
   Insn 2: point = 33, n_alt = -2
   Insn 62: point = 35, n_alt = -2
 r87: [0..11]
 r89: [21..22] [8..9]
 r97: [32..33] [14..15]
 r98: [23..28]
 r99: [24..27]
 r100: [25..26]
 r102: [3..4]
 r115: [34..35]
 r116: [29..30]
 r117: [12..13]
 r118: [18..19]
 r119: [5..7]
 r122: [10..20]
 r123: [16..31]
 r124: [0..1]
 r125: [2..17]
Compressing live ranges: from 36 to 28 - 77%
Ranges after the compression:
 r87: [0..9]
 r89: [18..19] [6..7]
 r97: [24..25] [12..13]
 r98: [20..21]
 r99: [20..21]
 r100: [20..21]
 r102: [2..3]
 r115: [26..27]
 r116: [22..23]
 r117: [10..11]
 r118: [16..17]
 r119: [4..5]
 r122: [8..17]
 r123: [14..23]
 r124: [0..1]
 r125: [2..15]

********** Assignment #2: **********

	 Assigning to 125 (cl=ALL_SSE_REGS, orig=90, freq=2000, tfirst=124, tfreq=2000)...
	 Assigning to 124 (cl=SSE_REGS, orig=90, freq=2000, tfirst=124, tfreq=2000)...
	   Assign 25 to optional reload r124 (freq=2000)
	Hard reg 25 is preferable by r125 with profit 1000
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
   75: r124:DF=r90:DF
      REG_DEAD r90:DF
   Insn after restoring regs:
   30: debug res$imag => r90:DF*r87:DF
   Insn after restoring regs:
   66: r90:DF=r118:DF
      REG_DEAD r118:DF
Keep optional reload reg 120
Remove optional reload reg 124
  Restoring original insn:
   48: xmm1:DF=r87:DF*r90:DF
      REG_DEAD r90:DF
      REG_DEAD r87:DF
  Deleting move 75
   75: r124:DF=r90:DF
      REG_DEAD r90:DF
deleting insn with uid = 75.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 48:  (0) x  (1) 0  (2) xm {*fop_df_comm}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #5: **********

  BB 2
   Insn 50: point = 0, n_alt = -1
   Insn 49: point = 0, n_alt = -1
   Insn 48: point = 0, n_alt = 1
   Insn 47: point = 1, n_alt = -2
   Insn 68: point = 2, n_alt = -2
   Insn 32: point = 4, n_alt = 1
   Insn 67: point = 5, n_alt = -2
   Insn 72: point = 7, n_alt = 14
   Insn 25: point = 9, n_alt = -2
   Insn 64: point = 11, n_alt = -2
   Insn 24: point = 12, n_alt = 0
   Insn 23: point = 12, n_alt = -2
   Insn 74: point = 13, n_alt = 14
   Insn 66: point = 15, n_alt = 15
   Insn 19: point = 17, n_alt = 14
   Insn 71: point = 18, n_alt = 15
   Insn 18: point = 20, n_alt = 14
   Insn 17: point = 21, n_alt = 0
   Insn 16: point = 21, n_alt = -2
   Insn 15: point = 22, n_alt = -2
   Insn 14: point = 23, n_alt = -2
   Insn 13: point = 24, n_alt = -2
   Insn 12: point = 25, n_alt = 3
   Insn 3: point = 26, n_alt = -2
   Insn 63: point = 28, n_alt = -2
   Insn 73: point = 29, n_alt = 15
   Insn 2: point = 31, n_alt = -2
   Insn 62: point = 33, n_alt = -2
 r90: [0..15]
 r122: [8..18]
 r123: [14..29]
Compressing live ranges: from 34 to 2 - 5%
Ranges after the compression:
 r90: [0..1]
 r122: [0..1]
 r123: [0..1]

******** Rematerialization #1: ********

df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)

Cands:

BB 2:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1]
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1]
  changed regs: 4 [si] 5 [di] 20 [xmm0] 21 [xmm1] 87 89 90 97 98 99 100 102 115 116 117 118 119 122 123
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 87 89 90 97 98 99 100 102 115 116 117 118 119 122 123
subreg regs:
  Slot 0 regnos (width = 0):	 90
  Slot 1 regnos (width = 0):	 122
  Slot 2 regnos (width = 0):	 123
Changing spilled pseudos to memory in insn #73
Changing spilled pseudos to memory in insn #71
Changing spilled pseudos to memory in insn #66
Changing spilled pseudos to memory in insn #74
Changing spilled pseudos to memory in insn #28
Changing spilled pseudos to memory in insn #30
Changing spilled pseudos to memory in insn #72
Changing spilled pseudos to memory in insn #48
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=32)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=48, prev_offset=16)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)

********** Local #4: **********

	   Spilling non-eliminable hard regs: 7
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 19:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 18:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) Ts {*leadi}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 12:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 48:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 72:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 74:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 66:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 71:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 73:  (0) m  (1) v {*movdf_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=64)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=48, prev_offset=48)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 25
changing reg in insn 32
changing reg in insn 30
changing reg in insn 28
changing reg in insn 26
changing reg in insn 18
changing reg in insn 2
changing reg in insn 23
changing reg in insn 3
changing reg in insn 16
changing reg in insn 12
changing reg in insn 15
changing reg in insn 13
changing reg in insn 14
changing reg in insn 47
changing reg in insn 62
changing reg in insn 2
changing reg in insn 63
changing reg in insn 3
changing reg in insn 64
changing reg in insn 25
deleting insn with uid = 62.
deleting insn with uid = 63.
deleting insn with uid = 14.
deleting insn with uid = 15.
deleting insn with uid = 16.
deleting insn with uid = 64.
deleting insn with uid = 67.
deleting insn with uid = 47.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 24.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)


c_exp

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 7 [sp] 20 [xmm0] 21 [xmm1]
;;  regs ever live 	 4 [si] 5 [di] 7 [sp] 17 [flags] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5]
;;  ref usage 	r0={3d} r1={3d} r2={3d} r4={4d,1u} r5={4d,1u} r7={1d,16u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={3d} r18={2d} r19={2e} r20={6d,7u} r21={5d,8u} r22={6d,3u} r23={5d,2u} r24={4d,1u} r25={3d} r26={3d} r27={3d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={3d} r37={3d} r38={2d} r39={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 205{164d,39u,2e} in 36{34 regular + 2 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 20 [xmm0] 21 [xmm1]
;; lr  use 	 7 [sp] 20 [xmm0] 21 [xmm1]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 7 [sp] 20 [xmm0] 21 [xmm1]
;; live  gen 	 4 [si] 5 [di] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4]
;; live  kill	 17 [flags]
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 73 2 (set (reg:DF 23 xmm3 [orig:97 z ] [97])
        (reg:DF 20 xmm0 [115])) "cmodules/fbgc_math.c":22:47 111 {*movdf_internal}
     (nil))
(insn 73 2 3 2 (set (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [10 %sfp+-24 S8 A64])
        (reg:DF 23 xmm3 [orig:97 z ] [97])) "cmodules/fbgc_math.c":22:47 111 {*movdf_internal}
     (nil))
(insn 3 73 61 2 (set (reg:DF 20 xmm0 [orig:98 z+8 ] [98])
        (reg:DF 21 xmm1 [116])) "cmodules/fbgc_math.c":22:47 111 {*movdf_internal}
     (nil))
(debug_insn 61 3 60 2 (var_location:DI D#24 (reg:DI 20 xmm0 [orig:98 z+8 ] [98])) -1
     (nil))
(debug_insn 60 61 8 2 (var_location:DI D#23 (debug_expr:DI D#24)) -1
     (nil))
(note 8 60 11 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 11 8 12 2 (var_location:DF D#22 (subreg:DF (debug_expr:DI D#23) 0)) -1
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg/f:DI 5 di [99])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
        ]) 191 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 19 frame)
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))
(insn 13 12 17 2 (set (reg/f:DI 4 si [100])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 32 [0x20]))) 187 {*leadi}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 19 frame)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))
(call_insn 17 13 18 2 (call (mem:QI (symbol_ref:DI ("sincos") [flags 0x41]  <function_decl 0x7f213e4ba400 __builtin_sincos>) [0 __builtin_sincos S1 A8])
        (const_int 0 [0])) 666 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("sincos") [flags 0x41]  <function_decl 0x7f213e4ba400 __builtin_sincos>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 18 17 71 2 (set (reg:DF 22 xmm2 [orig:89 sincostmp_12 ] [89])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [2  S8 A64])) 111 {*movdf_internal}
     (nil))
(insn 71 18 19 2 (set (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [10 %sfp+-32 S8 A64])
        (reg:DF 22 xmm2 [orig:89 sincostmp_12 ] [89])) 111 {*movdf_internal}
     (nil))
(insn 19 71 66 2 (set (reg:DF 24 xmm4 [orig:90 sincostmp_12+8 ] [90])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [2  S8 A64])) 111 {*movdf_internal}
     (nil))
(insn 66 19 76 2 (set (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-40 S8 A64])
        (reg:DF 24 xmm4 [orig:90 sincostmp_12+8 ] [90])) 111 {*movdf_internal}
     (nil))
(note 76 66 70 2 NOTE_INSN_DELETED)
(note 70 76 20 2 NOTE_INSN_DELETED)
(debug_insn 20 70 21 2 (var_location:DF z$imag (debug_expr:DF D#22)) -1
     (nil))
(debug_insn 21 20 22 2 (debug_marker) "cmodules/fbgc_math.c":24:2 -1
     (nil))
(debug_insn 22 21 74 2 (debug_marker) "cmodules/fbgc_math.c":25:2 -1
     (nil))
(insn 74 22 23 2 (set (reg:DF 23 xmm3 [orig:97 z ] [97])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [10 %sfp+-24 S8 A64])) "cmodules/fbgc_math.c":25:13 111 {*movdf_internal}
     (nil))
(insn 23 74 24 2 (set (reg:DF 20 xmm0)
        (reg:DF 23 xmm3 [orig:97 z ] [97])) "cmodules/fbgc_math.c":25:13 111 {*movdf_internal}
     (nil))
(call_insn 24 23 25 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":25:13 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 25 24 26 2 (set (reg/v:DF 21 xmm1 [orig:87 r ] [87])
        (reg:DF 20 xmm0 [117])) "cmodules/fbgc_math.c":25:13 111 {*movdf_internal}
     (nil))
(debug_insn 26 25 27 2 (var_location:DF r (reg/v:DF 21 xmm1 [orig:87 r ] [87])) "cmodules/fbgc_math.c":25:13 -1
     (nil))
(debug_insn 27 26 28 2 (debug_marker) "cmodules/fbgc_math.c":26:2 -1
     (nil))
(debug_insn 28 27 29 2 (var_location:DF res$real (mult:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [10 %sfp+-32 S8 A64])
        (reg/v:DF 21 xmm1 [orig:87 r ] [87]))) "cmodules/fbgc_math.c":26:11 -1
     (nil))
(debug_insn 29 28 30 2 (debug_marker) "cmodules/fbgc_math.c":27:2 -1
     (nil))
(debug_insn 30 29 31 2 (var_location:DF res$imag (mult:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-40 S8 A64])
        (reg/v:DF 21 xmm1 [orig:87 r ] [87]))) "cmodules/fbgc_math.c":27:11 -1
     (nil))
(debug_insn 31 30 72 2 (debug_marker) "cmodules/fbgc_math.c":28:2 -1
     (nil))
(insn 72 31 32 2 (set (reg:DF 22 xmm2 [orig:89 sincostmp_12 ] [89])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [10 %sfp+-32 S8 A64])) "cmodules/fbgc_math.c":26:14 111 {*movdf_internal}
     (nil))
(insn 32 72 68 2 (set (reg:DF 22 xmm2 [orig:89 sincostmp_12 ] [89])
        (mult:DF (reg:DF 22 xmm2 [orig:89 sincostmp_12 ] [89])
            (reg/v:DF 21 xmm1 [orig:87 r ] [87]))) "cmodules/fbgc_math.c":26:14 818 {*fop_df_comm}
     (nil))
(insn 68 32 33 2 (set (reg:DF 20 xmm0 [102])
        (reg:DF 22 xmm2 [orig:89 sincostmp_12 ] [89])) "cmodules/fbgc_math.c":26:14 111 {*movdf_internal}
     (nil))
(note 33 68 36 2 NOTE_INSN_DELETED)
(debug_insn 36 33 37 2 (var_location:DF D#1 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 37 36 38 2 (var_location:DF res$real (debug_expr:DF D#1)) -1
     (nil))
(debug_insn 38 37 39 2 (var_location:DF D#2 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 39 38 69 2 (var_location:DF res$imag (debug_expr:DF D#2)) -1
     (nil))
(note 69 39 75 2 NOTE_INSN_DELETED)
(note 75 69 48 2 NOTE_INSN_DELETED)
(insn 48 75 49 2 (set (reg:DF 21 xmm1)
        (mult:DF (reg/v:DF 21 xmm1 [orig:87 r ] [87])
            (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])) [10 %sfp+-40 S8 A64]))) "cmodules/fbgc_math.c":29:1 818 {*fop_df_comm}
     (nil))
(insn 49 48 50 2 (use (reg:DF 20 xmm0)) "cmodules/fbgc_math.c":29:1 -1
     (nil))
(insn 50 49 65 2 (use (reg:DF 21 xmm1)) "cmodules/fbgc_math.c":29:1 -1
     (nil))
;;  succ:       EXIT [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; lr  out 	 7 [sp] 20 [xmm0] 21 [xmm1]
;; live  out 	 7 [sp] 20 [xmm0] 21 [xmm1]

(note 65 50 0 NOTE_INSN_DELETED)

;; Function fbgc_math_initializer (fbgc_math_initializer, funcdef_no=64, decl_uid=5685, cgraph_uid=65, symbol_order=72)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=616,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=625,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=630,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 9:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=616,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=625,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=630,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 18:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 2
   Insn 31: point = 0, n_alt = -1
   Insn 30: point = 0, n_alt = 2
   Insn 24: point = 0, n_alt = 0
   Insn 23: point = 0, n_alt = 3
   Insn 22: point = 1, n_alt = 4
   Insn 21: point = 1, n_alt = -2
   Insn 20: point = 2, n_alt = -2
   Insn 35: point = 4, n_alt = -2
   Insn 19: point = 5, n_alt = 0
   Insn 18: point = 5, n_alt = 14
   Insn 15: point = 5, n_alt = 0
   Insn 14: point = 5, n_alt = 3
   Insn 13: point = 5, n_alt = 4
   Insn 12: point = 5, n_alt = -2
   Insn 11: point = 6, n_alt = -2
   Insn 34: point = 8, n_alt = -2
   Insn 10: point = 9, n_alt = 0
   Insn 9: point = 9, n_alt = 14
   Insn 2: point = 9, n_alt = -2
   Insn 33: point = 11, n_alt = -2
 r82: [5..6]
 r84: [1..2]
 r87: [0..9]
 r92: [10..11]
 r93: [7..8]
 r94: [3..4]
Compressing live ranges: from 12 to 10 - 83%
Ranges after the compression:
 r82: [4..5]
 r84: [0..1]
 r87: [0..7]
 r92: [8..9]
 r93: [6..7]
 r94: [2..3]

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #2: **********

  BB 2
   Insn 31: point = 0, n_alt = -1
   Insn 30: point = 0, n_alt = 2
   Insn 24: point = 0, n_alt = 0
   Insn 23: point = 0, n_alt = 3
   Insn 22: point = 1, n_alt = 4
   Insn 21: point = 1, n_alt = -2
   Insn 20: point = 2, n_alt = -2
   Insn 35: point = 4, n_alt = -2
   Insn 19: point = 5, n_alt = 0
   Insn 18: point = 5, n_alt = 14
   Insn 15: point = 5, n_alt = 0
   Insn 14: point = 5, n_alt = 3
   Insn 13: point = 5, n_alt = 4
   Insn 12: point = 5, n_alt = -2
   Insn 11: point = 6, n_alt = -2
   Insn 34: point = 8, n_alt = -2
   Insn 10: point = 9, n_alt = 0
   Insn 9: point = 9, n_alt = 14
   Insn 2: point = 9, n_alt = -2
   Insn 33: point = 11, n_alt = -2
 r82: [5..6]
 r84: [1..2]
 r87: [0..9]
 r92: [10..11]
 r93: [7..8]
 r94: [3..4]
Compressing live ranges: from 12 to 10 - 83%
Ranges after the compression:
 r82: [4..5]
 r84: [0..1]
 r87: [0..7]
 r92: [8..9]
 r93: [6..7]
 r94: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 20
changing reg in insn 21
changing reg in insn 2
changing reg in insn 23
changing reg in insn 14
changing reg in insn 33
changing reg in insn 2
changing reg in insn 34
changing reg in insn 11
changing reg in insn 35
changing reg in insn 20
deleting insn with uid = 33.
deleting insn with uid = 34.
deleting insn with uid = 12.
deleting insn with uid = 35.
deleting insn with uid = 21.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 24.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)


fbgc_math_initializer

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp] 20 [xmm0]
;;  ref usage 	r0={6d,4u} r1={7d,2u} r2={5d} r3={1d,2u} r4={7d,2u} r5={7d,3u} r7={1d,6u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={4d} r18={4d} r20={7d,2u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={5d} r37={5d} r38={4d} r39={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} 
;;    total ref usage 315{294d,21u,0e} in 18{14 regular + 4 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 20 [xmm0]
;; live  kill	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 4 2 (set (reg/v/f:DI 3 bx [orig:87 arg ] [87])
        (reg:DI 5 di [92])) "cmodules/fbgc_math.c":137:1 66 {*movdi_internal}
     (nil))
(note 4 2 7 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 7 4 9 2 (debug_marker) "cmodules/fbgc_math.c":139:2 -1
     (nil))
(insn 9 7 10 2 (set (reg:DF 20 xmm0)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) "cmodules/fbgc_math.c":139:2 111 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 3.141592653589793115997963468544185161590576171875e+0 [0x0.c90fdaa22168cp+2])
        (nil)))
(call_insn 10 9 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_double_object") [flags 0x41]  <function_decl 0x7f213e3e6d00 new_fbgc_double_object>) [0 new_fbgc_double_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":139:2 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_double_object") [flags 0x41]  <function_decl 0x7f213e3e6d00 new_fbgc_double_object>)
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 11 10 13 2 (set (reg/f:DI 1 dx [orig:82 _1 ] [82])
        (reg:DI 0 ax [93])) "cmodules/fbgc_math.c":139:2 66 {*movdi_internal}
     (nil))
(insn 13 11 14 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f213e0382d0 *.LC1>)) "cmodules/fbgc_math.c":139:2 66 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (mem/f:DI (reg/v/f:DI 3 bx [orig:87 arg ] [87]) [3 *arg_7(D)+0 S8 A64])) "cmodules/fbgc_math.c":139:2 66 {*movdi_internal}
     (nil))
(call_insn 15 14 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("add_variable_in_field_object") [flags 0x41]  <function_decl 0x7f213e412700 add_variable_in_field_object>) [0 add_variable_in_field_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":139:2 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("add_variable_in_field_object") [flags 0x41]  <function_decl 0x7f213e412700 add_variable_in_field_object>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(debug_insn 16 15 18 2 (debug_marker) "cmodules/fbgc_math.c":140:2 -1
     (nil))
(insn 18 16 19 2 (set (reg:DF 20 xmm0)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S8 A64])) "cmodules/fbgc_math.c":140:2 111 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 2.718281828459045090795598298427648842334747314453125e+0 [0x0.adf85458a2bb48p+2])
        (nil)))
(call_insn 19 18 20 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_double_object") [flags 0x41]  <function_decl 0x7f213e3e6d00 new_fbgc_double_object>) [0 new_fbgc_double_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":140:2 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_double_object") [flags 0x41]  <function_decl 0x7f213e3e6d00 new_fbgc_double_object>)
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 20 19 22 2 (set (reg/f:DI 1 dx [orig:84 _3 ] [84])
        (reg:DI 0 ax [94])) "cmodules/fbgc_math.c":140:2 66 {*movdi_internal}
     (nil))
(insn 22 20 23 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f213e038360 *.LC3>)) "cmodules/fbgc_math.c":140:2 66 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DI 5 di)
        (mem/f:DI (reg/v/f:DI 3 bx [orig:87 arg ] [87]) [3 *arg_7(D)+0 S8 A64])) "cmodules/fbgc_math.c":140:2 66 {*movdi_internal}
     (nil))
(call_insn 24 23 25 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("add_variable_in_field_object") [flags 0x41]  <function_decl 0x7f213e412700 add_variable_in_field_object>) [0 add_variable_in_field_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":140:2 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("add_variable_in_field_object") [flags 0x41]  <function_decl 0x7f213e412700 add_variable_in_field_object>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(debug_insn 25 24 30 2 (debug_marker) "cmodules/fbgc_math.c":142:2 -1
     (nil))
(insn 30 25 31 2 (set (reg/i:DI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_math.c":143:1 66 {*movdi_internal}
     (nil))
(insn 31 30 36 2 (use (reg/i:DI 0 ax)) "cmodules/fbgc_math.c":143:1 -1
     (nil))
;;  succ:       EXIT [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 36 31 0 NOTE_INSN_DELETED)

;; Function fbgc_random (fbgc_random, funcdef_no=66, decl_uid=5737, cgraph_uid=67, symbol_order=76)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-24, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 29:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=2,overall=8,losers=1,rld_nregs=2
	 Choosing alt 2 in insn 30:  (0) x  (1) 0  (2) xm {*fop_df_1}
      Creating newreg=114 from oldreg=99, assigning class SSE_REGS to r114
   30: r114:DF=r114:DF/r110:DF
      REG_DEAD r110:DF
      REG_DEAD r99:DF
    Inserting insn reload before:
  102: r114:DF=r99:DF
    Inserting insn reload after:
  103: r95:DF=r114:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=616,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=15,overall=2,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 103:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=616,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=613,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=14,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=17,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=18,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=19,overall=11,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=20,overall=607,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=21,overall=616,losers=2 -- refuse
	 Choosing alt 14 in insn 5:  (0) v  (1) m {*movdf_internal}
      Creating newreg=115 from oldreg=91, assigning class ALL_SSE_REGS to r115
    5: r115:DF=[`*.LC4']
      REG_EQUAL 0.0
    Inserting insn reload after:
  104: r91:DF=r115:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=616,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=15,overall=2,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 104:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=619,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=15,overall=1,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 42:  (0) m  (1) v {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (1) rBwBz {*call_value}
            2 Non pseudo reload: reject++
          alt=2,overall=1,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) x  (1) 0  (2) xm {*fop_df_1}
      Creating newreg=116 from oldreg=91, assigning class SSE_REGS to r116
      Making reload reg 116 for reg 91 optional
   50: r101:DF=r112:DF-r116:DF
      REG_DEAD r112:DF
    Inserting insn reload before:
  105: r116:DF=r91:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 105:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 51:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=2,overall=8,losers=1,rld_nregs=2
	 Choosing alt 2 in insn 52:  (0) x  (1) 0  (2) xm {*fop_df_1}
      Creating newreg=117 from oldreg=102, assigning class SSE_REGS to r117
   52: r117:DF=r117:DF/r101:DF
      REG_DEAD r102:DF
      REG_DEAD r101:DF
    Inserting insn reload before:
  106: r117:DF=r102:DF
    Inserting insn reload after:
  107: r95:DF=r117:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=616,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=15,overall=2,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 107:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=616,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=613,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=14,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=17,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=18,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=19,overall=11,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=20,overall=607,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=21,overall=616,losers=2 -- refuse
	 Choosing alt 14 in insn 6:  (0) v  (1) m {*movdf_internal}
      Creating newreg=118 from oldreg=95, assigning class ALL_SSE_REGS to r118
    6: r118:DF=[`*.LC5']
      REG_EQUAL 2.147483647e+9
    Inserting insn reload after:
  108: r95:DF=r118:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=616,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=15,overall=2,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 108:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=616,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=613,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=14,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=17,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=18,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=19,overall=11,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=20,overall=607,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=21,overall=616,losers=2 -- refuse
	 Choosing alt 14 in insn 7:  (0) v  (1) m {*movdf_internal}
      Creating newreg=119 from oldreg=91, assigning class ALL_SSE_REGS to r119
    7: r119:DF=[`*.LC4']
      REG_EQUAL 0.0
    Inserting insn reload after:
  109: r91:DF=r119:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=616,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=15,overall=2,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 109:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (1) rBwBz {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) v  (1) r {*floatsidf2}
            2 Non pseudo reload: reject++
          alt=2,overall=1,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 74:  (0) x  (1) 0  (2) xm {*fop_df_1}
      Creating newreg=120 from oldreg=95, assigning class SSE_REGS to r120
      Making reload reg 120 for reg 95 optional
   74: r104:DF=r103:DF/r120:DF
      REG_DEAD r103:DF
      REG_DEAD r95:DF
    Inserting insn reload before:
  110: r120:DF=r95:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 110:  (0) v  (1) m {*movdf_internal}
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 75:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=121 from oldreg=91, assigning class SSE_REGS to r121
      Making reload reg 121 for reg 91 optional
   75: r105:DF=r104:DF+r121:DF
      REG_DEAD r104:DF
      REG_DEAD r91:DF
    Inserting insn reload before:
  111: r121:DF=r91:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 111:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (1) UBsBz {*sibcall_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 85:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 9
   Insn 86: point = 0, n_alt = -1
   Insn 85: point = 0, n_alt = 2
  BB 8
   Insn 77: point = 0, n_alt = 0
   Insn 76: point = 0, n_alt = -2
   Insn 75: point = 1, n_alt = 1
   Insn 111: point = 3, n_alt = 14
   Insn 74: point = 5, n_alt = 2
   Insn 110: point = 7, n_alt = 14
   Insn 73: point = 9, n_alt = 1
   Insn 96: point = 11, n_alt = -2
   Insn 71: point = 12, n_alt = 0
  BB 5
   Insn 99: point = 13, n_alt = -1
   Insn 107: point = 13, n_alt = 15
   Insn 52: point = 15, n_alt = 2
   Insn 106: point = 17, n_alt = -2
	Hard reg 21 is preferable by r117 with profit 161
   Insn 51: point = 19, n_alt = 14
   Insn 50: point = 20, n_alt = 2
   Insn 105: point = 22, n_alt = 14
   Insn 95: point = 23, n_alt = -2
   Insn 47: point = 24, n_alt = 0
   Insn 46: point = 24, n_alt = -2
   Insn 45: point = 25, n_alt = 3
   Insn 42: point = 27, n_alt = 15
   Insn 94: point = 29, n_alt = -2
   Insn 41: point = 30, n_alt = 0
   Insn 40: point = 30, n_alt = 3
  BB 3
   Insn 97: point = 31, n_alt = -1
   Insn 104: point = 31, n_alt = 15
   Insn 5: point = 33, n_alt = 14
   Insn 103: point = 34, n_alt = 15
   Insn 30: point = 36, n_alt = 2
   Insn 102: point = 38, n_alt = -2
	Hard reg 21 is preferable by r114 with profit 202
   Insn 29: point = 40, n_alt = 14
   Insn 93: point = 41, n_alt = -2
   Insn 26: point = 42, n_alt = 0
   Insn 25: point = 42, n_alt = 3
  BB 7
   Insn 109: point = 44, n_alt = 15
   Insn 7: point = 46, n_alt = 14
   Insn 108: point = 47, n_alt = 15
   Insn 6: point = 49, n_alt = 14
  BB 6
   Insn 61: point = 50, n_alt = -1
  BB 4
   Insn 37: point = 50, n_alt = -1
   Insn 36: point = 50, n_alt = 0
  BB 2
   Insn 22: point = 52, n_alt = -1
   Insn 21: point = 52, n_alt = 0
   Insn 15: point = 52, n_alt = 0
   Insn 14: point = 52, n_alt = 0
   Insn 13: point = 53, n_alt = -2
   Insn 92: point = 55, n_alt = -2
   Insn 12: point = 56, n_alt = 0
   Insn 3: point = 56, n_alt = -2
   Insn 91: point = 58, n_alt = -2
   Insn 2: point = 59, n_alt = -2
   Insn 90: point = 61, n_alt = -2
 r82: [52..53]
 r91: [44..44] [31..31] [4..27]
 r95: [44..47] [31..34] [8..13]
 r97: [50..59] [42..43] [26..30]
 r98: [50..56]
 r99: [39..40]
 r100: [24..25]
 r101: [16..20]
 r102: [18..19]
 r103: [6..9]
 r104: [2..5]
 r105: [0..1]
 r107: [60..61]
 r108: [57..58]
 r109: [54..55]
 r110: [37..41]
 r111: [28..29]
 r112: [21..23]
 r113: [10..11]
 r114: [35..38]
 r115: [32..33]
 r116: [21..22]
 r117: [14..17]
 r118: [48..49]
 r119: [45..46]
 r120: [6..7]
 r121: [2..3]
Compressing live ranges: from 62 to 46 - 74%
Ranges after the compression:
 r82: [38..39]
 r91: [33..33] [24..24] [4..21]
 r95: [33..35] [24..26] [8..11]
 r97: [38..43] [31..32] [20..23]
 r98: [38..41]
 r99: [29..30]
 r100: [18..19]
 r101: [12..15]
 r102: [14..15]
 r103: [6..9]
 r104: [2..5]
 r105: [0..1]
 r107: [44..45]
 r108: [42..43]
 r109: [40..41]
 r110: [27..30]
 r111: [22..23]
 r112: [16..17]
 r113: [10..11]
 r114: [27..28]
 r115: [25..26]
 r116: [16..17]
 r117: [12..13]
 r118: [36..37]
 r119: [34..35]
 r120: [6..7]
 r121: [2..3]

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=122 from oldreg=91, assigning class SSE_REGS to inheritance r122
    Original reg change 91->122 (bb5):
   42: r122:DF=r111:DF
      REG_DEAD r111:DF
    Add original<-inheritance after:
  112: r91:DF=r122:DF

    Inheritance reuse change 91->122 (bb5):
   43: debug min => r122:DF
    Inheritance reuse change 91->122 (bb5):
  105: r116:DF=r122:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 6 7
EBB 8
EBB 9

********** Pseudo live ranges #2: **********

  BB 9
   Insn 86: point = 0, n_alt = -1
   Insn 85: point = 0, n_alt = 2
  BB 8
   Insn 77: point = 0, n_alt = 0
   Insn 76: point = 0, n_alt = -2
   Insn 75: point = 1, n_alt = 1
   Insn 111: point = 3, n_alt = 14
   Insn 74: point = 5, n_alt = 2
   Insn 110: point = 7, n_alt = 14
   Insn 73: point = 9, n_alt = 1
   Insn 96: point = 11, n_alt = -2
   Insn 71: point = 12, n_alt = 0
  BB 5
   Insn 99: point = 13, n_alt = -1
   Insn 107: point = 13, n_alt = 15
   Insn 52: point = 15, n_alt = 2
   Insn 106: point = 17, n_alt = -2
	Hard reg 21 is preferable by r117 with profit 161
   Insn 51: point = 19, n_alt = 14
   Insn 50: point = 20, n_alt = 2
   Insn 105: point = 22, n_alt = 14
	   Creating copy r116<-r122@161
   Insn 95: point = 24, n_alt = -2
   Insn 47: point = 25, n_alt = 0
   Insn 46: point = 25, n_alt = -2
   Insn 45: point = 26, n_alt = 3
   Insn 112: point = 28, n_alt = -1
   Insn 42: point = 29, n_alt = 15
	Hard reg 20 is preferable by r122 with profit 161
   Insn 94: point = 31, n_alt = -2
   Insn 41: point = 32, n_alt = 0
   Insn 40: point = 32, n_alt = 3
  BB 3
   Insn 97: point = 33, n_alt = -1
   Insn 104: point = 33, n_alt = 15
   Insn 5: point = 35, n_alt = 14
   Insn 103: point = 36, n_alt = 15
   Insn 30: point = 38, n_alt = 2
   Insn 102: point = 40, n_alt = -2
	Hard reg 21 is preferable by r114 with profit 202
   Insn 29: point = 42, n_alt = 14
   Insn 93: point = 43, n_alt = -2
   Insn 26: point = 44, n_alt = 0
   Insn 25: point = 44, n_alt = 3
  BB 7
   Insn 109: point = 46, n_alt = 15
   Insn 7: point = 48, n_alt = 14
   Insn 108: point = 49, n_alt = 15
   Insn 6: point = 51, n_alt = 14
  BB 6
   Insn 61: point = 52, n_alt = -1
  BB 4
   Insn 37: point = 52, n_alt = -1
   Insn 36: point = 52, n_alt = 0
  BB 2
   Insn 22: point = 54, n_alt = -1
   Insn 21: point = 54, n_alt = 0
   Insn 15: point = 54, n_alt = 0
   Insn 14: point = 54, n_alt = 0
   Insn 13: point = 55, n_alt = -2
   Insn 92: point = 57, n_alt = -2
   Insn 12: point = 58, n_alt = 0
   Insn 3: point = 58, n_alt = -2
   Insn 91: point = 60, n_alt = -2
   Insn 2: point = 61, n_alt = -2
   Insn 90: point = 63, n_alt = -2
 r82: [54..55]
 r91: [46..46] [33..33] [4..28]
 r95: [46..49] [33..36] [8..13]
 r97: [52..61] [44..45] [27..32]
 r98: [52..58]
 r99: [41..42]
 r100: [25..26]
 r101: [16..20]
 r102: [18..19]
 r103: [6..9]
 r104: [2..5]
 r105: [0..1]
 r107: [62..63]
 r108: [59..60]
 r109: [56..57]
 r110: [39..43]
 r111: [30..31]
 r112: [21..24]
 r113: [10..11]
 r114: [37..40]
 r115: [34..35]
 r116: [21..22]
 r117: [14..17]
 r118: [50..51]
 r119: [47..48]
 r120: [6..7]
 r121: [2..3]
 r122: [23..29]
Compressing live ranges: from 64 to 48 - 75%
Ranges after the compression:
 r82: [40..41]
 r91: [35..35] [26..26] [4..23]
 r95: [35..37] [26..28] [8..11]
 r97: [40..45] [33..34] [22..25]
 r98: [40..43]
 r99: [31..32]
 r100: [20..21]
 r101: [12..15]
 r102: [14..15]
 r103: [6..9]
 r104: [2..5]
 r105: [0..1]
 r107: [46..47]
 r108: [44..45]
 r109: [42..43]
 r110: [29..32]
 r111: [24..25]
 r112: [16..19]
 r113: [10..11]
 r114: [29..30]
 r115: [27..28]
 r116: [16..17]
 r117: [12..13]
 r118: [38..39]
 r119: [36..37]
 r120: [6..7]
 r121: [2..3]
 r122: [18..23]

********** Assignment #1: **********

	 Assigning to 120 (cl=SSE_REGS, orig=95, freq=1778, tfirst=120, tfreq=1778)...
	   Assign 22 to optional reload r120 (freq=1778)
	 Assigning to 121 (cl=SSE_REGS, orig=91, freq=1778, tfirst=121, tfreq=1778)...
	   Assign 23 to optional reload r121 (freq=1778)
	 Assigning to 118 (cl=ALL_SSE_REGS, orig=95, freq=1050, tfirst=118, tfreq=1050)...
	   Assign 24 to reload r118 (freq=1050)
	 Assigning to 119 (cl=ALL_SSE_REGS, orig=91, freq=1050, tfirst=119, tfreq=1050)...
	   Assign 25 to reload r119 (freq=1050)
	 Assigning to 114 (cl=SSE_REGS, orig=99, freq=606, tfirst=114, tfreq=606)...
	   Assign 21 to reload r114 (freq=606)
	 Assigning to 122 (cl=SSE_REGS, orig=91, freq=483, tfirst=116, tfreq=483)...
	 Assigning to 116 (cl=SSE_REGS, orig=91, freq=322, tfirst=116, tfreq=483)...
	   Assign 26 to optional reload r116 (freq=322)
	Hard reg 20 is preferable by r122 with profit 161
	Hard reg 26 is preferable by r122 with profit 161
	 Assigning to 117 (cl=SSE_REGS, orig=102, freq=483, tfirst=117, tfreq=483)...
	   Assign 21 to reload r117 (freq=483)
	 Assigning to 115 (cl=ALL_SSE_REGS, orig=91, freq=404, tfirst=115, tfreq=404)...
	   Assign 27 to reload r115 (freq=404)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
  105: r116:DF=r91:DF
      REG_DEAD r91:DF
   Insn after restoring regs:
   43: debug min => r91:DF
	   Removing inheritance:
  112: r91:DF=r122:DF
deleting insn with uid = 112.
   Insn after restoring regs:
   42: r91:DF=r111:DF
      REG_DEAD r111:DF
Remove optional reload reg 116
  Restoring original insn:
   50: r101:DF=r112:DF-r91:DF
      REG_DEAD r91:DF
      REG_DEAD r112:DF
  Deleting move 105
  105: r116:DF=r91:DF
      REG_DEAD r91:DF
deleting insn with uid = 105.
Remove optional reload reg 120
  Restoring original insn:
   74: r104:DF=r103:DF/r95:DF
      REG_DEAD r95:DF
      REG_DEAD r103:DF
  Deleting move 110
  110: r120:DF=r95:DF
      REG_DEAD r95:DF
deleting insn with uid = 110.
Remove optional reload reg 121
  Restoring original insn:
   75: r105:DF=r104:DF+r91:DF
      REG_DEAD r91:DF
      REG_DEAD r104:DF
  Deleting move 111
  111: r121:DF=r91:DF
      REG_DEAD r91:DF
deleting insn with uid = 111.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 75:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=123 from oldreg=91, assigning class SSE_REGS to r123
      Making reload reg 123 for reg 91 optional
   75: r105:DF=r104:DF+r123:DF
      REG_DEAD r91:DF
      REG_DEAD r104:DF
    Inserting insn reload before:
  113: r123:DF=r91:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 113:  (0) v  (1) m {*movdf_internal}
            2 Non pseudo reload: reject++
          alt=2,overall=1,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 74:  (0) x  (1) 0  (2) xm {*fop_df_1}
      Creating newreg=124 from oldreg=95, assigning class SSE_REGS to r124
      Making reload reg 124 for reg 95 optional
   74: r104:DF=r103:DF/r124:DF
      REG_DEAD r95:DF
      REG_DEAD r103:DF
    Inserting insn reload before:
  114: r124:DF=r95:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 114:  (0) v  (1) m {*movdf_internal}
            2 Non pseudo reload: reject++
          alt=2,overall=1,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) x  (1) 0  (2) xm {*fop_df_1}
      Creating newreg=125 from oldreg=91, assigning class SSE_REGS to r125
      Making reload reg 125 for reg 91 optional
   50: r101:DF=r112:DF-r125:DF
      REG_DEAD r91:DF
      REG_DEAD r112:DF
    Inserting insn reload before:
  115: r125:DF=r91:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 115:  (0) v  (1) m {*movdf_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #3: **********

  BB 9
   Insn 86: point = 0, n_alt = -1
   Insn 85: point = 0, n_alt = 2
  BB 8
   Insn 77: point = 0, n_alt = 0
   Insn 76: point = 0, n_alt = -2
   Insn 75: point = 1, n_alt = 1
   Insn 113: point = 3, n_alt = 14
   Insn 74: point = 5, n_alt = 2
   Insn 114: point = 7, n_alt = 14
   Insn 73: point = 9, n_alt = 1
   Insn 96: point = 11, n_alt = -2
   Insn 71: point = 12, n_alt = 0
  BB 5
   Insn 99: point = 13, n_alt = -1
   Insn 107: point = 13, n_alt = 15
   Insn 52: point = 15, n_alt = 2
   Insn 106: point = 17, n_alt = -2
	Hard reg 21 is preferable by r117 with profit 161
   Insn 51: point = 19, n_alt = 14
   Insn 50: point = 20, n_alt = 2
   Insn 115: point = 22, n_alt = 14
   Insn 95: point = 23, n_alt = -2
   Insn 47: point = 24, n_alt = 0
   Insn 46: point = 24, n_alt = -2
   Insn 45: point = 25, n_alt = 3
   Insn 42: point = 27, n_alt = 15
   Insn 94: point = 29, n_alt = -2
   Insn 41: point = 30, n_alt = 0
   Insn 40: point = 30, n_alt = 3
  BB 3
   Insn 97: point = 31, n_alt = -1
   Insn 104: point = 31, n_alt = 15
   Insn 5: point = 33, n_alt = 14
   Insn 103: point = 34, n_alt = 15
   Insn 30: point = 36, n_alt = 2
   Insn 102: point = 38, n_alt = -2
	Hard reg 21 is preferable by r114 with profit 202
   Insn 29: point = 40, n_alt = 14
   Insn 93: point = 41, n_alt = -2
   Insn 26: point = 42, n_alt = 0
   Insn 25: point = 42, n_alt = 3
  BB 7
   Insn 109: point = 44, n_alt = 15
   Insn 7: point = 46, n_alt = 14
   Insn 108: point = 47, n_alt = 15
   Insn 6: point = 49, n_alt = 14
  BB 6
   Insn 61: point = 50, n_alt = -1
  BB 4
   Insn 37: point = 50, n_alt = -1
   Insn 36: point = 50, n_alt = 0
  BB 2
   Insn 22: point = 52, n_alt = -1
   Insn 21: point = 52, n_alt = 0
   Insn 15: point = 52, n_alt = 0
   Insn 14: point = 52, n_alt = 0
   Insn 13: point = 53, n_alt = -2
   Insn 92: point = 55, n_alt = -2
   Insn 12: point = 56, n_alt = 0
   Insn 3: point = 56, n_alt = -2
   Insn 91: point = 58, n_alt = -2
   Insn 2: point = 59, n_alt = -2
   Insn 90: point = 61, n_alt = -2
 r82: [52..53]
 r91: [44..44] [31..31] [4..27]
 r95: [44..47] [31..34] [8..13]
 r97: [50..59] [42..43] [26..30]
 r98: [50..56]
 r99: [39..40]
 r100: [24..25]
 r101: [16..20]
 r102: [18..19]
 r103: [6..9]
 r104: [2..5]
 r105: [0..1]
 r107: [60..61]
 r108: [57..58]
 r109: [54..55]
 r110: [37..41]
 r111: [28..29]
 r112: [21..23]
 r113: [10..11]
 r114: [35..38]
 r115: [32..33]
 r117: [14..17]
 r118: [48..49]
 r119: [45..46]
 r123: [2..3]
 r124: [6..7]
 r125: [21..22]
Compressing live ranges: from 62 to 46 - 74%
Ranges after the compression:
 r82: [38..39]
 r91: [33..33] [24..24] [4..21]
 r95: [33..35] [24..26] [8..11]
 r97: [38..43] [31..32] [20..23]
 r98: [38..41]
 r99: [29..30]
 r100: [18..19]
 r101: [12..15]
 r102: [14..15]
 r103: [6..9]
 r104: [2..5]
 r105: [0..1]
 r107: [44..45]
 r108: [42..43]
 r109: [40..41]
 r110: [27..30]
 r111: [22..23]
 r112: [16..17]
 r113: [10..11]
 r114: [27..28]
 r115: [25..26]
 r117: [12..13]
 r118: [36..37]
 r119: [34..35]
 r123: [2..3]
 r124: [6..7]
 r125: [16..17]

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
EBB 5
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=126 from oldreg=91, assigning class SSE_REGS to inheritance r126
    Original reg change 91->126 (bb5):
   42: r126:DF=r111:DF
      REG_DEAD r111:DF
    Add original<-inheritance after:
  116: r91:DF=r126:DF

    Inheritance reuse change 91->126 (bb5):
   43: debug min => r126:DF
    Inheritance reuse change 91->126 (bb5):
  115: r125:DF=r126:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 6 7
EBB 8
EBB 9

********** Pseudo live ranges #4: **********

  BB 9
   Insn 86: point = 0, n_alt = -1
   Insn 85: point = 0, n_alt = 2
  BB 8
   Insn 77: point = 0, n_alt = 0
   Insn 76: point = 0, n_alt = -2
   Insn 75: point = 1, n_alt = 1
   Insn 113: point = 3, n_alt = 14
   Insn 74: point = 5, n_alt = 2
   Insn 114: point = 7, n_alt = 14
   Insn 73: point = 9, n_alt = 1
   Insn 96: point = 11, n_alt = -2
   Insn 71: point = 12, n_alt = 0
  BB 5
   Insn 99: point = 13, n_alt = -1
   Insn 107: point = 13, n_alt = 15
   Insn 52: point = 15, n_alt = 2
   Insn 106: point = 17, n_alt = -2
	Hard reg 21 is preferable by r117 with profit 161
   Insn 51: point = 19, n_alt = 14
   Insn 50: point = 20, n_alt = 2
   Insn 115: point = 22, n_alt = 14
	   Creating copy r125<-r126@161
   Insn 95: point = 24, n_alt = -2
   Insn 47: point = 25, n_alt = 0
   Insn 46: point = 25, n_alt = -2
   Insn 45: point = 26, n_alt = 3
   Insn 116: point = 28, n_alt = -1
   Insn 42: point = 29, n_alt = 15
	Hard reg 20 is preferable by r126 with profit 161
   Insn 94: point = 31, n_alt = -2
   Insn 41: point = 32, n_alt = 0
   Insn 40: point = 32, n_alt = 3
  BB 3
   Insn 97: point = 33, n_alt = -1
   Insn 104: point = 33, n_alt = 15
   Insn 5: point = 35, n_alt = 14
   Insn 103: point = 36, n_alt = 15
   Insn 30: point = 38, n_alt = 2
   Insn 102: point = 40, n_alt = -2
	Hard reg 21 is preferable by r114 with profit 202
   Insn 29: point = 42, n_alt = 14
   Insn 93: point = 43, n_alt = -2
   Insn 26: point = 44, n_alt = 0
   Insn 25: point = 44, n_alt = 3
  BB 7
   Insn 109: point = 46, n_alt = 15
   Insn 7: point = 48, n_alt = 14
   Insn 108: point = 49, n_alt = 15
   Insn 6: point = 51, n_alt = 14
  BB 6
   Insn 61: point = 52, n_alt = -1
  BB 4
   Insn 37: point = 52, n_alt = -1
   Insn 36: point = 52, n_alt = 0
  BB 2
   Insn 22: point = 54, n_alt = -1
   Insn 21: point = 54, n_alt = 0
   Insn 15: point = 54, n_alt = 0
   Insn 14: point = 54, n_alt = 0
   Insn 13: point = 55, n_alt = -2
   Insn 92: point = 57, n_alt = -2
   Insn 12: point = 58, n_alt = 0
   Insn 3: point = 58, n_alt = -2
   Insn 91: point = 60, n_alt = -2
   Insn 2: point = 61, n_alt = -2
   Insn 90: point = 63, n_alt = -2
 r82: [54..55]
 r91: [46..46] [33..33] [4..28]
 r95: [46..49] [33..36] [8..13]
 r97: [52..61] [44..45] [27..32]
 r98: [52..58]
 r99: [41..42]
 r100: [25..26]
 r101: [16..20]
 r102: [18..19]
 r103: [6..9]
 r104: [2..5]
 r105: [0..1]
 r107: [62..63]
 r108: [59..60]
 r109: [56..57]
 r110: [39..43]
 r111: [30..31]
 r112: [21..24]
 r113: [10..11]
 r114: [37..40]
 r115: [34..35]
 r117: [14..17]
 r118: [50..51]
 r119: [47..48]
 r123: [2..3]
 r124: [6..7]
 r125: [21..22]
 r126: [23..29]
Compressing live ranges: from 64 to 48 - 75%
Ranges after the compression:
 r82: [40..41]
 r91: [35..35] [26..26] [4..23]
 r95: [35..37] [26..28] [8..11]
 r97: [40..45] [33..34] [22..25]
 r98: [40..43]
 r99: [31..32]
 r100: [20..21]
 r101: [12..15]
 r102: [14..15]
 r103: [6..9]
 r104: [2..5]
 r105: [0..1]
 r107: [46..47]
 r108: [44..45]
 r109: [42..43]
 r110: [29..32]
 r111: [24..25]
 r112: [16..19]
 r113: [10..11]
 r114: [29..30]
 r115: [27..28]
 r117: [12..13]
 r118: [38..39]
 r119: [36..37]
 r123: [2..3]
 r124: [6..7]
 r125: [16..17]
 r126: [18..23]

********** Assignment #2: **********

	 Assigning to 123 (cl=SSE_REGS, orig=91, freq=1778, tfirst=123, tfreq=1778)...
	   Assign 22 to optional reload r123 (freq=1778)
	 Assigning to 124 (cl=SSE_REGS, orig=95, freq=1778, tfirst=124, tfreq=1778)...
	   Assign 23 to optional reload r124 (freq=1778)
	 Assigning to 126 (cl=SSE_REGS, orig=91, freq=483, tfirst=125, tfreq=483)...
	 Assigning to 125 (cl=SSE_REGS, orig=91, freq=322, tfirst=125, tfreq=483)...
	   Assign 26 to optional reload r125 (freq=322)
	Hard reg 20 is preferable by r126 with profit 161
	Hard reg 26 is preferable by r126 with profit 161
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
  115: r125:DF=r91:DF
      REG_DEAD r91:DF
   Insn after restoring regs:
   43: debug min => r91:DF
	   Removing inheritance:
  116: r91:DF=r126:DF
deleting insn with uid = 116.
   Insn after restoring regs:
   42: r91:DF=r111:DF
      REG_DEAD r111:DF
Keep optional reload reg 116
Keep optional reload reg 120
Keep optional reload reg 121
Remove optional reload reg 123
  Restoring original insn:
   75: r105:DF=r104:DF+r91:DF
      REG_DEAD r91:DF
      REG_DEAD r104:DF
  Deleting move 113
  113: r123:DF=r91:DF
      REG_DEAD r91:DF
deleting insn with uid = 113.
Remove optional reload reg 124
  Restoring original insn:
   74: r104:DF=r103:DF/r95:DF
      REG_DEAD r95:DF
      REG_DEAD r103:DF
  Deleting move 114
  114: r124:DF=r95:DF
      REG_DEAD r95:DF
deleting insn with uid = 114.
Remove optional reload reg 125
  Restoring original insn:
   50: r101:DF=r112:DF-r91:DF
      REG_DEAD r91:DF
      REG_DEAD r112:DF
  Deleting move 115
  115: r125:DF=r91:DF
      REG_DEAD r91:DF
deleting insn with uid = 115.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 75:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            2 Non pseudo reload: reject++
          alt=2,overall=1,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 74:  (0) x  (1) 0  (2) xm {*fop_df_1}
            2 Non pseudo reload: reject++
          alt=2,overall=1,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) x  (1) 0  (2) xm {*fop_df_1}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #5: **********

  BB 9
   Insn 86: point = 0, n_alt = -1
   Insn 85: point = 0, n_alt = 2
  BB 8
   Insn 77: point = 0, n_alt = 0
   Insn 76: point = 0, n_alt = -2
   Insn 75: point = 1, n_alt = 1
   Insn 74: point = 3, n_alt = 2
   Insn 73: point = 5, n_alt = 1
   Insn 96: point = 7, n_alt = -2
   Insn 71: point = 8, n_alt = 0
  BB 5
   Insn 99: point = 9, n_alt = -1
   Insn 107: point = 9, n_alt = 15
   Insn 52: point = 11, n_alt = 2
   Insn 106: point = 13, n_alt = -2
   Insn 51: point = 15, n_alt = 14
   Insn 50: point = 16, n_alt = 2
   Insn 95: point = 18, n_alt = -2
   Insn 47: point = 19, n_alt = 0
   Insn 46: point = 19, n_alt = -2
   Insn 45: point = 20, n_alt = 3
   Insn 42: point = 22, n_alt = 15
   Insn 94: point = 24, n_alt = -2
   Insn 41: point = 25, n_alt = 0
   Insn 40: point = 25, n_alt = 3
  BB 3
   Insn 97: point = 26, n_alt = -1
   Insn 104: point = 26, n_alt = 15
   Insn 5: point = 28, n_alt = 14
   Insn 103: point = 29, n_alt = 15
   Insn 30: point = 31, n_alt = 2
   Insn 102: point = 33, n_alt = -2
   Insn 29: point = 35, n_alt = 14
   Insn 93: point = 36, n_alt = -2
   Insn 26: point = 37, n_alt = 0
   Insn 25: point = 37, n_alt = 3
  BB 7
   Insn 109: point = 39, n_alt = 15
   Insn 7: point = 41, n_alt = 14
   Insn 108: point = 42, n_alt = 15
   Insn 6: point = 44, n_alt = 14
  BB 6
   Insn 61: point = 45, n_alt = -1
  BB 4
   Insn 37: point = 45, n_alt = -1
   Insn 36: point = 45, n_alt = 0
  BB 2
   Insn 22: point = 47, n_alt = -1
   Insn 21: point = 47, n_alt = 0
   Insn 15: point = 47, n_alt = 0
   Insn 14: point = 47, n_alt = 0
   Insn 13: point = 48, n_alt = -2
   Insn 92: point = 50, n_alt = -2
   Insn 12: point = 51, n_alt = 0
   Insn 3: point = 51, n_alt = -2
   Insn 91: point = 53, n_alt = -2
   Insn 2: point = 54, n_alt = -2
   Insn 90: point = 56, n_alt = -2
 r91: [39..39] [26..26] [2..22]
 r95: [39..42] [26..29] [4..9]
Compressing live ranges: from 57 to 6 - 10%
Ranges after the compression:
 r91: [4..4] [0..2]
 r95: [0..5]

******** Rematerialization #1: ********

df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 12 count 10 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 12 count 10 (    1)

Cands:

BB 2:
  register live in: 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97 98
  changed regs: 0 [ax] 5 [di] 82 97 98 107 108 109
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 82 107 108 109

BB 3:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91 95
  changed regs: 5 [di] 20 [xmm0] 91 95 99 110 114 115
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 97 99 110 114 115

BB 4:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97 98
  register live out: 6 [bp] 7 [sp] 16 [argp] 17 [flags] 19 [frame] 97
  changed regs:
  dead regs: 98

BB 5:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91 95
  changed regs: 5 [di] 20 [xmm0] 91 95 100 101 102 111 112 117
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 97 100 101 102 111 112 117

BB 6:
  register live in: 6 [bp] 7 [sp] 16 [argp] 17 [flags] 19 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  changed regs:
  dead regs: 17 [flags]

BB 7:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91 95
  changed regs: 91 95 118 119
  dead regs: 118 119

BB 8:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91 95
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  changed regs: 0 [ax] 20 [xmm0] 103 104 105 113
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 91 95 103 104 105 113

BB 9:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  changed regs: 0 [ax]
  dead regs:
subreg regs:
  Slot 0 regnos (width = 0):	 91
  Slot 1 regnos (width = 0):	 95
Changing spilled pseudos to memory in insn #103
Changing spilled pseudos to memory in insn #104
Changing spilled pseudos to memory in insn #42
Changing spilled pseudos to memory in insn #43
Changing spilled pseudos to memory in insn #50
Changing spilled pseudos to memory in insn #107
Changing spilled pseudos to memory in insn #108
Changing spilled pseudos to memory in insn #109
Changing spilled pseudos to memory in insn #65
Changing spilled pseudos to memory in insn #74
Changing spilled pseudos to memory in insn #75
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=32)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-24, prev_offset=0)

********** Local #4: **********

	   Spilling non-eliminable hard regs: 7
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 75:  (0) x  (1) 0  (2) xm {*fop_df_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 74:  (0) x  (1) 0  (2) xm {*fop_df_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 109:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 108:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 107:  (0) m  (1) v {*movdf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) x  (1) 0  (2) xm {*fop_df_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 42:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 104:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 103:  (0) m  (1) v {*movdf_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=48)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-24, prev_offset=0)
changing reg in insn 13
changing reg in insn 2
changing reg in insn 45
changing reg in insn 40
changing reg in insn 25
changing reg in insn 3
changing reg in insn 36
changing reg in insn 21
changing reg in insn 29
changing reg in insn 45
changing reg in insn 46
changing reg in insn 50
changing reg in insn 52
changing reg in insn 51
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 90
changing reg in insn 2
changing reg in insn 91
changing reg in insn 3
changing reg in insn 92
changing reg in insn 13
changing reg in insn 93
changing reg in insn 30
changing reg in insn 28
changing reg in insn 94
changing reg in insn 42
changing reg in insn 95
changing reg in insn 50
changing reg in insn 49
changing reg in insn 96
changing reg in insn 73
deleting insn with uid = 90.
deleting insn with uid = 91.
deleting insn with uid = 92.
deleting insn with uid = 14.
deleting insn with uid = 93.
deleting insn with uid = 102.
deleting insn with uid = 94.
deleting insn with uid = 46.
deleting insn with uid = 95.
deleting insn with uid = 106.
deleting insn with uid = 96.
deleting insn with uid = 76.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 47.
verify found no changes in insn with uid = 71.
verify found no changes in insn with uid = 77.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 12 count 10 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 12 count 10 (    1)


fbgc_random

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7]
;;  ref usage 	r0={9d,4u} r1={8d} r2={8d} r3={1d,2u} r4={8d,1u} r5={12d,5u} r6={1d,3u} r7={1d,27u} r8={7d} r9={7d} r10={7d} r11={7d} r12={7d} r13={7d} r14={7d} r15={7d} r17={9d,3u} r18={7d} r20={12d,9u} r21={12d,4u} r22={8d} r23={8d} r24={9d,1u} r25={9d,1u} r26={8d} r27={9d,1u} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={8d} r37={8d} r38={7d} r39={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} 
;;    total ref usage 566{505d,61u,0e} in 60{53 regular + 7 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (reg/v/f:DI 6 bp [orig:97 arg ] [97])
        (reg:DI 5 di [107])) "cmodules/fbgc_math.c":170:1 66 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v:SI 3 bx [orig:98 argc ] [98])
        (reg:SI 4 si [108])) "cmodules/fbgc_math.c":170:1 67 {*movsi_internal}
     (nil))
(note 4 3 11 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 11 4 12 2 (debug_marker) "cmodules/fbgc_math.c":171:2 -1
     (nil))
(call_insn 12 11 13 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("clock") [flags 0x41]  <function_decl 0x7f213e36da00 clock>) [0 clock S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":171:14 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("clock") [flags 0x41]  <function_decl 0x7f213e36da00 clock>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(insn 13 12 15 2 (set (reg:DI 5 di [orig:82 _1 ] [82])
        (reg:DI 0 ax [109])) "cmodules/fbgc_math.c":171:14 66 {*movdi_internal}
     (nil))
(call_insn 15 13 16 2 (call (mem:QI (symbol_ref:DI ("srand") [flags 0x41]  <function_decl 0x7f213e5e7700 srand>) [0 srand S1 A8])
        (const_int 0 [0])) "cmodules/fbgc_math.c":171:2 666 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("srand") [flags 0x41]  <function_decl 0x7f213e5e7700 srand>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(debug_insn 16 15 17 2 (debug_marker) "cmodules/fbgc_math.c":173:2 -1
     (nil))
(debug_insn 17 16 18 2 (var_location:DF min (const_double:DF 0.0 [0x0.0p+0])) "cmodules/fbgc_math.c":173:9 -1
     (nil))
(debug_insn 18 17 19 2 (debug_marker) "cmodules/fbgc_math.c":174:2 -1
     (nil))
(debug_insn 19 18 20 2 (var_location:DF max (const_double:DF 1.0e+0 [0x0.8p+1])) "cmodules/fbgc_math.c":174:9 -1
     (nil))
(debug_insn 20 19 21 2 (debug_marker) "cmodules/fbgc_math.c":176:2 -1
     (nil))
(insn 21 20 22 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 3 bx [orig:98 argc ] [98])
            (const_int 1 [0x1]))) "cmodules/fbgc_math.c":176:4 11 {*cmpsi_1}
     (nil))
(jump_insn 22 21 23 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) "cmodules/fbgc_math.c":176:4 659 {*jcc}
     (int_list:REG_BR_PROB 856416484 (nil))
 -> 33)
;;  succ:       3 [20.2% (guessed)]  count:217325344 (estimated locally) (FALLTHRU)
;;              4 [79.8% (guessed)]  count:856416480 (estimated locally)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 3, loop depth 0, count 217325345 (estimated locally), maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [20.2% (guessed)]  count:217325344 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 5 [di] 20 [xmm0] 21 [xmm1] 27 [xmm7]
;; live  kill	
(note 23 22 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 24 23 25 3 (debug_marker) "cmodules/fbgc_math.c":177:3 -1
     (nil))
(insn 25 24 26 3 (set (reg:DI 5 di)
        (mem/f:DI (reg/v/f:DI 6 bp [orig:97 arg ] [97]) [3 *arg_19(D)+0 S8 A64])) "cmodules/fbgc_math.c":177:9 66 {*movdi_internal}
     (nil))
(call_insn 26 25 27 3 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_double") [flags 0x41]  <function_decl 0x7f213e3db700 convert_fbgc_object_to_double>) [0 convert_fbgc_object_to_double S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":177:9 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_double") [flags 0x41]  <function_decl 0x7f213e3db700 convert_fbgc_object_to_double>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(note 27 26 28 3 NOTE_INSN_DELETED)
(debug_insn 28 27 29 3 (var_location:DF max (reg:DF 20 xmm0 [110])) "cmodules/fbgc_math.c":177:9 -1
     (nil))
(insn 29 28 30 3 (set (reg:DF 21 xmm1 [99])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S8 A64])) 111 {*movdf_internal}
     (expr_list:REG_EQUIV (const_double:DF 2.147483647e+9 [0x0.fffffffep+31])
        (nil)))
(insn 30 29 103 3 (set (reg:DF 21 xmm1 [99])
        (div:DF (reg:DF 21 xmm1 [99])
            (reg:DF 20 xmm0 [110]))) 822 {*fop_df_1}
     (nil))
(insn 103 30 5 3 (set (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-8 S8 A64])
        (reg:DF 21 xmm1 [99])) 111 {*movdf_internal}
     (nil))
(insn 5 103 104 3 (set (reg/v:DF 27 xmm7 [orig:91 min ] [91])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0  S8 A64])) "cmodules/fbgc_math.c":173:9 111 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 0.0 [0x0.0p+0])
        (nil)))
(insn 104 5 97 3 (set (mem/c:DF (reg/f:DI 7 sp) [10 %sfp+-16 S8 A64])
        (reg/v:DF 27 xmm7 [orig:91 min ] [91])) "cmodules/fbgc_math.c":173:9 111 {*movdf_internal}
     (nil))
(jump_insn 97 104 98 3 (set (pc)
        (label_ref 62)) 660 {jump}
     (nil)
 -> 62)
;;  succ:       8 [always]  count:217325345 (estimated locally)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 98 97 33)
;; basic block 4, loop depth 0, count 856416480 (estimated locally), maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [79.8% (guessed)]  count:856416480 (estimated locally)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 33 98 34 4 7 (nil) [1 uses])
(note 34 33 35 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 35 34 36 4 (debug_marker) "cmodules/fbgc_math.c":179:7 -1
     (nil))
(insn 36 35 37 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 bx [orig:98 argc ] [98])
            (const_int 2 [0x2]))) "cmodules/fbgc_math.c":179:9 11 {*cmpsi_1}
     (nil))
(jump_insn 37 36 38 4 (set (pc)
        (if_then_else (ne (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "cmodules/fbgc_math.c":179:9 659 {*jcc}
     (int_list:REG_BR_PROB 856416484 (nil))
 -> 55)
;;  succ:       5 [20.2% (guessed)]  count:173338695 (estimated locally) (FALLTHRU)
;;              6 [79.8% (guessed)]  count:683077785 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 17 [flags]
;; live  out 	 6 [bp] 7 [sp] 17 [flags]

;; basic block 5, loop depth 0, count 173338695 (estimated locally), maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [20.2% (guessed)]  count:173338695 (estimated locally) (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 5 [di] 20 [xmm0] 21 [xmm1]
;; live  kill	
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(debug_insn 39 38 40 5 (debug_marker) "cmodules/fbgc_math.c":180:3 -1
     (nil))
(insn 40 39 41 5 (set (reg:DI 5 di)
        (mem/f:DI (reg/v/f:DI 6 bp [orig:97 arg ] [97]) [3 *arg_19(D)+0 S8 A64])) "cmodules/fbgc_math.c":180:9 66 {*movdi_internal}
     (nil))
(call_insn 41 40 42 5 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_double") [flags 0x41]  <function_decl 0x7f213e3db700 convert_fbgc_object_to_double>) [0 convert_fbgc_object_to_double S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":180:9 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_double") [flags 0x41]  <function_decl 0x7f213e3db700 convert_fbgc_object_to_double>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 42 41 116 5 (set (mem/c:DF (reg/f:DI 7 sp) [10 %sfp+-16 S8 A64])
        (reg:DF 20 xmm0 [111])) "cmodules/fbgc_math.c":180:9 111 {*movdf_internal}
     (nil))
(note 116 42 112 5 NOTE_INSN_DELETED)
(note 112 116 43 5 NOTE_INSN_DELETED)
(debug_insn 43 112 44 5 (var_location:DF min (mem/c:DF (reg/f:DI 7 sp) [10 %sfp+-16 S8 A64])) "cmodules/fbgc_math.c":180:9 -1
     (nil))
(debug_insn 44 43 45 5 (debug_marker) "cmodules/fbgc_math.c":181:3 -1
     (nil))
(insn 45 44 47 5 (set (reg/f:DI 5 di [orig:100 MEM[(struct fbgc_object * *)arg_19(D) + 8B] ] [100])
        (mem/f:DI (plus:DI (reg/v/f:DI 6 bp [orig:97 arg ] [97])
                (const_int 8 [0x8])) [3 MEM[(struct fbgc_object * *)arg_19(D) + 8B]+0 S8 A64])) "cmodules/fbgc_math.c":181:9 66 {*movdi_internal}
     (nil))
(call_insn 47 45 48 5 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_double") [flags 0x41]  <function_decl 0x7f213e3db700 convert_fbgc_object_to_double>) [0 convert_fbgc_object_to_double S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":181:9 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_double") [flags 0x41]  <function_decl 0x7f213e3db700 convert_fbgc_object_to_double>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(note 48 47 49 5 NOTE_INSN_DELETED)
(debug_insn 49 48 105 5 (var_location:DF max (reg:DF 20 xmm0 [112])) "cmodules/fbgc_math.c":181:9 -1
     (nil))
(note 105 49 115 5 NOTE_INSN_DELETED)
(note 115 105 50 5 NOTE_INSN_DELETED)
(insn 50 115 51 5 (set (reg:DF 20 xmm0 [101])
        (minus:DF (reg:DF 20 xmm0 [112])
            (mem/c:DF (reg/f:DI 7 sp) [10 %sfp+-16 S8 A64]))) 822 {*fop_df_1}
     (nil))
(insn 51 50 52 5 (set (reg:DF 21 xmm1 [102])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S8 A64])) 111 {*movdf_internal}
     (expr_list:REG_EQUIV (const_double:DF 2.147483647e+9 [0x0.fffffffep+31])
        (nil)))
(insn 52 51 107 5 (set (reg:DF 21 xmm1 [102])
        (div:DF (reg:DF 21 xmm1 [102])
            (reg:DF 20 xmm0 [101]))) 822 {*fop_df_1}
     (nil))
(insn 107 52 99 5 (set (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-8 S8 A64])
        (reg:DF 21 xmm1 [102])) 111 {*movdf_internal}
     (nil))
(jump_insn 99 107 100 5 (set (pc)
        (label_ref 62)) 660 {jump}
     (nil)
 -> 62)
;;  succ:       8 [always]  count:173338695 (estimated locally)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 100 99 55)
;; basic block 6, loop depth 0, count 683077784 (estimated locally), maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [79.8% (guessed)]  count:683077785 (estimated locally)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 17 [flags]
;; lr  use 	 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 7 [sp] 17 [flags]
;; live  gen 	
;; live  kill	
(code_label 55 100 56 6 9 (nil) [1 uses])
(note 56 55 57 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 57 56 61 6 (debug_marker) "cmodules/fbgc_math.c":183:7 -1
     (nil))
(jump_insn 61 57 88 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 80)
            (pc))) "cmodules/fbgc_math.c":183:9 659 {*jcc}
     (int_list:REG_BR_PROB 186616332 (nil))
 -> 80)
;;  succ:       9 [17.4% (guessed)]  count:118718918 (estimated locally)
;;              7 [82.6% (guessed)]  count:564358866 (estimated locally) (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 7, loop depth 0, count 564358866 (estimated locally), maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [82.6% (guessed)]  count:564358866 (estimated locally) (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 24 [xmm4] 25 [xmm5]
;; live  in  	 7 [sp]
;; live  gen 	 24 [xmm4] 25 [xmm5]
;; live  kill	
(note 88 61 6 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 6 88 108 7 (set (reg:DF 24 xmm4 [orig:95 _34 ] [95])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S8 A64])) 111 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 2.147483647e+9 [0x0.fffffffep+31])
        (nil)))
(insn 108 6 7 7 (set (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-8 S8 A64])
        (reg:DF 24 xmm4 [orig:95 _34 ] [95])) 111 {*movdf_internal}
     (nil))
(insn 7 108 109 7 (set (reg/v:DF 25 xmm5 [orig:91 min ] [91])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0  S8 A64])) "cmodules/fbgc_math.c":173:9 111 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 0.0 [0x0.0p+0])
        (nil)))
(insn 109 7 62 7 (set (mem/c:DF (reg/f:DI 7 sp) [10 %sfp+-16 S8 A64])
        (reg/v:DF 25 xmm5 [orig:91 min ] [91])) "cmodules/fbgc_math.c":173:9 111 {*movdf_internal}
     (nil))
;;  succ:       8 [always]  count:564358866 (estimated locally) (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 8, loop depth 0, count 955022906 (estimated locally), maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [always]  count:564358866 (estimated locally) (FALLTHRU)
;;              3 [always]  count:217325345 (estimated locally)
;;              5 [always]  count:173338695 (estimated locally)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 20 [xmm0]
;; live  kill	
(code_label 62 109 63 8 8 (nil) [2 uses])
(note 63 62 64 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 64 63 65 8 (var_location:DF max (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 65 64 66 8 (var_location:DF min (mem/c:DF (reg/f:DI 7 sp) [10 %sfp+-16 S8 A64])) -1
     (nil))
(debug_insn 66 65 67 8 (debug_marker) "cmodules/fbgc_math.c":185:2 -1
     (nil))
(debug_insn 67 66 68 8 (var_location:DF range (debug_expr:DF D#25)) "cmodules/fbgc_math.c":185:9 -1
     (nil))
(debug_insn 68 67 69 8 (debug_marker) "cmodules/fbgc_math.c":186:5 -1
     (nil))
(debug_insn 69 68 70 8 (var_location:DF div (div:DF (const_double:DF 2.147483647e+9 [0x0.fffffffep+31])
        (debug_expr:DF D#25))) "cmodules/fbgc_math.c":186:12 -1
     (nil))
(debug_insn 70 69 71 8 (debug_marker) "cmodules/fbgc_math.c":188:2 -1
     (nil))
(call_insn 71 70 72 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rand") [flags 0x41]  <function_decl 0x7f213e5e7600 rand>) [0 rand S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":188:39 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("rand") [flags 0x41]  <function_decl 0x7f213e5e7600 rand>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(note 72 71 73 8 NOTE_INSN_DELETED)
(insn 73 72 110 8 (set (reg:DF 20 xmm0 [103])
        (float:DF (reg:SI 0 ax [113]))) "cmodules/fbgc_math.c":188:46 172 {*floatsidf2}
     (nil))
(note 110 73 114 8 NOTE_INSN_DELETED)
(note 114 110 74 8 NOTE_INSN_DELETED)
(insn 74 114 111 8 (set (reg:DF 20 xmm0 [104])
        (div:DF (reg:DF 20 xmm0 [103])
            (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])) [10 %sfp+-8 S8 A64]))) "cmodules/fbgc_math.c":188:46 822 {*fop_df_1}
     (nil))
(note 111 74 113 8 NOTE_INSN_DELETED)
(note 113 111 75 8 NOTE_INSN_DELETED)
(insn 75 113 77 8 (set (reg:DF 20 xmm0 [105])
        (plus:DF (reg:DF 20 xmm0 [104])
            (mem/c:DF (reg/f:DI 7 sp) [10 %sfp+-16 S8 A64]))) "cmodules/fbgc_math.c":188:9 818 {*fop_df_comm}
     (nil))
(call_insn/j 77 75 78 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_double_object") [flags 0x41]  <function_decl 0x7f213e3e6d00 new_fbgc_double_object>) [0 new_fbgc_double_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":188:9 681 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_double_object") [flags 0x41]  <function_decl 0x7f213e3e6d00 new_fbgc_double_object>)
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
;;  succ:       EXIT [always]  count:955022906 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 78 77 80)
;; basic block 9, loop depth 0, count 118718918 (estimated locally), maybe hot
;;  prev block 8, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [17.4% (guessed)]  count:118718918 (estimated locally)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 80 78 81 9 10 (nil) [1 uses])
(note 81 80 85 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 85 81 86 9 (set (reg/i:DI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_math.c":189:1 66 {*movdi_internal}
     (nil))
(insn 86 85 101 9 (use (reg/i:DI 0 ax)) "cmodules/fbgc_math.c":189:1 -1
     (nil))
;;  succ:       EXIT [always]  count:118718918 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 101 86 0 NOTE_INSN_DELETED)

;; Function fbgc_rand (fbgc_rand, funcdef_no=67, decl_uid=5745, cgraph_uid=68, symbol_order=78)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-56, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (1) rBwBz {*call_value}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 59:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=17,losers=2 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 62:  (0) r  (1) r  (2) le {*adddi_1}
      Creating newreg=120 from oldreg=102, assigning class GENERAL_REGS to r120
   62: {r98:DI=r120:DI+0x12;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  156: r120:DI=r102:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (1) rBwBz {*call_value}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) v  (1) r {*floatsidf2}
Changing pseudo 111 in operand 2 of insn 84 on equiv 2.147483647e+9
            2 Non input pseudo reload: reject++
          alt=2,overall=13,losers=2,rld_nregs=0
	 Choosing alt 2 in insn 84:  (0) x  (1) 0  (2) xm {*fop_df_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 85:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 89:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 95:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
      Removing equiv init insn 128 (freq=10)
  128: r111:DF=[`*.LC5']
      REG_EQUIV 2.147483647e+9
deleting insn with uid = 128.
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 106:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=121 from oldreg=100, assigning class GENERAL_REGS to r121
  106: {r121:SI=r121:SI-r97:SI;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  157: r121:SI=r101:SI
    Inserting insn reload after:
  158: r100:SI=r121:SI

            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 14
   Insn 115: point = 0, n_alt = -1
   Insn 114: point = 0, n_alt = 3
  BB 11
   Insn 151: point = 2, n_alt = -1
  BB 10
   Insn 100: point = 3, n_alt = -1
   Insn 99: point = 3, n_alt = 0
   Insn 98: point = 3, n_alt = 0
   Insn 95: point = 4, n_alt = 0
  BB 9
   Insn 92: point = 6, n_alt = -1
   Insn 91: point = 6, n_alt = 0
   Insn 89: point = 6, n_alt = 0
   Insn 85: point = 7, n_alt = 15
   Insn 84: point = 8, n_alt = 2
   Insn 82: point = 10, n_alt = 1
   Insn 81: point = 12, n_alt = 3
   Insn 144: point = 13, n_alt = -2
   Insn 79: point = 14, n_alt = 0
  BB 13
   Insn 153: point = 15, n_alt = -1
   Insn 158: point = 15, n_alt = -2
	Hard reg 43 is preferable by r121 with profit 97
   Insn 106: point = 17, n_alt = 0
   Insn 157: point = 18, n_alt = -2
	Hard reg 43 is preferable by r121 with profit 97
	Hard reg 3 is preferable by r121 with profit 97
  BB 12
   Insn 7: point = 20, n_alt = 0
   Insn 6: point = 21, n_alt = -2
  r111 is added to live at bb12 start
  BB 8
   Insn 148: point = 23, n_alt = -1
  BB 7
   Insn 72: point = 24, n_alt = -1
   Insn 71: point = 24, n_alt = 0
  BB 6
   Insn 69: point = 25, n_alt = -1
   Insn 68: point = 25, n_alt = 0
   Insn 62: point = 25, n_alt = 3
   Insn 156: point = 27, n_alt = 3
   Insn 59: point = 28, n_alt = 5
   Insn 143: point = 30, n_alt = -2
   Insn 58: point = 31, n_alt = 0
   Insn 57: point = 31, n_alt = 0
   Insn 56: point = 31, n_alt = -2
   Insn 55: point = 31, n_alt = -2
   Insn 54: point = 31, n_alt = 0
  BB 3
   Insn 145: point = 32, n_alt = -1
   Insn 5: point = 32, n_alt = -2
   Insn 24: point = 33, n_alt = -2
   Insn 140: point = 35, n_alt = -2
   Insn 23: point = 36, n_alt = 0
   Insn 22: point = 36, n_alt = 3
  BB 5
   Insn 46: point = 38, n_alt = -2
   Insn 142: point = 40, n_alt = -2
   Insn 45: point = 41, n_alt = 0
   Insn 44: point = 41, n_alt = -2
   Insn 43: point = 42, n_alt = 3
   Insn 39: point = 44, n_alt = -2
   Insn 141: point = 46, n_alt = -2
   Insn 38: point = 47, n_alt = 0
   Insn 37: point = 47, n_alt = 3
  BB 4
   Insn 34: point = 48, n_alt = -1
   Insn 33: point = 48, n_alt = 0
   Insn 8: point = 49, n_alt = 5
  BB 2
   Insn 19: point = 51, n_alt = -1
   Insn 18: point = 51, n_alt = 0
   Insn 15: point = 51, n_alt = 0
   Insn 14: point = 51, n_alt = 0
   Insn 13: point = 52, n_alt = -2
   Insn 139: point = 54, n_alt = -2
   Insn 12: point = 55, n_alt = 0
   Insn 3: point = 55, n_alt = -2
   Insn 138: point = 57, n_alt = -2
   Insn 2: point = 58, n_alt = -2
   Insn 137: point = 60, n_alt = -2
df_worklist_dataflow_doublequeue: n_basic_blocks 15 n_edges 20 count 17 (  1.1)
Global pseudo live data have been updated:

BB 2:
    killed: 2:

       17   82  103  104  112  113  114
    liveout: 2:

        6    7   16   19  103  104

BB 3:
    gen: 3:

      103
    killed: 3:

       96   97  115
    livein: 3:

      103
    liveout: 3:

        6    7   16   19   96   97

BB 4:
    gen: 4:

      104
    killed: 4:

       17  102
    livein: 4:

      103  104
    liveout: 4:

        6    7   16   19  102  103

BB 5:
    gen: 5:

      103
    killed: 5:

       96   97  105  116  117
    livein: 5:

      103
    liveout: 5:

        6    7   16   19   96   97

BB 6:
    gen: 6:

       96   97
    killed: 6:

       17   98  102  118  120
    livein: 6:

       96   97
    liveout: 6:

        6    7   16   19   96   97   98  102

BB 7:
    gen: 7:

       97
    killed: 7:

       17
    livein: 7:

       96   97   98  102
    liveout: 7:

        6    7   16   19   96   97   98  102

BB 8:
    livein: 8:

      102
    liveout: 8:

        6    7   16   19  102

BB 9:
    gen: 9:

       98  100  101
    killed: 9:

       17  100  106  107  108  119
    livein: 9:

       96   97   98   99  100  101  102
    liveout: 9:

        6    7   16   19   96   97   98   99  100  101  102

BB 10:
    gen: 10:

       96   97   99  101
    killed: 10:

       17   99  101
    livein: 10:

       96   97   98   99  101  102
    liveout: 10:

        6    7   16   19   96   97   98   99  101  102

BB 11:
    livein: 11:

      102
    liveout: 11:

        6    7   16   19  102

BB 12:
    gen: 12:

       97
    killed: 12:

       99  101
    livein: 12:

       96   97   98  102
    liveout: 12:

        6    7   16   19   96   97   98   99  101  102

BB 13:
    gen: 13:

       97  101
    killed: 13:

       17  100  121
    livein: 13:

       96   97   98   99  101  102
    liveout: 13:

        6    7   16   19   96   97   98   99  100  101  102

BB 14:
    gen: 14:

      102
    livein: 14:

      102
    liveout: 14:

        0    6    7   16   19
 r82: [51..52]
 r96: [38..44] [24..33] [3..22]
 r97: [38..38] [24..32] [3..22]
 r98: [24..25] [3..22]
 r99: [3..20]
 r100: [6..15]
 r101: [3..21]
 r102: [48..49] [0..28]
 r103: [43..58] [36..37]
 r104: [48..55]
 r105: [41..42]
 r106: [7..12]
 r107: [9..10]
 r108: [7..8]
 r111: [3..22]
 r112: [59..60]
 r113: [56..57]
 r114: [53..54]
 r115: [34..35]
 r116: [45..46]
 r117: [39..40]
 r118: [29..30]
 r119: [11..13]
 r120: [26..27]
 r121: [16..18]
Compressing live ranges: from 61 to 37 - 60%
Ranges after the compression:
 r82: [29..30]
 r96: [18..24] [0..13]
 r97: [18..18] [0..13]
 r98: [0..9]
 r99: [0..7]
 r100: [0..5]
 r101: [0..7]
 r102: [27..28] [0..11]
 r103: [23..34] [16..17]
 r104: [27..32]
 r105: [21..22]
 r106: [0..5]
 r107: [2..3]
 r108: [0..1]
 r111: [0..7]
 r112: [35..36]
 r113: [33..34]
 r114: [31..32]
 r115: [14..15]
 r116: [25..26]
 r117: [19..20]
 r118: [12..13]
 r119: [4..5]
 r120: [10..11]
 r121: [6..7]
Live info was changed -- recalculate it

********** Pseudo live ranges #2: **********

  BB 14
   Insn 115: point = 0, n_alt = -1
   Insn 114: point = 0, n_alt = 3
  BB 11
   Insn 151: point = 2, n_alt = -1
  BB 10
   Insn 100: point = 3, n_alt = -1
   Insn 99: point = 3, n_alt = 0
   Insn 98: point = 3, n_alt = 0
   Insn 95: point = 4, n_alt = 0
  BB 9
   Insn 92: point = 6, n_alt = -1
   Insn 91: point = 6, n_alt = 0
   Insn 89: point = 6, n_alt = 0
   Insn 85: point = 7, n_alt = 15
   Insn 84: point = 8, n_alt = 2
   Insn 82: point = 10, n_alt = 1
   Insn 81: point = 12, n_alt = 3
   Insn 144: point = 13, n_alt = -2
   Insn 79: point = 14, n_alt = 0
  BB 13
   Insn 153: point = 15, n_alt = -1
   Insn 158: point = 15, n_alt = -2
	Hard reg 43 is preferable by r121 with profit 97
   Insn 106: point = 17, n_alt = 0
   Insn 157: point = 18, n_alt = -2
	Hard reg 43 is preferable by r121 with profit 97
	Hard reg 3 is preferable by r121 with profit 97
  BB 12
   Insn 7: point = 20, n_alt = 0
   Insn 6: point = 21, n_alt = -2
  BB 8
   Insn 148: point = 23, n_alt = -1
  BB 7
   Insn 72: point = 24, n_alt = -1
   Insn 71: point = 24, n_alt = 0
  BB 6
   Insn 69: point = 25, n_alt = -1
   Insn 68: point = 25, n_alt = 0
   Insn 62: point = 25, n_alt = 3
   Insn 156: point = 27, n_alt = 3
   Insn 59: point = 28, n_alt = 5
   Insn 143: point = 30, n_alt = -2
   Insn 58: point = 31, n_alt = 0
   Insn 57: point = 31, n_alt = 0
   Insn 56: point = 31, n_alt = -2
   Insn 55: point = 31, n_alt = -2
   Insn 54: point = 31, n_alt = 0
  BB 3
   Insn 145: point = 32, n_alt = -1
   Insn 5: point = 32, n_alt = -2
   Insn 24: point = 33, n_alt = -2
   Insn 140: point = 35, n_alt = -2
   Insn 23: point = 36, n_alt = 0
   Insn 22: point = 36, n_alt = 3
  BB 5
   Insn 46: point = 38, n_alt = -2
   Insn 142: point = 40, n_alt = -2
   Insn 45: point = 41, n_alt = 0
   Insn 44: point = 41, n_alt = -2
   Insn 43: point = 42, n_alt = 3
   Insn 39: point = 44, n_alt = -2
   Insn 141: point = 46, n_alt = -2
   Insn 38: point = 47, n_alt = 0
   Insn 37: point = 47, n_alt = 3
  BB 4
   Insn 34: point = 48, n_alt = -1
   Insn 33: point = 48, n_alt = 0
   Insn 8: point = 49, n_alt = 5
  BB 2
   Insn 19: point = 51, n_alt = -1
   Insn 18: point = 51, n_alt = 0
   Insn 15: point = 51, n_alt = 0
   Insn 14: point = 51, n_alt = 0
   Insn 13: point = 52, n_alt = -2
   Insn 139: point = 54, n_alt = -2
   Insn 12: point = 55, n_alt = 0
   Insn 3: point = 55, n_alt = -2
   Insn 138: point = 57, n_alt = -2
   Insn 2: point = 58, n_alt = -2
   Insn 137: point = 60, n_alt = -2
 r82: [51..52]
 r96: [38..44] [24..33] [3..22]
 r97: [38..38] [24..32] [3..22]
 r98: [24..25] [3..22]
 r99: [3..20]
 r100: [6..15]
 r101: [3..21]
 r102: [48..49] [0..28]
 r103: [43..58] [36..37]
 r104: [48..55]
 r105: [41..42]
 r106: [7..12]
 r107: [9..10]
 r108: [7..8]
 r112: [59..60]
 r113: [56..57]
 r114: [53..54]
 r115: [34..35]
 r116: [45..46]
 r117: [39..40]
 r118: [29..30]
 r119: [11..13]
 r120: [26..27]
 r121: [16..18]
Compressing live ranges: from 61 to 37 - 60%
Ranges after the compression:
 r82: [29..30]
 r96: [18..24] [0..13]
 r97: [18..18] [0..13]
 r98: [0..9]
 r99: [0..7]
 r100: [0..5]
 r101: [0..7]
 r102: [27..28] [0..11]
 r103: [23..34] [16..17]
 r104: [27..32]
 r105: [21..22]
 r106: [0..5]
 r107: [2..3]
 r108: [0..1]
 r112: [35..36]
 r113: [33..34]
 r114: [31..32]
 r115: [14..15]
 r116: [25..26]
 r117: [19..20]
 r118: [12..13]
 r119: [4..5]
 r120: [10..11]
 r121: [6..7]

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5
EBB 6 7
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=122 from oldreg=102, assigning class GENERAL_REGS to inheritance r122
    Original reg change 102->122 (bb6):
   59: r122:DI=r118:DI
      REG_DEAD r118:DI
    Add original<-inheritance after:
  159: r102:DI=r122:DI

    Inheritance reuse change 102->122 (bb6):
   60: debug m => r122:DI
    Inheritance reuse change 102->122 (bb6):
  156: r120:DI=r122:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14

********** Pseudo live ranges #3: **********

  BB 14
   Insn 115: point = 0, n_alt = -1
   Insn 114: point = 0, n_alt = 3
  BB 11
   Insn 151: point = 2, n_alt = -1
  BB 10
   Insn 100: point = 3, n_alt = -1
   Insn 99: point = 3, n_alt = 0
   Insn 98: point = 3, n_alt = 0
   Insn 95: point = 4, n_alt = 0
  BB 9
   Insn 92: point = 6, n_alt = -1
   Insn 91: point = 6, n_alt = 0
   Insn 89: point = 6, n_alt = 0
   Insn 85: point = 7, n_alt = 15
   Insn 84: point = 8, n_alt = 2
   Insn 82: point = 10, n_alt = 1
   Insn 81: point = 12, n_alt = 3
   Insn 144: point = 13, n_alt = -2
   Insn 79: point = 14, n_alt = 0
  BB 13
   Insn 153: point = 15, n_alt = -1
   Insn 158: point = 15, n_alt = -2
	Hard reg 43 is preferable by r121 with profit 97
   Insn 106: point = 17, n_alt = 0
   Insn 157: point = 18, n_alt = -2
	Hard reg 43 is preferable by r121 with profit 97
	Hard reg 3 is preferable by r121 with profit 97
  BB 12
   Insn 7: point = 20, n_alt = 0
   Insn 6: point = 21, n_alt = -2
  BB 8
   Insn 148: point = 23, n_alt = -1
  BB 7
   Insn 72: point = 24, n_alt = -1
   Insn 71: point = 24, n_alt = 0
  BB 6
   Insn 69: point = 25, n_alt = -1
   Insn 68: point = 25, n_alt = 0
   Insn 62: point = 25, n_alt = 3
   Insn 156: point = 27, n_alt = 3
	   Creating copy r120<-r122@13
   Insn 159: point = 29, n_alt = -1
   Insn 59: point = 30, n_alt = 5
	Hard reg 0 is preferable by r122 with profit 13
   Insn 143: point = 32, n_alt = -2
   Insn 58: point = 33, n_alt = 0
   Insn 57: point = 33, n_alt = 0
   Insn 56: point = 33, n_alt = -2
   Insn 55: point = 33, n_alt = -2
   Insn 54: point = 33, n_alt = 0
  BB 3
   Insn 145: point = 34, n_alt = -1
   Insn 5: point = 34, n_alt = -2
   Insn 24: point = 35, n_alt = -2
   Insn 140: point = 37, n_alt = -2
   Insn 23: point = 38, n_alt = 0
   Insn 22: point = 38, n_alt = 3
  BB 5
   Insn 46: point = 40, n_alt = -2
   Insn 142: point = 42, n_alt = -2
   Insn 45: point = 43, n_alt = 0
   Insn 44: point = 43, n_alt = -2
   Insn 43: point = 44, n_alt = 3
   Insn 39: point = 46, n_alt = -2
   Insn 141: point = 48, n_alt = -2
   Insn 38: point = 49, n_alt = 0
   Insn 37: point = 49, n_alt = 3
  BB 4
   Insn 34: point = 50, n_alt = -1
   Insn 33: point = 50, n_alt = 0
   Insn 8: point = 51, n_alt = 5
  BB 2
   Insn 19: point = 53, n_alt = -1
   Insn 18: point = 53, n_alt = 0
   Insn 15: point = 53, n_alt = 0
   Insn 14: point = 53, n_alt = 0
   Insn 13: point = 54, n_alt = -2
   Insn 139: point = 56, n_alt = -2
   Insn 12: point = 57, n_alt = 0
   Insn 3: point = 57, n_alt = -2
   Insn 138: point = 59, n_alt = -2
   Insn 2: point = 60, n_alt = -2
   Insn 137: point = 62, n_alt = -2
 r82: [53..54]
 r96: [40..46] [24..35] [3..22]
 r97: [40..40] [24..34] [3..22]
 r98: [24..25] [3..22]
 r99: [3..20]
 r100: [6..15]
 r101: [3..21]
 r102: [50..51] [0..29]
 r103: [45..60] [38..39]
 r104: [50..57]
 r105: [43..44]
 r106: [7..12]
 r107: [9..10]
 r108: [7..8]
 r112: [61..62]
 r113: [58..59]
 r114: [55..56]
 r115: [36..37]
 r116: [47..48]
 r117: [41..42]
 r118: [31..32]
 r119: [11..13]
 r120: [26..27]
 r121: [16..18]
 r122: [28..30]
Compressing live ranges: from 63 to 39 - 61%
Ranges after the compression:
 r82: [31..32]
 r96: [20..26] [0..15]
 r97: [20..20] [0..15]
 r98: [0..9]
 r99: [0..7]
 r100: [0..5]
 r101: [0..7]
 r102: [29..30] [0..13]
 r103: [25..36] [18..19]
 r104: [29..34]
 r105: [23..24]
 r106: [0..5]
 r107: [2..3]
 r108: [0..1]
 r112: [37..38]
 r113: [35..36]
 r114: [33..34]
 r115: [16..17]
 r116: [27..28]
 r117: [21..22]
 r118: [14..15]
 r119: [4..5]
 r120: [10..11]
 r121: [6..7]
 r122: [12..13]

********** Assignment #1: **********

	 Assigning to 121 (cl=GENERAL_REGS, orig=100, freq=291, tfirst=121, tfreq=291)...
	   Assign 43 to reload r121 (freq=291)
	 Assigning to 120 (cl=GENERAL_REGS, orig=102, freq=26, tfirst=120, tfreq=39)...
	   Assign 0 to reload r120 (freq=26)
	Hard reg 0 is preferable by r122 with profit 26
	 Assigning to 122 (cl=GENERAL_REGS, orig=102, freq=39, tfirst=120, tfreq=39)...
	   Assign 0 to inheritance r122 (freq=39)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 1 out of 1 (100.00%)

********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 159:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 7

******** Rematerialization #1: ********

df_worklist_dataflow_doublequeue: n_basic_blocks 15 n_edges 20 count 15 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 15 n_edges 20 count 15 (    1)

Cands:
0 (nop=0, remat_regno=102, reload_regno=-1):
(insn 8 32 33 4 (set (reg/v/f:DI 102 [ <retval> ])
                    (const_int 0 [0])) "cmodules/fbgc_math.c":202:14 66 {*movdi_internal}
                 (expr_list:REG_EQUAL (const_int 0 [0])
                    (nil)))
1 (nop=0, remat_regno=102, reload_regno=-1):
(insn 159 59 60 6 (set (reg/v/f:DI 102 [ <retval> ])
                    (reg/v/f:DI 122 [orig:102 <retval> ] [102])) "cmodules/fbgc_math.c":204:27 66 {*movdi_internal}
                 (nil))

BB 2:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 103 104
  changed regs: 0 [ax] 5 [di] 82 103 104 112 113 114
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 82 112 113 114
  livein cands in BB 2:

        0

BB 3:
  register live in: 103
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 97
  changed regs: 0 [ax] 5 [di] 96 97 115
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 103 115
  livein cands in BB 3:

        0

BB 4:
  register live in: 103 104
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 102 103
  changed regs: 102
  dead regs: 17 [flags] 104
  cands generated in BB 4:

        0
  livein cands in BB 4:

        0
  pavout cands in BB 4:

        0
  avout cands in BB 4:

        0

BB 5:
  register live in: 103
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 97
  changed regs: 0 [ax] 5 [di] 96 97 105 116 117
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 103 105 116 117
  livein cands in BB 5:

        0
  pavin cands in BB 5:

        0
  pavout cands in BB 5:

        0
  avin cands in BB 5:

        0
  avout cands in BB 5:

        0

BB 6:
  register live in: 96 97
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 97 98 102
  changed regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 98 102 118 120 122
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 118 120 122
  livein cands in BB 6:

        0
  pavin cands in BB 6:

        0

BB 7:
  register live in: 96 97 98 102
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 97 98 102
  changed regs:
  dead regs: 17 [flags]
  livein cands in BB 7:

        0

BB 8:
  register live in: 102
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 102
  changed regs:
  dead regs:
  livein cands in BB 8:

        0

BB 9:
  register live in: 96 97 98 99 100 101 102
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 97 98 99 100 101 102
  changed regs: 0 [ax] 100 106 107 108 119
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 106 107 108 119
  livein cands in BB 9:

        0

BB 10:
  register live in: 96 97 98 99 101 102
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 97 98 99 101 102
  changed regs: 99 101
  dead regs: 17 [flags]
  livein cands in BB 10:

        0

BB 11:
  register live in: 102
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 102
  changed regs:
  dead regs:
  livein cands in BB 11:

        0

BB 12:
  register live in: 96 97 98 102
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 97 98 99 101 102
  changed regs: 99 101
  dead regs:
  livein cands in BB 12:

        0

BB 13:
  register live in: 96 97 98 99 101 102
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 97 98 99 100 101 102
  changed regs: 100 121
  dead regs: 121
  livein cands in BB 13:

        0

BB 14:
  register live in: 102
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  changed regs: 0 [ax]
  dead regs: 102
  livein cands in BB 14:

        0
  pavin cands in BB 14:

        0
subreg regs:
  Slot 0 regnos (width = 0):	 102
Changing spilled pseudos to memory in insn #8
Changing spilled pseudos to memory in insn #159
Changing spilled pseudos to memory in insn #114
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=80, prev_offset=64)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-56, prev_offset=0)

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 159:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=80, prev_offset=80)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-56, prev_offset=0)
changing reg in insn 13
changing reg in insn 39
changing reg in insn 24
changing reg in insn 99
changing reg in insn 68
changing reg in insn 56
changing reg in insn 52
changing reg in insn 41
changing reg in insn 5
changing reg in insn 27
changing reg in insn 26
changing reg in insn 46
changing reg in insn 5
changing reg in insn 106
changing reg in insn 6
changing reg in insn 98
changing reg in insn 71
changing reg in insn 55
changing reg in insn 51
changing reg in insn 48
changing reg in insn 62
changing reg in insn 85
changing reg in insn 63
changing reg in insn 84
changing reg in insn 7
changing reg in insn 95
changing reg in insn 103
changing reg in insn 99
changing reg in insn 96
changing reg in insn 95
changing reg in insn 89
changing reg in insn 91
changing reg in insn 89
changing reg in insn 81
changing reg in insn 6
changing reg in insn 98
changing reg in insn 98
changing reg in insn 91
changing reg in insn 2
changing reg in insn 43
changing reg in insn 37
changing reg in insn 22
changing reg in insn 3
changing reg in insn 33
changing reg in insn 18
changing reg in insn 43
changing reg in insn 44
changing reg in insn 81
changing reg in insn 85
changing reg in insn 84
changing reg in insn 82
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 137
changing reg in insn 2
changing reg in insn 138
changing reg in insn 3
changing reg in insn 139
changing reg in insn 13
changing reg in insn 140
changing reg in insn 24
changing reg in insn 141
changing reg in insn 39
changing reg in insn 142
changing reg in insn 46
changing reg in insn 143
changing reg in insn 59
changing reg in insn 144
changing reg in insn 82
deleting insn with uid = 137.
deleting insn with uid = 138.
deleting insn with uid = 139.
deleting insn with uid = 14.
deleting insn with uid = 140.
deleting insn with uid = 141.
deleting insn with uid = 44.
deleting insn with uid = 142.
deleting insn with uid = 143.
deleting insn with uid = 59.
deleting insn with uid = 156.
deleting insn with uid = 144.
deleting insn with uid = 158.


try_optimize_cfg iteration 1

Forwarding edge 7->8 to 14 failed.
Forwarding edge 10->11 to 14 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 79.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 15 n_edges 20 count 17 (  1.1)
df_worklist_dataflow_doublequeue: n_basic_blocks 15 n_edges 20 count 17 (  1.1)


fbgc_rand

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;;  ref usage 	r0={9d,10u} r1={9d,1u} r2={10d,2u,1e} r3={3d,5u} r4={9d,2u} r5={13d,6u} r6={2d,5u,1e} r7={1d,24u} r8={7d} r9={7d} r10={7d} r11={7d} r12={7d} r13={7d} r14={7d} r15={7d} r17={18d,6u} r18={7d} r20={10d,2u} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={8d} r37={8d} r38={7d} r39={7d} r40={2d,4u} r41={2d,7u} r42={2d,8u} r43={3d,4u} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} 
;;    total ref usage 610{522d,86u,2e} in 85{78 regular + 7 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 22864923 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [always]  count:22864923 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (reg/v/f:DI 6 bp [orig:103 arg ] [103])
        (reg:DI 5 di [112])) "cmodules/fbgc_math.c":192:1 66 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v:SI 3 bx [orig:104 argc ] [104])
        (reg:SI 4 si [113])) "cmodules/fbgc_math.c":192:1 67 {*movsi_internal}
     (nil))
(note 4 3 11 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 11 4 12 2 (debug_marker) "cmodules/fbgc_math.c":193:2 -1
     (nil))
(call_insn 12 11 13 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("clock") [flags 0x41]  <function_decl 0x7f213e36da00 clock>) [0 clock S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":193:14 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("clock") [flags 0x41]  <function_decl 0x7f213e36da00 clock>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(insn 13 12 15 2 (set (reg:DI 5 di [orig:82 _1 ] [82])
        (reg:DI 0 ax [114])) "cmodules/fbgc_math.c":193:14 66 {*movdi_internal}
     (nil))
(call_insn 15 13 16 2 (call (mem:QI (symbol_ref:DI ("srand") [flags 0x41]  <function_decl 0x7f213e5e7700 srand>) [0 srand S1 A8])
        (const_int 0 [0])) "cmodules/fbgc_math.c":193:2 666 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("srand") [flags 0x41]  <function_decl 0x7f213e5e7700 srand>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(debug_insn 16 15 17 2 (debug_marker) "cmodules/fbgc_math.c":194:2 -1
     (nil))
(debug_insn 17 16 18 2 (debug_marker) "cmodules/fbgc_math.c":195:2 -1
     (nil))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 3 bx [orig:104 argc ] [104])
            (const_int 1 [0x1]))) "cmodules/fbgc_math.c":195:4 11 {*cmpsi_1}
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "cmodules/fbgc_math.c":195:4 659 {*jcc}
     (int_list:REG_BR_PROB 856416484 (nil))
 -> 30)
;;  succ:       3 [20.2% (guessed)]  count:4627860 (estimated locally) (FALLTHRU)
;;              4 [79.8% (guessed)]  count:18237063 (estimated locally)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 3, loop depth 0, count 4627860 (estimated locally), maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [20.2% (guessed)]  count:4627860 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 41 [r13] 42 [r14] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 41 [r13] 42 [r14]
;; live  kill	
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 21 20 22 3 (debug_marker) "cmodules/fbgc_math.c":196:3 -1
     (nil))
(insn 22 21 23 3 (set (reg:DI 5 di)
        (mem/f:DI (reg/v/f:DI 6 bp [orig:103 arg ] [103]) [3 *arg_30(D)+0 S8 A64])) "cmodules/fbgc_math.c":196:15 66 {*movdi_internal}
     (nil))
(call_insn 23 22 24 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f213e3db600 convert_fbgc_object_to_int>) [0 convert_fbgc_object_to_int S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":196:15 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f213e3db600 convert_fbgc_object_to_int>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 24 23 26 3 (set (reg/v:SI 42 r14 [orig:96 row ] [96])
        (reg:SI 0 ax [115])) "cmodules/fbgc_math.c":196:15 67 {*movsi_internal}
     (nil))
(debug_insn 26 24 27 3 (var_location:SI col (reg/v:SI 42 r14 [orig:96 row ] [96])) "cmodules/fbgc_math.c":196:13 -1
     (nil))
(debug_insn 27 26 5 3 (var_location:SI row (reg/v:SI 42 r14 [orig:96 row ] [96])) "cmodules/fbgc_math.c":196:7 -1
     (nil))
(insn 5 27 145 3 (set (reg/v:SI 41 r13 [orig:97 col ] [97])
        (reg/v:SI 42 r14 [orig:96 row ] [96])) "cmodules/fbgc_math.c":196:13 67 {*movsi_internal}
     (nil))
(jump_insn 145 5 146 3 (set (pc)
        (label_ref 49)) 660 {jump}
     (nil)
 -> 49)
;;  succ:       6 [always]  count:4627860 (estimated locally)
;; lr  out 	 7 [sp] 41 [r13] 42 [r14]
;; live  out 	 7 [sp] 41 [r13] 42 [r14]

(barrier 146 145 30)
;; basic block 4, loop depth 0, count 18237062 (estimated locally), maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [79.8% (guessed)]  count:18237063 (estimated locally)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 30 146 31 4 15 (nil) [1 uses])
(note 31 30 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 32 31 8 4 (debug_marker) "cmodules/fbgc_math.c":198:7 -1
     (nil))
(insn 8 32 33 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-8 S8 A64])
        (const_int 0 [0])) "cmodules/fbgc_math.c":202:14 66 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 33 8 34 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 3 bx [orig:104 argc ] [104])
            (const_int 2 [0x2]))) "cmodules/fbgc_math.c":198:9 11 {*cmpsi_1}
     (nil))
(jump_insn 34 33 35 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 113)
            (pc))) "cmodules/fbgc_math.c":198:9 659 {*jcc}
     (int_list:REG_BR_PROB 486727172 (nil))
 -> 113)
;;  succ:       5 [54.7% (guessed)]  count:9970202 (estimated locally) (FALLTHRU)
;;              14 [45.3% (guessed)]  count:8266860 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 5, loop depth 0, count 9970202 (estimated locally), maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [54.7% (guessed)]  count:9970202 (estimated locally) (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 41 [r13] 42 [r14] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 41 [r13] 42 [r14]
;; live  kill	
(note 35 34 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(debug_insn 36 35 37 5 (debug_marker) "cmodules/fbgc_math.c":199:3 -1
     (nil))
(insn 37 36 38 5 (set (reg:DI 5 di)
        (mem/f:DI (reg/v/f:DI 6 bp [orig:103 arg ] [103]) [3 *arg_30(D)+0 S8 A64])) "cmodules/fbgc_math.c":199:9 66 {*movdi_internal}
     (nil))
(call_insn 38 37 39 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f213e3db600 convert_fbgc_object_to_int>) [0 convert_fbgc_object_to_int S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":199:9 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f213e3db600 convert_fbgc_object_to_int>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 39 38 41 5 (set (reg/v:SI 42 r14 [orig:96 row ] [96])
        (reg:SI 0 ax [116])) "cmodules/fbgc_math.c":199:9 67 {*movsi_internal}
     (nil))
(debug_insn 41 39 42 5 (var_location:SI row (reg/v:SI 42 r14 [orig:96 row ] [96])) "cmodules/fbgc_math.c":199:7 -1
     (nil))
(debug_insn 42 41 43 5 (debug_marker) "cmodules/fbgc_math.c":200:3 -1
     (nil))
(insn 43 42 45 5 (set (reg/f:DI 5 di [orig:105 MEM[(struct fbgc_object * *)arg_30(D) + 8B] ] [105])
        (mem/f:DI (plus:DI (reg/v/f:DI 6 bp [orig:103 arg ] [103])
                (const_int 8 [0x8])) [3 MEM[(struct fbgc_object * *)arg_30(D) + 8B]+0 S8 A64])) "cmodules/fbgc_math.c":200:9 66 {*movdi_internal}
     (nil))
(call_insn 45 43 46 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f213e3db600 convert_fbgc_object_to_int>) [0 convert_fbgc_object_to_int S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":200:9 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f213e3db600 convert_fbgc_object_to_int>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 46 45 48 5 (set (reg/v:SI 41 r13 [orig:97 col ] [97])
        (reg:SI 0 ax [117])) "cmodules/fbgc_math.c":200:9 67 {*movsi_internal}
     (nil))
(debug_insn 48 46 49 5 (var_location:SI col (reg/v:SI 41 r13 [orig:97 col ] [97])) "cmodules/fbgc_math.c":200:7 -1
     (nil))
;;  succ:       6 [always]  count:9970202 (estimated locally) (FALLTHRU)
;; lr  out 	 7 [sp] 41 [r13] 42 [r14]
;; live  out 	 7 [sp] 41 [r13] 42 [r14]

;; basic block 6, loop depth 0, count 14598062 (estimated locally), maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [always]  count:9970202 (estimated locally) (FALLTHRU)
;;              3 [always]  count:4627860 (estimated locally)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 41 [r13] 42 [r14]
;; lr  use 	 7 [sp] 41 [r13] 42 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 7 [sp] 41 [r13] 42 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(code_label 49 48 50 6 16 (nil) [1 uses])
(note 50 49 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 51 50 52 6 (var_location:SI col (reg/v:SI 41 r13 [orig:97 col ] [97])) -1
     (nil))
(debug_insn 52 51 53 6 (var_location:SI row (reg/v:SI 42 r14 [orig:96 row ] [96])) -1
     (nil))
(debug_insn 53 52 54 6 (debug_marker) "cmodules/fbgc_math.c":204:2 -1
     (nil))
(insn 54 53 55 6 (set (reg:SI 2 cx)
        (const_int 10 [0xa])) "cmodules/fbgc_math.c":204:27 67 {*movsi_internal}
     (nil))
(insn 55 54 56 6 (set (reg:SI 1 dx)
        (reg/v:SI 41 r13 [orig:97 col ] [97])) "cmodules/fbgc_math.c":204:27 67 {*movsi_internal}
     (nil))
(insn 56 55 57 6 (set (reg:SI 4 si)
        (reg/v:SI 42 r14 [orig:96 row ] [96])) "cmodules/fbgc_math.c":204:27 67 {*movsi_internal}
     (nil))
(insn 57 56 58 6 (set (reg:SI 5 di)
        (const_int 4 [0x4])) "cmodules/fbgc_math.c":204:27 67 {*movsi_internal}
     (nil))
(call_insn 58 57 159 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_matrix_object") [flags 0x41]  <function_decl 0x7f213e3fe100 new_fbgc_matrix_object>) [0 new_fbgc_matrix_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":204:27 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_matrix_object") [flags 0x41]  <function_decl 0x7f213e3fe100 new_fbgc_matrix_object>)
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
(insn 159 58 60 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-8 S8 A64])
        (reg/v/f:DI 0 ax [orig:102 <retval> ] [102])) "cmodules/fbgc_math.c":204:27 66 {*movdi_internal}
     (nil))
(debug_insn 60 159 61 6 (var_location:DI m (reg/v/f:DI 0 ax [orig:102 <retval> ] [102])) "cmodules/fbgc_math.c":204:27 -1
     (nil))
(debug_insn 61 60 62 6 (debug_marker) "cmodules/fbgc_math.c":205:2 -1
     (nil))
(insn 62 61 63 6 (parallel [
            (set (reg/v/f:DI 6 bp [orig:98 mc ] [98])
                (plus:DI (reg/v/f:DI 0 ax [orig:102 <retval> ] [102])
                    (const_int 18 [0x12])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":205:11 191 {*adddi_1}
     (nil))
(debug_insn 63 62 64 6 (var_location:DI mc (reg/v/f:DI 6 bp [orig:98 mc ] [98])) "cmodules/fbgc_math.c":205:11 -1
     (nil))
(debug_insn 64 63 65 6 (debug_marker) "cmodules/fbgc_math.c":206:2 -1
     (nil))
(debug_insn 65 64 66 6 (debug_marker) "cmodules/fbgc_math.c":206:6 -1
     (nil))
(debug_insn 66 65 67 6 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(debug_insn 67 66 68 6 (debug_marker) "cmodules/fbgc_math.c":206:20 -1
     (nil))
(insn 68 67 69 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 42 r14 [orig:96 row ] [96])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":206:2 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 69 68 70 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 113)
            (pc))) "cmodules/fbgc_math.c":206:2 659 {*jcc}
     (int_list:REG_BR_PROB 118111604 (nil))
 -> 113)
;;  succ:       7 [89.0% (guessed)]  count:12992275 (estimated locally) (FALLTHRU)
;;              14 [11.0% (guessed)]  count:1605787 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; live  out 	 6 [bp] 7 [sp] 41 [r13] 42 [r14]

;; basic block 7, loop depth 0, count 12992275 (estimated locally), maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [89.0% (guessed)]  count:12992275 (estimated locally) (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; lr  use 	 7 [sp] 41 [r13]
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
(note 70 69 71 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 41 r13 [orig:97 col ] [97])
            (const_int 0 [0]))) 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 72 71 147 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 123)
            (pc))) 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 123)
;;  succ:       12 [89.0% (guessed)]  count:11563125 (estimated locally)
;;              8 [11.0% (guessed)]  count:1429150 (estimated locally) (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; live  out 	 6 [bp] 7 [sp] 41 [r13] 42 [r14]

;; basic block 8, loop depth 0, count 1429150 (estimated locally), maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [11.0% (guessed)]  count:1429150 (estimated locally) (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 147 72 148 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(jump_insn 148 147 149 8 (set (pc)
        (label_ref 113)) 660 {jump}
     (nil)
 -> 113)
;;  succ:       14 [always]  count:1429150 (estimated locally)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 149 148 90)
;; basic block 9, loop depth 0, count 955630224 (estimated locally), maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [89.0% (guessed)]  count:850510900 (estimated locally) (DFS_BACK)
;;              13 [always]  count:105119324 (estimated locally)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  gen 	 0 [ax] 2 [cx] 17 [flags] 20 [xmm0] 43 [r15]
;; live  kill	 17 [flags]
(code_label 90 149 76 9 19 (nil) [2 uses])
(note 76 90 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(debug_insn 77 76 78 9 (var_location:SI j (const_int 0 [0])) -1
     (nil))
(debug_insn 78 77 79 9 (debug_marker) "cmodules/fbgc_math.c":208:4 -1
     (nil))
(call_insn 79 78 80 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rand") [flags 0x41]  <function_decl 0x7f213e5e7600 rand>) [0 rand S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":208:18 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("rand") [flags 0x41]  <function_decl 0x7f213e5e7600 rand>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(note 80 79 81 9 NOTE_INSN_DELETED)
(insn 81 80 82 9 (set (reg:DI 2 cx [orig:106 ivtmp.43 ] [106])
        (zero_extend:DI (reg:SI 43 r15 [orig:100 ivtmp.43 ] [100]))) "cmodules/fbgc_math.c":208:12 114 {*zero_extendsidi2}
     (nil))
(insn 82 81 84 9 (set (reg:DF 20 xmm0 [107])
        (float:DF (reg:SI 0 ax [119]))) "cmodules/fbgc_math.c":208:25 172 {*floatsidf2}
     (nil))
(insn 84 82 85 9 (set (reg:DF 20 xmm0 [108])
        (div:DF (reg:DF 20 xmm0 [107])
            (mem/u/c:DF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S8 A64]))) "cmodules/fbgc_math.c":208:25 822 {*fop_df_1}
     (expr_list:REG_EQUIV (mem:DF (plus:DI (mult:DI (reg:DI 2 cx [orig:106 ivtmp.43 ] [106])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 6 bp [orig:98 mc ] [98])) [2 *_15+0 S8 A64])
        (nil)))
(insn 85 84 86 9 (set (mem:DF (plus:DI (mult:DI (reg:DI 2 cx [orig:106 ivtmp.43 ] [106])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 6 bp [orig:98 mc ] [98])) [2 *_15+0 S8 A64])
        (reg:DF 20 xmm0 [108])) "cmodules/fbgc_math.c":208:16 111 {*movdf_internal}
     (nil))
(debug_insn 86 85 87 9 (debug_marker) "cmodules/fbgc_math.c":207:28 -1
     (nil))
(debug_insn 87 86 88 9 (var_location:SI j (const_int 1 [0x1])) -1
     (nil))
(debug_insn 88 87 89 9 (debug_marker) "cmodules/fbgc_math.c":207:21 -1
     (nil))
(insn 89 88 91 9 (parallel [
            (set (reg:SI 43 r15 [orig:100 ivtmp.43 ] [100])
                (plus:SI (reg:SI 43 r15 [orig:100 ivtmp.43 ] [100])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 190 {*addsi_1}
     (nil))
(insn 91 89 92 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 3 bx [orig:101 ivtmp.49 ] [101])
            (reg:SI 43 r15 [orig:100 ivtmp.43 ] [100]))) "cmodules/fbgc_math.c":207:3 11 {*cmpsi_1}
     (nil))
(jump_insn 92 91 93 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 90)
            (pc))) "cmodules/fbgc_math.c":207:3 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 90)
;;  succ:       9 [89.0% (guessed)]  count:850510900 (estimated locally) (DFS_BACK)
;;              10 [11.0% (guessed)]  count:105119324 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]

;; basic block 10, loop depth 0, count 105119325 (estimated locally), maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [11.0% (guessed)]  count:105119324 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;; lr  use 	 3 [bx] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;; lr  def 	 3 [bx] 17 [flags] 40 [r12]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;; live  gen 	 3 [bx] 17 [flags] 40 [r12]
;; live  kill	 17 [flags]
(note 93 92 94 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(debug_insn 94 93 95 10 (debug_marker) "cmodules/fbgc_math.c":206:27 -1
     (nil))
(insn 95 94 96 10 (parallel [
            (set (reg/v:SI 40 r12 [orig:99 i ] [99])
                (plus:SI (reg/v:SI 40 r12 [orig:99 i ] [99])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":206:27 190 {*addsi_1}
     (nil))
(debug_insn 96 95 97 10 (var_location:SI i (reg/v:SI 40 r12 [orig:99 i ] [99])) -1
     (nil))
(debug_insn 97 96 98 10 (debug_marker) "cmodules/fbgc_math.c":206:20 -1
     (nil))
(insn 98 97 99 10 (parallel [
            (set (reg:SI 3 bx [orig:101 ivtmp.49 ] [101])
                (plus:SI (reg:SI 3 bx [orig:101 ivtmp.49 ] [101])
                    (reg/v:SI 41 r13 [orig:97 col ] [97])))
            (clobber (reg:CC 17 flags))
        ]) 190 {*addsi_1}
     (nil))
(insn 99 98 100 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 42 r14 [orig:96 row ] [96])
            (reg/v:SI 40 r12 [orig:99 i ] [99]))) "cmodules/fbgc_math.c":206:2 11 {*cmpsi_1}
     (nil))
(jump_insn 100 99 150 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 101)
            (pc))) "cmodules/fbgc_math.c":206:2 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 101)
;;  succ:       13 [89.0% (guessed)]  count:93556199 (estimated locally) (DFS_BACK)
;;              11 [11.0% (guessed)]  count:11563126 (estimated locally) (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]

;; basic block 11, loop depth 0, count 11563126 (estimated locally), maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [11.0% (guessed)]  count:11563126 (estimated locally) (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 150 100 151 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(jump_insn 151 150 152 11 (set (pc)
        (label_ref 113)) 660 {jump}
     (nil)
 -> 113)
;;  succ:       14 [always]  count:11563126 (estimated locally) (LOOP_EXIT)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 152 151 123)
;; basic block 12, loop depth 0, count 11563125 (estimated locally), maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [89.0% (guessed)]  count:11563125 (estimated locally)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; lr  use 	 7 [sp] 41 [r13]
;; lr  def 	 3 [bx] 40 [r12]
;; live  in  	 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; live  gen 	 3 [bx] 40 [r12]
;; live  kill	
(code_label 123 152 122 12 21 (nil) [1 uses])
(note 122 123 6 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 6 122 7 12 (set (reg:SI 3 bx [orig:101 ivtmp.49 ] [101])
        (reg/v:SI 41 r13 [orig:97 col ] [97])) "cmodules/fbgc_math.c":206:2 67 {*movsi_internal}
     (nil))
(insn 7 6 128 12 (set (reg/v:SI 40 r12 [orig:99 i ] [99])
        (const_int 0 [0])) "cmodules/fbgc_math.c":206:13 67 {*movsi_internal}
     (nil))
(note 128 7 101 12 NOTE_INSN_DELETED)
;;  succ:       13 [always]  count:11563125 (estimated locally) (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]

;; basic block 13, loop depth 0, count 105119324 (estimated locally), maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [always]  count:11563125 (estimated locally) (FALLTHRU)
;;              10 [89.0% (guessed)]  count:93556199 (estimated locally) (DFS_BACK)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;; lr  use 	 3 [bx] 7 [sp] 41 [r13]
;; lr  def 	 17 [flags] 43 [r15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;; live  gen 	 43 [r15]
;; live  kill	 17 [flags]
(code_label 101 128 102 13 18 (nil) [1 uses])
(note 102 101 103 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(debug_insn 103 102 104 13 (var_location:SI i (reg/v:SI 40 r12 [orig:99 i ] [99])) -1
     (nil))
(debug_insn 104 103 105 13 (var_location:SI j (const_int 0 [0])) -1
     (nil))
(debug_insn 105 104 157 13 (debug_marker) "cmodules/fbgc_math.c":207:21 -1
     (nil))
(insn 157 105 106 13 (set (reg:SI 43 r15 [orig:100 ivtmp.43 ] [100])
        (reg:SI 3 bx [orig:101 ivtmp.49 ] [101])) "cmodules/fbgc_math.c":208:8 67 {*movsi_internal}
     (nil))
(insn 106 157 153 13 (parallel [
            (set (reg:SI 43 r15 [orig:100 ivtmp.43 ] [100])
                (minus:SI (reg:SI 43 r15 [orig:100 ivtmp.43 ] [100])
                    (reg/v:SI 41 r13 [orig:97 col ] [97])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":208:8 246 {*subsi_1}
     (nil))
(jump_insn 153 106 154 13 (set (pc)
        (label_ref 90)) 660 {jump}
     (nil)
 -> 90)
;;  succ:       9 [always]  count:105119324 (estimated locally)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]

(barrier 154 153 113)
;; basic block 14, loop depth 0, count 22864923 (estimated locally), maybe hot
;;  prev block 13, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [45.3% (guessed)]  count:8266860 (estimated locally)
;;              6 [11.0% (guessed)]  count:1605787 (estimated locally)
;;              8 [always]  count:1429150 (estimated locally)
;;              11 [always]  count:11563126 (estimated locally) (LOOP_EXIT)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 113 154 116 14 14 (nil) [4 uses])
(note 116 113 114 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 114 116 115 14 (set (reg/i:DI 0 ax)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-8 S8 A64])) "cmodules/fbgc_math.c":212:1 66 {*movdi_internal}
     (nil))
(insn 115 114 155 14 (use (reg/i:DI 0 ax)) "cmodules/fbgc_math.c":212:1 -1
     (nil))
;;  succ:       EXIT [always]  count:22864923 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 155 115 0 NOTE_INSN_DELETED)

;; Function fbgc_randint (fbgc_randint, funcdef_no=65, decl_uid=5741, cgraph_uid=66, symbol_order=74)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-24, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 58:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (1) rBwBz {*call_value}
            1 Early clobber: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =a  (1) =&d  (2) 0  (3) rm {*divmodsi4}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (1) UBsBz {*sibcall_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 87:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 8
   Insn 88: point = 0, n_alt = -1
   Insn 87: point = 0, n_alt = 2
  BB 6
   Insn 104: point = 0, n_alt = -1
   Insn 61: point = 0, n_alt = 0
   Insn 60: point = 0, n_alt = 3
   Insn 59: point = 0, n_alt = 0
   Insn 58: point = 0, n_alt = 4
  BB 7
   Insn 79: point = 0, n_alt = 0
   Insn 78: point = 0, n_alt = -2
   Insn 77: point = 1, n_alt = 3
   Insn 76: point = 3, n_alt = 0
   Insn 98: point = 5, n_alt = -2
   Insn 74: point = 6, n_alt = 0
  BB 5
   Insn 101: point = 7, n_alt = -1
   Insn 44: point = 7, n_alt = -2
   Insn 97: point = 9, n_alt = -2
   Insn 43: point = 10, n_alt = 0
   Insn 42: point = 10, n_alt = -2
   Insn 41: point = 11, n_alt = 3
   Insn 38: point = 13, n_alt = -2
   Insn 96: point = 15, n_alt = -2
   Insn 37: point = 16, n_alt = 0
   Insn 36: point = 16, n_alt = 3
  BB 4
   Insn 33: point = 17, n_alt = -1
   Insn 32: point = 17, n_alt = 0
  BB 3
   Insn 99: point = 19, n_alt = -1
   Insn 5: point = 19, n_alt = 0
   Insn 25: point = 20, n_alt = -2
   Insn 95: point = 22, n_alt = -2
   Insn 24: point = 23, n_alt = 0
   Insn 23: point = 23, n_alt = 3
  BB 2
   Insn 20: point = 25, n_alt = -1
   Insn 19: point = 25, n_alt = 0
   Insn 13: point = 25, n_alt = 0
   Insn 12: point = 25, n_alt = 0
   Insn 11: point = 26, n_alt = -2
   Insn 94: point = 28, n_alt = -2
   Insn 10: point = 29, n_alt = 0
   Insn 3: point = 29, n_alt = -2
   Insn 93: point = 31, n_alt = -2
   Insn 2: point = 32, n_alt = -2
   Insn 92: point = 34, n_alt = -2
 r82: [25..26]
 r90: [19..19] [2..13]
 r91: [19..20] [4..7]
 r93: [23..32] [12..18]
 r94: [25..29] [17..18]
 r95: [10..11]
 r97: [2..4]
 r98: [3..3]
 r99: [0..1]
 r101: [33..34]
 r102: [30..31]
 r103: [27..28]
 r104: [21..22]
 r105: [14..15]
 r106: [8..9]
 r107: [4..5]
Compressing live ranges: from 35 to 28 - 80%
Ranges after the compression:
 r82: [20..21]
 r90: [16..16] [2..11]
 r91: [16..17] [4..5]
 r93: [20..25] [10..15]
 r94: [20..23] [14..15]
 r95: [8..9]
 r97: [2..4]
 r98: [3..3]
 r99: [0..1]
 r101: [26..27]
 r102: [24..25]
 r103: [22..23]
 r104: [18..19]
 r105: [12..13]
 r106: [6..7]
 r107: [4..5]

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #2: **********

  BB 8
   Insn 88: point = 0, n_alt = -1
   Insn 87: point = 0, n_alt = 2
  BB 6
   Insn 104: point = 0, n_alt = -1
   Insn 61: point = 0, n_alt = 0
   Insn 60: point = 0, n_alt = 3
   Insn 59: point = 0, n_alt = 0
   Insn 58: point = 0, n_alt = 4
  BB 7
   Insn 79: point = 0, n_alt = 0
   Insn 78: point = 0, n_alt = -2
   Insn 77: point = 1, n_alt = 3
   Insn 76: point = 3, n_alt = 0
   Insn 98: point = 5, n_alt = -2
   Insn 74: point = 6, n_alt = 0
  BB 5
   Insn 101: point = 7, n_alt = -1
   Insn 44: point = 7, n_alt = -2
   Insn 97: point = 9, n_alt = -2
   Insn 43: point = 10, n_alt = 0
   Insn 42: point = 10, n_alt = -2
   Insn 41: point = 11, n_alt = 3
   Insn 38: point = 13, n_alt = -2
   Insn 96: point = 15, n_alt = -2
   Insn 37: point = 16, n_alt = 0
   Insn 36: point = 16, n_alt = 3
  BB 4
   Insn 33: point = 17, n_alt = -1
   Insn 32: point = 17, n_alt = 0
  BB 3
   Insn 99: point = 19, n_alt = -1
   Insn 5: point = 19, n_alt = 0
   Insn 25: point = 20, n_alt = -2
   Insn 95: point = 22, n_alt = -2
   Insn 24: point = 23, n_alt = 0
   Insn 23: point = 23, n_alt = 3
  BB 2
   Insn 20: point = 25, n_alt = -1
   Insn 19: point = 25, n_alt = 0
   Insn 13: point = 25, n_alt = 0
   Insn 12: point = 25, n_alt = 0
   Insn 11: point = 26, n_alt = -2
   Insn 94: point = 28, n_alt = -2
   Insn 10: point = 29, n_alt = 0
   Insn 3: point = 29, n_alt = -2
   Insn 93: point = 31, n_alt = -2
   Insn 2: point = 32, n_alt = -2
   Insn 92: point = 34, n_alt = -2
 r82: [25..26]
 r90: [19..19] [2..13]
 r91: [19..20] [4..7]
 r93: [23..32] [12..18]
 r94: [25..29] [17..18]
 r95: [10..11]
 r97: [2..4]
 r98: [3..3]
 r99: [0..1]
 r101: [33..34]
 r102: [30..31]
 r103: [27..28]
 r104: [21..22]
 r105: [14..15]
 r106: [8..9]
 r107: [4..5]
Compressing live ranges: from 35 to 28 - 80%
Ranges after the compression:
 r82: [20..21]
 r90: [16..16] [2..11]
 r91: [16..17] [4..5]
 r93: [20..25] [10..15]
 r94: [20..23] [14..15]
 r95: [8..9]
 r97: [2..4]
 r98: [3..3]
 r99: [0..1]
 r101: [26..27]
 r102: [24..25]
 r103: [22..23]
 r104: [18..19]
 r105: [12..13]
 r106: [6..7]
 r107: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-24, prev_offset=0)
changing reg in insn 11
changing reg in insn 38
changing reg in insn 5
changing reg in insn 77
changing reg in insn 72
changing reg in insn 39
changing reg in insn 44
changing reg in insn 25
changing reg in insn 76
changing reg in insn 76
changing reg in insn 71
changing reg in insn 45
changing reg in insn 26
changing reg in insn 2
changing reg in insn 41
changing reg in insn 36
changing reg in insn 23
changing reg in insn 3
changing reg in insn 32
changing reg in insn 19
changing reg in insn 41
changing reg in insn 42
changing reg in insn 76
changing reg in insn 77
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 92
changing reg in insn 2
changing reg in insn 93
changing reg in insn 3
changing reg in insn 94
changing reg in insn 11
changing reg in insn 95
changing reg in insn 25
changing reg in insn 96
changing reg in insn 38
changing reg in insn 97
changing reg in insn 44
changing reg in insn 98
changing reg in insn 76
changing reg in insn 76
deleting insn with uid = 92.
deleting insn with uid = 93.
deleting insn with uid = 94.
deleting insn with uid = 12.
deleting insn with uid = 95.
deleting insn with uid = 96.
deleting insn with uid = 42.
deleting insn with uid = 97.
deleting insn with uid = 98.
deleting insn with uid = 78.


try_optimize_cfg iteration 1

Moved block 6 before 8 and merged.
Merging block 8 into block 6...
deleting insn with uid = 104.
changing bb of uid 87
  from 8 to 6
changing bb of uid 88
  from 8 to 6
Merged blocks 6 and 8.
Removing jump 101.
deleting insn with uid = 101.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 74.
verify found no changes in insn with uid = 79.
verify found no changes in insn with uid = 61.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 9 count 8 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 9 count 8 (    1)


fbgc_randint

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 40 [r12]
;;  ref usage 	r0={12d,9u} r1={10d,1u} r2={9d} r3={3d,7u} r4={10d,3u} r5={15d,8u} r6={1d,3u} r7={1d,15u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={12d,2u} r18={8d} r20={9d} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={9d} r37={9d} r38={8d} r39={8d} r40={2d,3u} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} 
;;    total ref usage 624{573d,51u,0e} in 61{53 regular + 8 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	
(note 7 1 90 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(debug_insn 90 7 2 2 (var_location:DI D#26 (reg:DI 5 di [ arg ])) -1
     (nil))
(insn 2 90 91 2 (set (reg/v/f:DI 6 bp [orig:93 arg ] [93])
        (reg:DI 5 di [101])) "cmodules/fbgc_math.c":147:1 66 {*movdi_internal}
     (nil))
(debug_insn 91 2 3 2 (var_location:SI D#27 (reg:SI 4 si [ argc ])) -1
     (nil))
(insn 3 91 4 2 (set (reg/v:SI 3 bx [orig:94 argc ] [94])
        (reg:SI 4 si [102])) "cmodules/fbgc_math.c":147:1 67 {*movsi_internal}
     (nil))
(note 4 3 9 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 9 4 10 2 (debug_marker) "cmodules/fbgc_math.c":149:2 -1
     (nil))
(call_insn 10 9 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("clock") [flags 0x41]  <function_decl 0x7f213e36da00 clock>) [0 clock S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":149:14 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("clock") [flags 0x41]  <function_decl 0x7f213e36da00 clock>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(insn 11 10 13 2 (set (reg:DI 5 di [orig:82 _1 ] [82])
        (reg:DI 0 ax [103])) "cmodules/fbgc_math.c":149:14 66 {*movdi_internal}
     (nil))
(call_insn 13 11 14 2 (call (mem:QI (symbol_ref:DI ("srand") [flags 0x41]  <function_decl 0x7f213e5e7700 srand>) [0 srand S1 A8])
        (const_int 0 [0])) "cmodules/fbgc_math.c":149:2 666 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("srand") [flags 0x41]  <function_decl 0x7f213e5e7700 srand>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(debug_insn 14 13 15 2 (debug_marker) "cmodules/fbgc_math.c":151:2 -1
     (nil))
(debug_insn 15 14 16 2 (var_location:SI min (const_int 0 [0])) "cmodules/fbgc_math.c":151:6 -1
     (nil))
(debug_insn 16 15 17 2 (debug_marker) "cmodules/fbgc_math.c":152:2 -1
     (nil))
(debug_insn 17 16 18 2 (var_location:SI max (const_int 0 [0])) "cmodules/fbgc_math.c":152:6 -1
     (nil))
(debug_insn 18 17 19 2 (debug_marker) "cmodules/fbgc_math.c":154:2 -1
     (nil))
(insn 19 18 20 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 3 bx [orig:94 argc ] [94])
            (const_int 1 [0x1]))) "cmodules/fbgc_math.c":154:4 11 {*cmpsi_1}
     (nil))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "cmodules/fbgc_math.c":154:4 659 {*jcc}
     (int_list:REG_BR_PROB 856416484 (nil))
 -> 29)
;;  succ:       3 [20.2% (guessed)]  count:217325344 (estimated locally) (FALLTHRU)
;;              4 [79.8% (guessed)]  count:856416480 (estimated locally)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 3, loop depth 0, count 217325345 (estimated locally), maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [20.2% (guessed)]  count:217325344 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 40 [r12]
;; live  kill	
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 22 21 23 3 (debug_marker) "cmodules/fbgc_math.c":155:3 -1
     (nil))
(insn 23 22 24 3 (set (reg:DI 5 di)
        (mem/f:DI (reg/v/f:DI 6 bp [orig:93 arg ] [93]) [3 *arg_20(D)+0 S8 A64])) "cmodules/fbgc_math.c":155:9 66 {*movdi_internal}
     (nil))
(call_insn 24 23 25 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f213e3db600 convert_fbgc_object_to_int>) [0 convert_fbgc_object_to_int S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":155:9 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f213e3db600 convert_fbgc_object_to_int>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 25 24 26 3 (set (reg/v:SI 3 bx [orig:91 max ] [91])
        (reg:SI 0 ax [104])) "cmodules/fbgc_math.c":155:9 67 {*movsi_internal}
     (nil))
(debug_insn 26 25 5 3 (var_location:SI max (reg/v:SI 3 bx [orig:91 max ] [91])) "cmodules/fbgc_math.c":155:9 -1
     (nil))
(insn 5 26 99 3 (set (reg/v:SI 40 r12 [orig:90 min ] [90])
        (const_int 0 [0])) "cmodules/fbgc_math.c":151:6 67 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(jump_insn 99 5 100 3 (set (pc)
        (label_ref 69)) 660 {jump}
     (nil)
 -> 69)
;;  succ:       7 [always]  count:217325345 (estimated locally)
;; lr  out 	 3 [bx] 7 [sp] 40 [r12]
;; live  out 	 3 [bx] 7 [sp] 40 [r12]

(barrier 100 99 29)
;; basic block 4, loop depth 0, count 856416480 (estimated locally), maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [79.8% (guessed)]  count:856416480 (estimated locally)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 29 100 30 4 29 (nil) [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 31 30 32 4 (debug_marker) "cmodules/fbgc_math.c":157:7 -1
     (nil))
(insn 32 31 33 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 3 bx [orig:94 argc ] [94])
            (const_int 2 [0x2]))) "cmodules/fbgc_math.c":157:9 11 {*cmpsi_1}
     (nil))
(jump_insn 33 32 34 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) "cmodules/fbgc_math.c":157:9 659 {*jcc}
     (int_list:REG_BR_PROB 311385132 (nil))
 -> 48)
;;  succ:       5 [71.0% (guessed)]  count:608055702 (estimated locally) (FALLTHRU)
;;              6 [29.0% (guessed)]  count:248360778 (estimated locally)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 5, loop depth 0, count 608055701 (estimated locally), maybe hot
;;  prev block 4, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [71.0% (guessed)]  count:608055702 (estimated locally) (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 40 [r12]
;; live  kill	
(note 34 33 35 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(debug_insn 35 34 36 5 (debug_marker) "cmodules/fbgc_math.c":158:3 -1
     (nil))
(insn 36 35 37 5 (set (reg:DI 5 di)
        (mem/f:DI (reg/v/f:DI 6 bp [orig:93 arg ] [93]) [3 *arg_20(D)+0 S8 A64])) "cmodules/fbgc_math.c":158:9 66 {*movdi_internal}
     (nil))
(call_insn 37 36 38 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f213e3db600 convert_fbgc_object_to_int>) [0 convert_fbgc_object_to_int S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":158:9 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f213e3db600 convert_fbgc_object_to_int>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 38 37 39 5 (set (reg/v:SI 40 r12 [orig:90 min ] [90])
        (reg:SI 0 ax [105])) "cmodules/fbgc_math.c":158:9 67 {*movsi_internal}
     (nil))
(debug_insn 39 38 40 5 (var_location:SI min (reg/v:SI 40 r12 [orig:90 min ] [90])) "cmodules/fbgc_math.c":158:9 -1
     (nil))
(debug_insn 40 39 41 5 (debug_marker) "cmodules/fbgc_math.c":159:3 -1
     (nil))
(insn 41 40 43 5 (set (reg/f:DI 5 di [orig:95 MEM[(struct fbgc_object * *)arg_20(D) + 8B] ] [95])
        (mem/f:DI (plus:DI (reg/v/f:DI 6 bp [orig:93 arg ] [93])
                (const_int 8 [0x8])) [3 MEM[(struct fbgc_object * *)arg_20(D) + 8B]+0 S8 A64])) "cmodules/fbgc_math.c":159:9 66 {*movdi_internal}
     (nil))
(call_insn 43 41 44 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f213e3db600 convert_fbgc_object_to_int>) [0 convert_fbgc_object_to_int S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":159:9 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_int") [flags 0x41]  <function_decl 0x7f213e3db600 convert_fbgc_object_to_int>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 44 43 45 5 (set (reg/v:SI 3 bx [orig:91 max ] [91])
        (reg:SI 0 ax [106])) "cmodules/fbgc_math.c":159:9 67 {*movsi_internal}
     (nil))
(debug_insn 45 44 69 5 (var_location:SI max (reg/v:SI 3 bx [orig:91 max ] [91])) "cmodules/fbgc_math.c":159:9 -1
     (nil))
;;  succ:       7 [always]  count:608055701 (estimated locally) (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 40 [r12]
;; live  out 	 3 [bx] 7 [sp] 40 [r12]

;; basic block 7, loop depth 0, count 825381046 (estimated locally), maybe hot
;;  prev block 5, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [always]  count:217325345 (estimated locally)
;;              5 [always]  count:608055701 (estimated locally) (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 40 [r12]
;; lr  use 	 3 [bx] 7 [sp] 40 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 3 [bx] 7 [sp] 40 [r12]
;; live  gen 	 0 [ax] 1 [dx] 5 [di]
;; live  kill	 17 [flags]
(code_label 69 45 70 7 30 (nil) [1 uses])
(note 70 69 71 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(debug_insn 71 70 72 7 (var_location:SI max (reg/v:SI 3 bx [orig:91 max ] [91])) -1
     (nil))
(debug_insn 72 71 73 7 (var_location:SI min (reg/v:SI 40 r12 [orig:90 min ] [90])) -1
     (nil))
(debug_insn 73 72 74 7 (debug_marker) "cmodules/fbgc_math.c":166:2 -1
     (nil))
(call_insn 74 73 75 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rand") [flags 0x41]  <function_decl 0x7f213e5e7600 rand>) [0 rand S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":166:29 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("rand") [flags 0x41]  <function_decl 0x7f213e5e7600 rand>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(note 75 74 76 7 NOTE_INSN_DELETED)
(insn 76 75 77 7 (parallel [
            (set (reg:SI 0 ax [98])
                (div:SI (reg:SI 0 ax [107])
                    (reg/v:SI 3 bx [orig:91 max ] [91])))
            (set (reg:SI 1 dx [97])
                (mod:SI (reg:SI 0 ax [107])
                    (reg/v:SI 3 bx [orig:91 max ] [91])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":166:36 351 {*divmodsi4}
     (nil))
(insn 77 76 79 7 (parallel [
            (set (reg:SI 5 di [99])
                (plus:SI (reg:SI 1 dx [97])
                    (reg/v:SI 40 r12 [orig:90 min ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":166:9 190 {*addsi_1}
     (nil))
(call_insn/j 79 77 80 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_int_object") [flags 0x41]  <function_decl 0x7f213e3ed500 new_fbgc_int_object>) [0 new_fbgc_int_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":166:9 681 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_int_object") [flags 0x41]  <function_decl 0x7f213e3ed500 new_fbgc_int_object>)
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:       EXIT [always]  count:825381046 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 80 79 48)
;; basic block 6, loop depth 0, count 248360779 (estimated locally), maybe hot
;;  prev block 7, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [29.0% (guessed)]  count:248360778 (estimated locally)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
(code_label 48 80 49 6 31 (nil) [1 uses])
(note 49 48 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 50 49 51 6 (var_location:DI D#7 (debug_expr:DI D#26)) -1
     (nil))
(debug_insn 51 50 52 6 (var_location:SI D#8 (debug_expr:SI D#27)) -1
     (nil))
(debug_insn 52 51 53 6 (debug_marker:BLK) "cmodules/fbgc_math.c":146:1 -1
     (nil))
(debug_insn 53 52 54 6 (var_location:DI D#10 (debug_expr:DI D#7)) -1
     (nil))
(debug_insn 54 53 55 6 (var_location:DI arg (debug_expr:DI D#10)) -1
     (nil))
(debug_insn 55 54 56 6 (var_location:SI D#9 (debug_expr:SI D#8)) -1
     (nil))
(debug_insn 56 55 57 6 (var_location:SI argc (debug_expr:SI D#9)) -1
     (nil))
(debug_insn 57 56 58 6 (debug_marker) "cmodules/fbgc_math.c":162:3 -1
     (nil))
(insn 58 57 59 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f213e0747e0 *.LC6>)) "cmodules/fbgc_math.c":162:3 66 {*movdi_internal}
     (nil))
(insn 59 58 60 6 (set (reg:SI 5 di)
        (const_int 100 [0x64])) "cmodules/fbgc_math.c":162:3 67 {*movsi_internal}
     (nil))
(insn 60 59 61 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_math.c":162:3 69 {*movqi_internal}
     (nil))
(call_insn 61 60 62 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f213e3d6d00 cprintf>) [0 cprintf S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":162:3 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("cprintf") [flags 0x41]  <function_decl 0x7f213e3d6d00 cprintf>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(debug_insn 62 61 63 6 (debug_marker) "cmodules/fbgc_math.c":163:3 -1
     (nil))
(debug_insn 63 62 64 6 (var_location:SI min (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 64 63 65 6 (var_location:SI max (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 65 64 66 6 (var_location:DI arg (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 66 65 87 6 (var_location:SI argc (clobber (const_int 0 [0]))) -1
     (nil))
(insn 87 66 88 6 (set (reg/i:DI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_math.c":167:1 66 {*movdi_internal}
     (nil))
(insn 88 87 106 6 (use (reg/i:DI 0 ax)) "cmodules/fbgc_math.c":167:1 -1
     (nil))
;;  succ:       EXIT [always]  count:248360779 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 106 88 0 NOTE_INSN_DELETED)

;; Function c_cos (c_cos, funcdef_no=57, decl_uid=5753, cgraph_uid=58, symbol_order=59)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=619,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=15,overall=1,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 3:  (0) m  (1) v {*movdf_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 12:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 18:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=616,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=613,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=14,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=17,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=18,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=19,overall=11,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=20,overall=607,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=21,overall=616,losers=2 -- refuse
	 Choosing alt 14 in insn 19:  (0) v  (1) m {*movdf_internal}
      Creating newreg=142 from oldreg=91, assigning class ALL_SSE_REGS to r142
   19: r142:DF=[frame:DI+0x8]
    Inserting insn reload after:
  135: r91:DF=r142:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=616,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=15,overall=2,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 135:  (0) m  (1) v {*movdf_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) v  (1) vm {movv2df_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            alt=1,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=1207,losers=1 -- refuse
	 Choosing alt 0 in insn 38:  (0) =Yv  (1) 0  (2) Yvm {*absnegdf2}
      Creating newreg=143 from oldreg=110, assigning class SSE_REGS to r143
   38: {r143:DF=-r143:DF;use r111:V2DF;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  136: r143:DF=r107:DF
    Inserting insn reload after:
  137: r110:DF=r143:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 136:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=622,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=616,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 62:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (1) rBwBz {*call_value}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=1207,losers=1 -- refuse
	 Choosing alt 0 in insn 70:  (0) =Yv  (1) 0  (2) Yvm {*absnegdf2}
      Creating newreg=144 from oldreg=106, assigning class SSE_REGS to r144
   70: {r144:DF=-r144:DF;use r111:V2DF;clobber flags:CC;}
      REG_DEAD r111:V2DF
      REG_DEAD r106:DF
      REG_UNUSED flags:CC
    Inserting insn reload before:
  138: r144:DF=r106:DF
    Inserting insn reload after:
  139: r112:DF=r144:DF

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 89:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=145 from oldreg=114, assigning class SSE_REGS to r145
   89: r145:DF=r145:DF*r90:DF
    Inserting insn reload before:
  140: r145:DF=r92:DF
    Inserting insn reload after:
  141: r114:DF=r145:DF

            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 90
	 Choosing alt 1 in insn 90:  (0) x  (1) 0  (2) xm {*fop_df_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 91:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 92:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
	 Choosing alt 1 in insn 93:  (0) x  (1) 0  (2) xm {*fop_df_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 95:  (0) x  (1) 0  (2) xm {*fop_df_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 96
	 Choosing alt 1 in insn 96:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=146 from oldreg=91, assigning class SSE_REGS to r146
      Making reload reg 146 for reg 91 optional
   96: r120:DF=r96:DF*r146:DF
      REG_DEAD r96:DF
      REG_DEAD r91:DF
    Inserting insn reload before:
  142: r146:DF=r91:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 142:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 97:  (0) x  (1) 0  (2) xm {*fop_df_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 117
	 Choosing alt 1 in insn 117:  (0) x  (1) 0  (2) xm {*fop_df_comm}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 2
   Insn 119: point = 0, n_alt = -1
   Insn 118: point = 0, n_alt = -1
   Insn 117: point = 0, n_alt = 1
   Insn 116: point = 1, n_alt = -2
   Insn 97: point = 2, n_alt = 1
   Insn 96: point = 4, n_alt = 1
   Insn 142: point = 6, n_alt = 14
   Insn 95: point = 8, n_alt = 1
   Insn 93: point = 10, n_alt = 1
   Insn 92: point = 12, n_alt = 14
   Insn 91: point = 13, n_alt = 1
   Insn 90: point = 15, n_alt = 1
   Insn 141: point = 17, n_alt = -2
	Hard reg 20 is preferable by r145 with profit 1000
   Insn 89: point = 19, n_alt = 1
   Insn 140: point = 20, n_alt = -2
	Hard reg 20 is preferable by r145 with profit 1000
	Hard reg 22 is preferable by r145 with profit 1000
   Insn 133: point = 21, n_alt = -2
   Insn 72: point = 22, n_alt = 0
   Insn 71: point = 22, n_alt = -2
   Insn 139: point = 23, n_alt = -2
	Hard reg 20 is preferable by r144 with profit 1000
   Insn 70: point = 25, n_alt = 0
   Insn 138: point = 27, n_alt = -2
	Hard reg 20 is preferable by r144 with profit 1000
	Hard reg 23 is preferable by r144 with profit 1000
   Insn 64: point = 29, n_alt = -2
   Insn 132: point = 31, n_alt = -2
   Insn 63: point = 32, n_alt = 0
   Insn 62: point = 32, n_alt = 14
   Insn 41: point = 33, n_alt = -2
   Insn 131: point = 35, n_alt = -2
   Insn 40: point = 36, n_alt = 0
   Insn 39: point = 36, n_alt = -2
   Insn 137: point = 37, n_alt = -2
	Hard reg 20 is preferable by r143 with profit 1000
   Insn 38: point = 39, n_alt = 0
   Insn 136: point = 40, n_alt = 14
   Insn 37: point = 41, n_alt = 2
   Insn 135: point = 42, n_alt = 15
   Insn 19: point = 44, n_alt = 14
   Insn 18: point = 45, n_alt = 14
   Insn 17: point = 46, n_alt = 0
   Insn 16: point = 46, n_alt = -2
   Insn 15: point = 46, n_alt = -2
   Insn 14: point = 47, n_alt = -2
   Insn 13: point = 48, n_alt = -2
   Insn 12: point = 49, n_alt = 3
   Insn 3: point = 50, n_alt = 15
   Insn 130: point = 52, n_alt = -2
   Insn 2: point = 53, n_alt = -2
   Insn 129: point = 55, n_alt = -2
 r90: [16..45]
 r91: [7..42]
 r92: [9..29]
 r96: [5..33]
 r106: [28..53]
 r107: [32..50]
 r108: [46..49]
 r109: [47..48]
 r110: [36..37]
 r111: [26..41]
 r112: [22..23]
 r114: [14..17]
 r115: [14..15]
 r116: [11..13]
 r117: [1..10]
 r118: [0..12]
 r119: [3..8]
 r120: [3..4]
 r121: [0..2]
 r137: [54..55]
 r138: [51..52]
 r139: [34..35]
 r140: [30..31]
 r141: [9..21]
 r142: [43..44]
 r143: [38..40]
 r144: [24..27]
 r145: [18..20]
 r146: [5..6]
Compressing live ranges: from 56 to 42 - 75%
Ranges after the compression:
 r90: [14..35]
 r91: [6..33]
 r92: [8..23]
 r96: [4..27]
 r106: [22..39]
 r107: [26..37]
 r108: [36..37]
 r109: [36..37]
 r110: [30..31]
 r111: [20..33]
 r112: [18..19]
 r114: [12..15]
 r115: [12..13]
 r116: [10..11]
 r117: [0..9]
 r118: [0..11]
 r119: [2..7]
 r120: [2..3]
 r121: [0..1]
 r137: [40..41]
 r138: [38..39]
 r139: [28..29]
 r140: [24..25]
 r141: [8..17]
 r142: [34..35]
 r143: [32..33]
 r144: [20..21]
 r145: [16..17]
 r146: [4..5]

********** Inheritance #1: **********

EBB 2
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=147, assigning class NO_REGS to save r147
    Split reuse change 92->147:
   65: debug r => r147:DF
    Split reuse change 92->147:
   67: debug res$real => r147:DF*r90:DF
    Split reuse change 92->147:
   74: debug res$imag => r147:DF*r141:DF
    Split reuse change 92->147:
   82: debug u2$real => r147:DF*r90:DF
    Split reuse change 92->147:
   83: debug u2$imag => r147:DF*r141:DF
    Split reuse change 92->147:
   85: debug u1$real => r147:DF*r90:DF+r96:DF*r90:DF*5.0e-1
    Split reuse change 92->147:
   87: debug u1$imag => r147:DF*r141:DF+r91:DF*r96:DF*5.0e-1
  140: r145:DF=r92:DF
    Add reg<-save before:
  144: r92:DF=r147:DF

   64: r92:DF=r140:DF
      REG_DEAD r140:DF
    Add save<-reg after:
  143: r147:DF=r92:DF

	  ))))))))))))))))))))))))))))))))))))))))))))))))
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=148, assigning class NO_REGS to save r148
    Split reuse change 96->148:
   42: debug r => r148:DF
    Split reuse change 96->148:
   45: debug res$real => r148:DF*r90:DF
    Split reuse change 96->148:
   47: debug res$imag => r91:DF*r148:DF
    Split reuse change 96->148:
   55: debug u1$real => r148:DF*r90:DF
    Split reuse change 96->148:
   56: debug u1$imag => r91:DF*r148:DF
    Split reuse change 96->148:
   85: debug u1$real => r147:DF*r90:DF+r148:DF*r90:DF*5.0e-1
    Split reuse change 96->148:
   87: debug u1$imag => r147:DF*r141:DF+r91:DF*r148:DF*5.0e-1
   90: r115:DF=r90:DF*r96:DF
      REG_DEAD r90:DF
    Add reg<-save before:
  146: r96:DF=r148:DF

   41: r96:DF=r139:DF
      REG_DEAD r139:DF
    Add save<-reg after:
  145: r148:DF=r96:DF

	  ))))))))))))))))))))))))))))))))))))))))))))))))
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=149, assigning class NO_REGS to save r149
   70: {r144:DF=-r144:DF;use r111:V2DF;clobber flags:CC;}
      REG_DEAD r111:V2DF
      REG_UNUSED flags:CC
    Add reg<-save before:
  148: r111:V2DF=r149:V2DF

   38: {r143:DF=-r143:DF;use r111:V2DF;clobber flags:CC;}
      REG_UNUSED flags:CC
    Add save<-reg after:
  147: r149:V2DF=r111:V2DF

	  ))))))))))))))))))))))))))))))))))))))))))))))))
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=150 from oldreg=107, assigning class SSE_REGS to inheritance r150
    Original reg change 107->150 (bb2):
  136: r143:DF=r150:DF
    Add inheritance<-original before:
  149: r150:DF=r107:DF

    Inheritance reuse change 107->150 (bb2):
   62: xmm0:DF=r150:DF
      REG_DEAD r150:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=151 from oldreg=91, assigning class ALL_SSE_REGS to inheritance r151
    Original reg change 91->151 (bb2):
  135: r151:DF=r142:DF
      REG_DEAD r142:DF
    Add original<-inheritance after:
  150: r91:DF=r151:DF

    Inheritance reuse change 91->151 (bb2):
   47: debug res$imag => r151:DF*r148:DF
    Inheritance reuse change 91->151 (bb2):
   56: debug u1$imag => r151:DF*r148:DF
    Inheritance reuse change 91->151 (bb2):
   87: debug u1$imag => r147:DF*r141:DF+r151:DF*r148:DF*5.0e-1
    Inheritance reuse change 91->151 (bb2):
  142: r146:DF=r151:DF
      REG_DEAD r151:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=152, assigning class NO_REGS to save r152
    Split reuse change 90->152:
   45: debug res$real => r148:DF*r152:DF
    Split reuse change 90->152:
   55: debug u1$real => r148:DF*r152:DF
    Split reuse change 90->152:
   67: debug res$real => r147:DF*r152:DF
    Split reuse change 90->152:
   82: debug u2$real => r147:DF*r152:DF
    Split reuse change 90->152:
   85: debug u1$real => r147:DF*r152:DF+r148:DF*r152:DF*5.0e-1
   89: r145:DF=r145:DF*r90:DF
    Add reg<-save before:
  152: r90:DF=r152:DF

   18: r90:DF=[frame:DI]
    Add save<-reg after:
  151: r152:DF=r90:DF

	  ))))))))))))))))))))))))))))))))))))))))))))))))
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=153, assigning class NO_REGS to save r153
    Split reuse change 106->153:
   20: debug z$real => r153:DF
    Split reuse change 106->153:
   27: debug u1$imag => r153:DF
    Split reuse change 106->153:
   31: debug u2$imag => -r153:DF
    Split reuse change 106->153:
   34: debug z$imag => r153:DF
    Split reuse change 106->153:
   59: debug z$imag => -r153:DF
  138: r144:DF=r106:DF
      REG_DEAD r106:DF
    Add reg<-save before:
  154: r106:DF=r153:DF

   16: xmm0:DF=r106:DF
    Add save<-reg after:
  153: r153:DF=r106:DF

	  ))))))))))))))))))))))))))))))))))))))))))))))))
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=154 from oldreg=107, assigning class SSE_REGS to inheritance r154
    Original reg change 107->154 (bb2):
    3: r154:DF=r138:DF
      REG_DEAD r138:DF
    Add original<-inheritance after:
  155: r107:DF=r154:DF

    Inheritance reuse change 107->154 (bb2):
   22: debug z$imag => r154:DF
    Inheritance reuse change 107->154 (bb2):
   25: debug u1$real => -r154:DF
    Inheritance reuse change 107->154 (bb2):
   29: debug u2$real => r154:DF
    Inheritance reuse change 107->154 (bb2):
  149: r150:DF=r154:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   150: r91:DF=r151:DF
deleting insn with uid = 150.
	    Removing dead insn:
   155: r107:DF=r154:DF
deleting insn with uid = 155.

********** Pseudo live ranges #2: **********

  BB 2
   Insn 119: point = 0, n_alt = -1
   Insn 118: point = 0, n_alt = -1
   Insn 117: point = 0, n_alt = 1
   Insn 116: point = 1, n_alt = -2
   Insn 97: point = 2, n_alt = 1
   Insn 96: point = 4, n_alt = 1
   Insn 142: point = 6, n_alt = 14
	   Creating copy r146<-r151@1000
   Insn 95: point = 8, n_alt = 1
   Insn 93: point = 10, n_alt = 1
   Insn 92: point = 12, n_alt = 14
   Insn 91: point = 13, n_alt = 1
   Insn 90: point = 15, n_alt = 1
   Insn 146: point = 17, n_alt = -1
	Hard reg 24 is preferable by r148 with profit 1000
   Insn 141: point = 19, n_alt = -2
	Hard reg 20 is preferable by r145 with profit 1000
   Insn 89: point = 21, n_alt = 1
   Insn 152: point = 22, n_alt = -1
	Hard reg 25 is preferable by r152 with profit 1000
   Insn 140: point = 24, n_alt = -2
	Hard reg 20 is preferable by r145 with profit 1000
	Hard reg 22 is preferable by r145 with profit 1000
   Insn 144: point = 25, n_alt = -1
	Hard reg 22 is preferable by r147 with profit 1000
   Insn 133: point = 27, n_alt = -2
   Insn 72: point = 28, n_alt = 0
   Insn 71: point = 28, n_alt = -2
   Insn 139: point = 29, n_alt = -2
	Hard reg 20 is preferable by r144 with profit 1000
   Insn 70: point = 31, n_alt = 0
   Insn 148: point = 33, n_alt = -1
	Hard reg 21 is preferable by r149 with profit 1000
   Insn 138: point = 35, n_alt = -2
	Hard reg 20 is preferable by r144 with profit 1000
	Hard reg 23 is preferable by r144 with profit 1000
   Insn 154: point = 37, n_alt = -1
	Hard reg 23 is preferable by r153 with profit 1000
   Insn 143: point = 39, n_alt = -1
	Hard reg 22 is preferable by r147 with profit 2000
   Insn 64: point = 41, n_alt = -2
   Insn 132: point = 43, n_alt = -2
   Insn 63: point = 44, n_alt = 0
   Insn 62: point = 44, n_alt = 14
	Hard reg 20 is preferable by r150 with profit 1000
   Insn 145: point = 45, n_alt = -1
	Hard reg 24 is preferable by r148 with profit 2000
   Insn 41: point = 47, n_alt = -2
   Insn 131: point = 49, n_alt = -2
   Insn 40: point = 50, n_alt = 0
   Insn 39: point = 50, n_alt = -2
   Insn 137: point = 51, n_alt = -2
	Hard reg 20 is preferable by r143 with profit 1000
   Insn 147: point = 53, n_alt = -1
	Hard reg 21 is preferable by r149 with profit 2000
   Insn 38: point = 55, n_alt = 0
   Insn 136: point = 56, n_alt = 14
	   Creating copy r143<-r150@1000
   Insn 149: point = 57, n_alt = -1
	   Creating copy r150<-r154@1000
   Insn 37: point = 59, n_alt = 2
   Insn 135: point = 60, n_alt = 15
	   Creating copy r142->r151@1000
   Insn 19: point = 62, n_alt = 14
   Insn 151: point = 63, n_alt = -1
	Hard reg 25 is preferable by r152 with profit 2000
   Insn 18: point = 65, n_alt = 14
   Insn 17: point = 66, n_alt = 0
   Insn 153: point = 66, n_alt = -1
	Hard reg 23 is preferable by r153 with profit 2000
   Insn 16: point = 68, n_alt = -2
   Insn 15: point = 68, n_alt = -2
   Insn 14: point = 69, n_alt = -2
   Insn 13: point = 70, n_alt = -2
   Insn 12: point = 71, n_alt = 3
   Insn 3: point = 72, n_alt = 15
	Hard reg 21 is preferable by r154 with profit 1000
   Insn 130: point = 74, n_alt = -2
   Insn 2: point = 75, n_alt = -2
   Insn 129: point = 77, n_alt = -2
 r90: [64..65] [16..22]
 r92: [40..41] [9..25]
 r96: [46..47] [5..17]
 r106: [67..75] [36..37]
 r108: [68..71]
 r109: [69..70]
 r110: [50..51]
 r111: [54..59] [32..33]
 r112: [28..29]
 r114: [14..19]
 r115: [14..15]
 r116: [11..13]
 r117: [1..10]
 r118: [0..12]
 r119: [3..8]
 r120: [3..4]
 r121: [0..2]
 r137: [76..77]
 r138: [73..74]
 r139: [48..49]
 r140: [42..43]
 r141: [9..27]
 r142: [61..62]
 r143: [52..56]
 r144: [30..35]
 r145: [20..24]
 r146: [5..6]
 r147: [26..39]
 r148: [18..45]
 r149: [34..53]
 r150: [44..57]
 r151: [7..60]
 r152: [23..63]
 r153: [38..66]
 r154: [58..72]
Compressing live ranges: from 78 to 62 - 79%
Ranges after the compression:
 r90: [54..55] [14..19]
 r92: [34..35] [8..21]
 r96: [40..41] [4..15]
 r106: [56..59] [30..31]
 r108: [56..57]
 r109: [56..57]
 r110: [44..45]
 r111: [48..51] [26..27]
 r112: [24..25]
 r114: [12..17]
 r115: [12..13]
 r116: [10..11]
 r117: [0..9]
 r118: [0..11]
 r119: [2..7]
 r120: [2..3]
 r121: [0..1]
 r137: [60..61]
 r138: [58..59]
 r139: [42..43]
 r140: [36..37]
 r141: [8..23]
 r142: [52..53]
 r143: [46..49]
 r144: [26..29]
 r145: [18..21]
 r146: [4..5]
 r147: [22..33]
 r148: [16..39]
 r149: [28..47]
 r150: [38..49]
 r151: [6..51]
 r152: [20..53]
 r153: [32..55]
 r154: [50..57]

********** Assignment #1: **********

	 Assigning to 150 (cl=SSE_REGS, orig=107, freq=3000, tfirst=143, tfreq=4000)...
	 Assigning to 154 (cl=SSE_REGS, orig=107, freq=2000, tfirst=143, tfreq=4000)...
	 Assigning to 143 (cl=SSE_REGS, orig=110, freq=3000, tfirst=143, tfreq=4000)...
	   Assign 26 to reload r143 (freq=3000)
	Hard reg 20 is preferable by r150 with profit 1000
	Hard reg 26 is preferable by r150 with profit 1000
	Hard reg 21 is preferable by r154 with profit 1000
	Hard reg 26 is preferable by r154 with profit 500
	 Assigning to 144 (cl=SSE_REGS, orig=106, freq=3000, tfirst=144, tfreq=3000)...
	   Assign 23 to reload r144 (freq=3000)
	 Assigning to 145 (cl=SSE_REGS, orig=114, freq=3000, tfirst=145, tfreq=3000)...
	   Assign 20 to reload r145 (freq=3000)
	 Assigning to 151 (cl=ALL_SSE_REGS, orig=91, freq=2000, tfirst=142, tfreq=2000)...
	 Assigning to 142 (cl=ALL_SSE_REGS, orig=91, freq=2000, tfirst=142, tfreq=2000)...
	   Assign 27 to reload r142 (freq=2000)
	Hard reg 27 is preferable by r151 with profit 1000
	Hard reg 27 is preferable by r146 with profit 500
	 Assigning to 146 (cl=SSE_REGS, orig=91, freq=2000, tfirst=142, tfreq=2000)...
	   Assign 27 to optional reload r146 (freq=2000)
	Hard reg 27 is preferable by r151 with profit 2000
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 3 (0.00%)
	     Keep split r147 (orig=r92)
	     Keep split r148 (orig=r96)
	     Keep split r149 (orig=r111)
	     Keep split r152 (orig=r90)
	     Keep split r153 (orig=r106)
Split 5 out of 5 (100.00%)
   Insn after restoring regs:
  142: r146:DF=r91:DF
      REG_DEAD r91:DF
   Insn after restoring regs:
   87: debug u1$imag => r147:DF*r141:DF+r91:DF*r148:DF*5.0e-1
   Insn after restoring regs:
   62: xmm0:DF=r107:DF
      REG_DEAD r107:DF
   Insn after restoring regs:
   56: debug u1$imag => r91:DF*r148:DF
   Insn after restoring regs:
   47: debug res$imag => r91:DF*r148:DF
   Insn after restoring regs:
  136: r143:DF=r107:DF
	   Removing inheritance:
  149: r150:DF=r154:DF
      REG_DEAD r154:DF
deleting insn with uid = 149.
   Insn after restoring regs:
   29: debug u2$real => r107:DF
   Insn after restoring regs:
   25: debug u1$real => -r107:DF
   Insn after restoring regs:
   22: debug z$imag => r107:DF
   Insn after restoring regs:
  135: r91:DF=r142:DF
      REG_DEAD r142:DF
   Insn after restoring regs:
    3: r107:DF=r138:DF
      REG_DEAD r138:DF
Remove optional reload reg 146
  Restoring original insn:
   96: r120:DF=r96:DF*r91:DF
      REG_DEAD r91:DF
      REG_DEAD r96:DF
  Deleting move 142
  142: r146:DF=r91:DF
      REG_DEAD r91:DF
deleting insn with uid = 142.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 96:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=155 from oldreg=91, assigning class SSE_REGS to r155
      Making reload reg 155 for reg 91 optional
   96: r120:DF=r96:DF*r155:DF
      REG_DEAD r91:DF
      REG_DEAD r96:DF
    Inserting insn reload before:
  156: r155:DF=r91:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 156:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=619,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=15,overall=1,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 153:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 154:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=619,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=15,overall=1,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 151:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 152:  (0) v  (1) m {*movdf_internal}
      Removing equiv init insn 147 (freq=1000)
  147: r149:V2DF=r111:V2DF
      REG_DEAD r111:V2DF
deleting insn with uid = 147.
Changing pseudo 149 in operand 1 of insn 148 on equiv [`*.LC7']
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 148:  (0) v  (1) vm {movv2df_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=619,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=15,overall=1,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 145:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 146:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=619,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=15,overall=1,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 143:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 144:  (0) v  (1) m {*movdf_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #3: **********

  BB 2
   Insn 119: point = 0, n_alt = -1
   Insn 118: point = 0, n_alt = -1
   Insn 117: point = 0, n_alt = 1
   Insn 116: point = 1, n_alt = -2
   Insn 97: point = 2, n_alt = 1
   Insn 96: point = 4, n_alt = 1
   Insn 156: point = 6, n_alt = 14
   Insn 95: point = 8, n_alt = 1
   Insn 93: point = 10, n_alt = 1
   Insn 92: point = 12, n_alt = 14
   Insn 91: point = 13, n_alt = 1
   Insn 90: point = 15, n_alt = 1
   Insn 146: point = 17, n_alt = 14
	Hard reg 24 is preferable by r148 with profit 1000
   Insn 141: point = 19, n_alt = -2
	Hard reg 20 is preferable by r145 with profit 1000
   Insn 89: point = 21, n_alt = 1
   Insn 152: point = 22, n_alt = 14
	Hard reg 25 is preferable by r152 with profit 1000
   Insn 140: point = 24, n_alt = -2
	Hard reg 20 is preferable by r145 with profit 1000
	Hard reg 22 is preferable by r145 with profit 1000
   Insn 144: point = 25, n_alt = 14
	Hard reg 22 is preferable by r147 with profit 1000
   Insn 133: point = 27, n_alt = -2
   Insn 72: point = 28, n_alt = 0
   Insn 71: point = 28, n_alt = -2
   Insn 139: point = 29, n_alt = -2
	Hard reg 20 is preferable by r144 with profit 1000
   Insn 70: point = 31, n_alt = 0
   Insn 148: point = 33, n_alt = 2
   Insn 138: point = 34, n_alt = -2
	Hard reg 20 is preferable by r144 with profit 1000
	Hard reg 23 is preferable by r144 with profit 1000
   Insn 154: point = 36, n_alt = 14
	Hard reg 23 is preferable by r153 with profit 1000
   Insn 143: point = 38, n_alt = 15
	Hard reg 22 is preferable by r147 with profit 2000
   Insn 64: point = 40, n_alt = -2
   Insn 132: point = 42, n_alt = -2
   Insn 63: point = 43, n_alt = 0
   Insn 62: point = 43, n_alt = 14
   Insn 145: point = 44, n_alt = 15
	Hard reg 24 is preferable by r148 with profit 2000
   Insn 41: point = 46, n_alt = -2
   Insn 131: point = 48, n_alt = -2
   Insn 40: point = 49, n_alt = 0
   Insn 39: point = 49, n_alt = -2
   Insn 137: point = 50, n_alt = -2
	Hard reg 20 is preferable by r143 with profit 1000
   Insn 38: point = 52, n_alt = 0
   Insn 136: point = 54, n_alt = 14
   Insn 37: point = 55, n_alt = 2
   Insn 135: point = 56, n_alt = 15
   Insn 19: point = 58, n_alt = 14
   Insn 151: point = 59, n_alt = 15
	Hard reg 25 is preferable by r152 with profit 2000
   Insn 18: point = 61, n_alt = 14
   Insn 17: point = 62, n_alt = 0
   Insn 153: point = 62, n_alt = 15
	Hard reg 23 is preferable by r153 with profit 2000
   Insn 16: point = 64, n_alt = -2
   Insn 15: point = 64, n_alt = -2
   Insn 14: point = 65, n_alt = -2
   Insn 13: point = 66, n_alt = -2
   Insn 12: point = 67, n_alt = 3
   Insn 3: point = 68, n_alt = 15
   Insn 130: point = 70, n_alt = -2
   Insn 2: point = 71, n_alt = -2
   Insn 129: point = 73, n_alt = -2
 r90: [60..61] [16..22]
 r91: [7..56]
 r92: [39..40] [9..25]
 r96: [45..46] [5..17]
 r106: [63..71] [35..36]
 r107: [43..68]
 r108: [64..67]
 r109: [65..66]
 r110: [49..50]
 r111: [53..55] [32..33]
 r112: [28..29]
 r114: [14..19]
 r115: [14..15]
 r116: [11..13]
 r117: [1..10]
 r118: [0..12]
 r119: [3..8]
 r120: [3..4]
 r121: [0..2]
 r137: [72..73]
 r138: [69..70]
 r139: [47..48]
 r140: [41..42]
 r141: [9..27]
 r142: [57..58]
 r143: [51..54]
 r144: [30..34]
 r145: [20..24]
 r147: [26..38]
 r148: [18..44]
 r152: [23..59]
 r153: [37..62]
 r155: [5..6]
Compressing live ranges: from 74 to 56 - 75%
Ranges after the compression:
 r90: [48..49] [14..19]
 r91: [6..45]
 r92: [32..33] [8..21]
 r96: [38..39] [4..15]
 r106: [50..53] [28..29]
 r107: [36..51]
 r108: [50..51]
 r109: [50..51]
 r110: [42..43]
 r111: [44..45] [26..27]
 r112: [24..25]
 r114: [12..17]
 r115: [12..13]
 r116: [10..11]
 r117: [0..9]
 r118: [0..11]
 r119: [2..7]
 r120: [2..3]
 r121: [0..1]
 r137: [54..55]
 r138: [52..53]
 r139: [40..41]
 r140: [34..35]
 r141: [8..23]
 r142: [46..47]
 r143: [44..45]
 r144: [26..27]
 r145: [18..21]
 r147: [22..31]
 r148: [16..37]
 r152: [20..47]
 r153: [30..49]
 r155: [4..5]

********** Inheritance #2: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=156 from oldreg=107, assigning class SSE_REGS to inheritance r156
    Original reg change 107->156 (bb2):
  136: r143:DF=r156:DF
    Add inheritance<-original before:
  157: r156:DF=r107:DF

    Inheritance reuse change 107->156 (bb2):
   62: xmm0:DF=r156:DF
      REG_DEAD r156:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=157 from oldreg=91, assigning class ALL_SSE_REGS to inheritance r157
    Original reg change 91->157 (bb2):
  135: r157:DF=r142:DF
      REG_DEAD r142:DF
    Add original<-inheritance after:
  158: r91:DF=r157:DF

    Inheritance reuse change 91->157 (bb2):
   47: debug res$imag => r157:DF*r148:DF
    Inheritance reuse change 91->157 (bb2):
   56: debug u1$imag => r157:DF*r148:DF
    Inheritance reuse change 91->157 (bb2):
   87: debug u1$imag => r147:DF*r141:DF+r157:DF*r148:DF*5.0e-1
    Inheritance reuse change 91->157 (bb2):
  156: r155:DF=r157:DF
      REG_DEAD r157:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=158 from oldreg=107, assigning class SSE_REGS to inheritance r158
    Original reg change 107->158 (bb2):
    3: r158:DF=r138:DF
      REG_DEAD r138:DF
    Add original<-inheritance after:
  159: r107:DF=r158:DF

    Inheritance reuse change 107->158 (bb2):
   22: debug z$imag => r158:DF
    Inheritance reuse change 107->158 (bb2):
   25: debug u1$real => -r158:DF
    Inheritance reuse change 107->158 (bb2):
   29: debug u2$real => r158:DF
    Inheritance reuse change 107->158 (bb2):
  157: r156:DF=r158:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   158: r91:DF=r157:DF
deleting insn with uid = 158.
	    Removing dead insn:
   159: r107:DF=r158:DF
deleting insn with uid = 159.

********** Pseudo live ranges #4: **********

  BB 2
   Insn 119: point = 0, n_alt = -1
   Insn 118: point = 0, n_alt = -1
   Insn 117: point = 0, n_alt = 1
   Insn 116: point = 1, n_alt = -2
   Insn 97: point = 2, n_alt = 1
   Insn 96: point = 4, n_alt = 1
   Insn 156: point = 6, n_alt = 14
	   Creating copy r155<-r157@1000
   Insn 95: point = 8, n_alt = 1
   Insn 93: point = 10, n_alt = 1
   Insn 92: point = 12, n_alt = 14
   Insn 91: point = 13, n_alt = 1
   Insn 90: point = 15, n_alt = 1
   Insn 146: point = 17, n_alt = 14
	Hard reg 24 is preferable by r148 with profit 1000
   Insn 141: point = 19, n_alt = -2
	Hard reg 20 is preferable by r145 with profit 1000
   Insn 89: point = 21, n_alt = 1
   Insn 152: point = 22, n_alt = 14
	Hard reg 25 is preferable by r152 with profit 1000
   Insn 140: point = 24, n_alt = -2
	Hard reg 20 is preferable by r145 with profit 1000
	Hard reg 22 is preferable by r145 with profit 1000
   Insn 144: point = 25, n_alt = 14
	Hard reg 22 is preferable by r147 with profit 1000
   Insn 133: point = 27, n_alt = -2
   Insn 72: point = 28, n_alt = 0
   Insn 71: point = 28, n_alt = -2
   Insn 139: point = 29, n_alt = -2
	Hard reg 20 is preferable by r144 with profit 1000
   Insn 70: point = 31, n_alt = 0
   Insn 148: point = 33, n_alt = 2
   Insn 138: point = 34, n_alt = -2
	Hard reg 20 is preferable by r144 with profit 1000
	Hard reg 23 is preferable by r144 with profit 1000
   Insn 154: point = 36, n_alt = 14
	Hard reg 23 is preferable by r153 with profit 1000
   Insn 143: point = 38, n_alt = 15
	Hard reg 22 is preferable by r147 with profit 2000
   Insn 64: point = 40, n_alt = -2
   Insn 132: point = 42, n_alt = -2
   Insn 63: point = 43, n_alt = 0
   Insn 62: point = 43, n_alt = 14
	Hard reg 20 is preferable by r156 with profit 1000
   Insn 145: point = 44, n_alt = 15
	Hard reg 24 is preferable by r148 with profit 2000
   Insn 41: point = 46, n_alt = -2
   Insn 131: point = 48, n_alt = -2
   Insn 40: point = 49, n_alt = 0
   Insn 39: point = 49, n_alt = -2
   Insn 137: point = 50, n_alt = -2
	Hard reg 20 is preferable by r143 with profit 1000
   Insn 38: point = 52, n_alt = 0
   Insn 136: point = 54, n_alt = 14
	   Creating copy r143<-r156@1000
   Insn 157: point = 55, n_alt = -1
	   Creating copy r156<-r158@1000
   Insn 37: point = 57, n_alt = 2
   Insn 135: point = 58, n_alt = 15
	   Creating copy r142->r157@1000
   Insn 19: point = 60, n_alt = 14
   Insn 151: point = 61, n_alt = 15
	Hard reg 25 is preferable by r152 with profit 2000
   Insn 18: point = 63, n_alt = 14
   Insn 17: point = 64, n_alt = 0
   Insn 153: point = 64, n_alt = 15
	Hard reg 23 is preferable by r153 with profit 2000
   Insn 16: point = 66, n_alt = -2
   Insn 15: point = 66, n_alt = -2
   Insn 14: point = 67, n_alt = -2
   Insn 13: point = 68, n_alt = -2
   Insn 12: point = 69, n_alt = 3
   Insn 3: point = 70, n_alt = 15
	Hard reg 21 is preferable by r158 with profit 1000
   Insn 130: point = 72, n_alt = -2
   Insn 2: point = 73, n_alt = -2
   Insn 129: point = 75, n_alt = -2
 r90: [62..63] [16..22]
 r92: [39..40] [9..25]
 r96: [45..46] [5..17]
 r106: [65..73] [35..36]
 r108: [66..69]
 r109: [67..68]
 r110: [49..50]
 r111: [53..57] [32..33]
 r112: [28..29]
 r114: [14..19]
 r115: [14..15]
 r116: [11..13]
 r117: [1..10]
 r118: [0..12]
 r119: [3..8]
 r120: [3..4]
 r121: [0..2]
 r137: [74..75]
 r138: [71..72]
 r139: [47..48]
 r140: [41..42]
 r141: [9..27]
 r142: [59..60]
 r143: [51..54]
 r144: [30..34]
 r145: [20..24]
 r147: [26..38]
 r148: [18..44]
 r152: [23..61]
 r153: [37..64]
 r155: [5..6]
 r156: [43..55]
 r157: [7..58]
 r158: [56..70]
Compressing live ranges: from 76 to 58 - 76%
Ranges after the compression:
 r90: [50..51] [14..19]
 r92: [32..33] [8..21]
 r96: [38..39] [4..15]
 r106: [52..55] [28..29]
 r108: [52..53]
 r109: [52..53]
 r110: [42..43]
 r111: [44..47] [26..27]
 r112: [24..25]
 r114: [12..17]
 r115: [12..13]
 r116: [10..11]
 r117: [0..9]
 r118: [0..11]
 r119: [2..7]
 r120: [2..3]
 r121: [0..1]
 r137: [56..57]
 r138: [54..55]
 r139: [40..41]
 r140: [34..35]
 r141: [8..23]
 r142: [48..49]
 r143: [44..45]
 r144: [26..27]
 r145: [18..21]
 r147: [22..31]
 r148: [16..37]
 r152: [20..49]
 r153: [30..51]
 r155: [4..5]
 r156: [36..45]
 r157: [6..47]
 r158: [46..53]

********** Assignment #2: **********

	 Assigning to 156 (cl=SSE_REGS, orig=107, freq=3000, tfirst=156, tfreq=3000)...
	 Assigning to 158 (cl=SSE_REGS, orig=107, freq=2000, tfirst=156, tfreq=3000)...
	 Assigning to 157 (cl=ALL_SSE_REGS, orig=91, freq=2000, tfirst=155, tfreq=2000)...
	 Assigning to 155 (cl=SSE_REGS, orig=91, freq=2000, tfirst=155, tfreq=2000)...
	   Assign 27 to optional reload r155 (freq=2000)
	Hard reg 27 is preferable by r157 with profit 1000
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 3 (0.00%)
   Insn after restoring regs:
  156: r155:DF=r91:DF
      REG_DEAD r91:DF
   Insn after restoring regs:
   87: debug u1$imag => r147:DF*r141:DF+r91:DF*r148:DF*5.0e-1
   Insn after restoring regs:
   62: xmm0:DF=r107:DF
      REG_DEAD r107:DF
   Insn after restoring regs:
   56: debug u1$imag => r91:DF*r148:DF
   Insn after restoring regs:
   47: debug res$imag => r91:DF*r148:DF
   Insn after restoring regs:
  136: r143:DF=r107:DF
	   Removing inheritance:
  157: r156:DF=r158:DF
      REG_DEAD r158:DF
deleting insn with uid = 157.
   Insn after restoring regs:
   29: debug u2$real => r107:DF
   Insn after restoring regs:
   25: debug u1$real => -r107:DF
   Insn after restoring regs:
   22: debug z$imag => r107:DF
   Insn after restoring regs:
  135: r91:DF=r142:DF
      REG_DEAD r142:DF
   Insn after restoring regs:
    3: r107:DF=r138:DF
      REG_DEAD r138:DF
Keep optional reload reg 146
Remove optional reload reg 155
  Restoring original insn:
   96: r120:DF=r96:DF*r91:DF
      REG_DEAD r91:DF
      REG_DEAD r96:DF
  Deleting move 156
  156: r155:DF=r91:DF
      REG_DEAD r91:DF
deleting insn with uid = 156.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 96:  (0) x  (1) 0  (2) xm {*fop_df_comm}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #5: **********

  BB 2
   Insn 119: point = 0, n_alt = -1
   Insn 118: point = 0, n_alt = -1
   Insn 117: point = 0, n_alt = 1
   Insn 116: point = 1, n_alt = -2
   Insn 97: point = 2, n_alt = 1
   Insn 96: point = 4, n_alt = 1
   Insn 95: point = 6, n_alt = 1
   Insn 93: point = 8, n_alt = 1
   Insn 92: point = 10, n_alt = 14
   Insn 91: point = 11, n_alt = 1
   Insn 90: point = 13, n_alt = 1
   Insn 146: point = 15, n_alt = 14
   Insn 141: point = 17, n_alt = -2
   Insn 89: point = 19, n_alt = 1
   Insn 152: point = 20, n_alt = 14
   Insn 140: point = 22, n_alt = -2
   Insn 144: point = 23, n_alt = 14
   Insn 133: point = 25, n_alt = -2
   Insn 72: point = 26, n_alt = 0
   Insn 71: point = 26, n_alt = -2
   Insn 139: point = 27, n_alt = -2
   Insn 70: point = 29, n_alt = 0
   Insn 148: point = 31, n_alt = 2
   Insn 138: point = 32, n_alt = -2
   Insn 154: point = 34, n_alt = 14
   Insn 143: point = 36, n_alt = 15
   Insn 64: point = 38, n_alt = -2
   Insn 132: point = 40, n_alt = -2
   Insn 63: point = 41, n_alt = 0
   Insn 62: point = 41, n_alt = 14
   Insn 145: point = 42, n_alt = 15
   Insn 41: point = 44, n_alt = -2
   Insn 131: point = 46, n_alt = -2
   Insn 40: point = 47, n_alt = 0
   Insn 39: point = 47, n_alt = -2
   Insn 137: point = 48, n_alt = -2
   Insn 38: point = 50, n_alt = 0
   Insn 136: point = 52, n_alt = 14
   Insn 37: point = 53, n_alt = 2
   Insn 135: point = 54, n_alt = 15
   Insn 19: point = 56, n_alt = 14
   Insn 151: point = 57, n_alt = 15
   Insn 18: point = 59, n_alt = 14
   Insn 17: point = 60, n_alt = 0
   Insn 153: point = 60, n_alt = 15
   Insn 16: point = 62, n_alt = -2
   Insn 15: point = 62, n_alt = -2
   Insn 14: point = 63, n_alt = -2
   Insn 13: point = 64, n_alt = -2
   Insn 12: point = 65, n_alt = 3
   Insn 3: point = 66, n_alt = 15
   Insn 130: point = 68, n_alt = -2
   Insn 2: point = 69, n_alt = -2
   Insn 129: point = 71, n_alt = -2
 r91: [5..54]
 r107: [41..66]
 r147: [24..36]
 r148: [16..42]
 r152: [21..57]
 r153: [35..60]
Compressing live ranges: from 72 to 4 - 5%
Ranges after the compression:
 r91: [0..3]
 r107: [2..3]
 r147: [0..1]
 r148: [0..3]
 r152: [0..3]
 r153: [0..3]

******** Rematerialization #1: ********

df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)

Cands:

BB 2:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1]
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1]
  changed regs: 4 [si] 5 [di] 20 [xmm0] 21 [xmm1] 90 91 92 96 106 107 108 109 110 111 112 114 115 116 117 118 119 120 121 137 138 139 140 141 142 143 144 145 147 148 152 153
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 90 91 92 96 106 107 108 109 110 111 112 114 115 116 117 118 119 120 121 137 138 139 140 141 142 143 144 145 147 148 152 153
subreg regs:
  Slot 0 regnos (width = 0):	 107	 147
  Slot 1 regnos (width = 0):	 91
  Slot 2 regnos (width = 0):	 148
  Slot 3 regnos (width = 0):	 152
  Slot 4 regnos (width = 0):	 153
Changing spilled pseudos to memory in insn #3
Changing spilled pseudos to memory in insn #153
Changing spilled pseudos to memory in insn #151
Changing spilled pseudos to memory in insn #135
Changing spilled pseudos to memory in insn #20
Changing spilled pseudos to memory in insn #22
Changing spilled pseudos to memory in insn #25
Changing spilled pseudos to memory in insn #27
Changing spilled pseudos to memory in insn #29
Changing spilled pseudos to memory in insn #31
Changing spilled pseudos to memory in insn #34
Changing spilled pseudos to memory in insn #136
Changing spilled pseudos to memory in insn #145
Changing spilled pseudos to memory in insn #42
Changing spilled pseudos to memory in insn #45
Changing spilled pseudos to memory in insn #47
Changing spilled pseudos to memory in insn #55
Changing spilled pseudos to memory in insn #56
Changing spilled pseudos to memory in insn #59
Changing spilled pseudos to memory in insn #62
Changing spilled pseudos to memory in insn #143
Changing spilled pseudos to memory in insn #65
Changing spilled pseudos to memory in insn #67
Changing spilled pseudos to memory in insn #154
Changing spilled pseudos to memory in insn #74
Changing spilled pseudos to memory in insn #82
Changing spilled pseudos to memory in insn #83
Changing spilled pseudos to memory in insn #85
Changing spilled pseudos to memory in insn #87
Changing spilled pseudos to memory in insn #144
Changing spilled pseudos to memory in insn #152
Changing spilled pseudos to memory in insn #146
Changing spilled pseudos to memory in insn #96
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=80, prev_offset=32)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=64, prev_offset=16)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)

********** Local #4: **********

	   Spilling non-eliminable hard regs: 7
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 19:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 18:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) Ts {*leadi}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 12:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 96:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 146:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 152:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 144:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 154:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 143:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=616,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=625,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=630,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 62:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 145:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 136:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 135:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 151:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 153:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 3:  (0) m  (1) v {*movdf_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=80, prev_offset=80)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=64, prev_offset=64)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 18
changing reg in insn 89
changing reg in insn 64
changing reg in insn 95
changing reg in insn 41
changing reg in insn 2
changing reg in insn 16
changing reg in insn 12
changing reg in insn 15
changing reg in insn 13
changing reg in insn 14
changing reg in insn 39
changing reg in insn 37
changing reg in insn 70
changing reg in insn 38
changing reg in insn 71
changing reg in insn 91
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 93
changing reg in insn 93
changing reg in insn 116
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 97
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 129
changing reg in insn 2
changing reg in insn 130
changing reg in insn 3
changing reg in insn 131
changing reg in insn 41
changing reg in insn 132
changing reg in insn 64
changing reg in insn 133
changing reg in insn 95
changing reg in insn 87
changing reg in insn 83
changing reg in insn 74
deleting insn with uid = 129.
deleting insn with uid = 130.
deleting insn with uid = 14.
deleting insn with uid = 15.
deleting insn with uid = 39.
deleting insn with uid = 131.
deleting insn with uid = 132.
deleting insn with uid = 138.
deleting insn with uid = 71.
deleting insn with uid = 141.
deleting insn with uid = 116.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 72.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)


c_cos

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 7 [sp] 20 [xmm0] 21 [xmm1]
;;  regs ever live 	 4 [si] 5 [di] 7 [sp] 17 [flags] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7]
;;  ref usage 	r0={5d} r1={5d} r2={5d} r4={6d,1u} r5={6d,1u} r7={1d,54u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={7d} r18={4d} r19={2e} r20={13d,13u} r21={9d,7u} r22={9d,5u} r23={9d,8u} r24={8d,4u} r25={8d,4u} r26={7d,2u} r27={6d,1u} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={5d} r37={5d} r38={4d} r39={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} 
;;    total ref usage 420{318d,100u,2e} in 105{101 regular + 4 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 20 [xmm0] 21 [xmm1]
;; lr  use 	 7 [sp] 20 [xmm0] 21 [xmm1]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 7 [sp] 20 [xmm0] 21 [xmm1]
;; live  gen 	 4 [si] 5 [di] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7]
;; live  kill	 17 [flags]
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (reg:DF 23 xmm3 [orig:106 z ] [106])
        (reg:DF 20 xmm0 [137])) "cmodules/fbgc_math.c":31:47 111 {*movdf_internal}
     (nil))
(insn 3 2 159 2 (set (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-56 S8 A64])
        (reg:DF 21 xmm1 [138])) "cmodules/fbgc_math.c":31:47 111 {*movdf_internal}
     (nil))
(note 159 3 155 2 NOTE_INSN_DELETED)
(note 155 159 8 2 NOTE_INSN_DELETED)
(note 8 155 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 8 13 2 (parallel [
            (set (reg/f:DI 5 di [108])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) 191 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 19 frame)
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))
(insn 13 12 16 2 (set (reg/f:DI 4 si [109])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 48 [0x30]))) 187 {*leadi}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 19 frame)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))
(insn 16 13 153 2 (set (reg:DF 20 xmm0)
        (reg:DF 23 xmm3 [orig:106 z ] [106])) 111 {*movdf_internal}
     (nil))
(insn 153 16 17 2 (set (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [10 %sfp+-24 S8 A64])
        (reg:DF 23 xmm3 [orig:106 z ] [106])) 111 {*movdf_internal}
     (nil))
(call_insn 17 153 18 2 (call (mem:QI (symbol_ref:DI ("sincos") [flags 0x41]  <function_decl 0x7f213e4ba400 __builtin_sincos>) [0 __builtin_sincos S1 A8])
        (const_int 0 [0])) 666 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("sincos") [flags 0x41]  <function_decl 0x7f213e4ba400 __builtin_sincos>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 18 17 151 2 (set (reg:DF 25 xmm5 [orig:90 sincostmp_12 ] [90])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [2  S8 A64])) 111 {*movdf_internal}
     (nil))
(insn 151 18 19 2 (set (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [10 %sfp+-32 S8 A64])
        (reg:DF 25 xmm5 [orig:90 sincostmp_12 ] [90])) 111 {*movdf_internal}
     (nil))
(insn 19 151 135 2 (set (reg:DF 27 xmm7 [orig:91 sincostmp_12+8 ] [91])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [2  S8 A64])) 111 {*movdf_internal}
     (nil))
(insn 135 19 158 2 (set (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [10 %sfp+-48 S8 A64])
        (reg:DF 27 xmm7 [orig:91 sincostmp_12+8 ] [91])) 111 {*movdf_internal}
     (nil))
(note 158 135 150 2 NOTE_INSN_DELETED)
(note 150 158 20 2 NOTE_INSN_DELETED)
(debug_insn 20 150 22 2 (var_location:DF z$real (mem/c:DF (plus:DI (reg/f:DI 7 sp)
            (const_int 40 [0x28])) [10 %sfp+-24 S8 A64])) -1
     (nil))
(debug_insn 22 20 23 2 (var_location:DF z$imag (mem/c:DF (plus:DI (reg/f:DI 7 sp)
            (const_int 8 [0x8])) [10 %sfp+-56 S8 A64])) -1
     (nil))
(debug_insn 23 22 24 2 (debug_marker) "cmodules/fbgc_math.c":33:2 -1
     (nil))
(debug_insn 24 23 25 2 (debug_marker) "cmodules/fbgc_math.c":35:2 -1
     (nil))
(debug_insn 25 24 26 2 (var_location:DF u1$real (neg:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-56 S8 A64]))) "cmodules/fbgc_math.c":35:10 -1
     (nil))
(debug_insn 26 25 27 2 (debug_marker) "cmodules/fbgc_math.c":36:2 -1
     (nil))
(debug_insn 27 26 28 2 (var_location:DF u1$imag (mem/c:DF (plus:DI (reg/f:DI 7 sp)
            (const_int 40 [0x28])) [10 %sfp+-24 S8 A64])) "cmodules/fbgc_math.c":36:10 -1
     (nil))
(debug_insn 28 27 29 2 (debug_marker) "cmodules/fbgc_math.c":38:2 -1
     (nil))
(debug_insn 29 28 30 2 (var_location:DF u2$real (mem/c:DF (plus:DI (reg/f:DI 7 sp)
            (const_int 8 [0x8])) [10 %sfp+-56 S8 A64])) "cmodules/fbgc_math.c":38:10 -1
     (nil))
(debug_insn 30 29 31 2 (debug_marker) "cmodules/fbgc_math.c":39:2 -1
     (nil))
(debug_insn 31 30 32 2 (var_location:DF u2$imag (neg:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [10 %sfp+-24 S8 A64]))) "cmodules/fbgc_math.c":39:10 -1
     (nil))
(debug_insn 32 31 33 2 (debug_marker) "cmodules/fbgc_math.c":41:2 -1
     (nil))
(debug_insn 33 32 34 2 (debug_marker:BLK) "cmodules/fbgc_math.c":22:20 -1
     (nil))
(debug_insn 34 33 35 2 (var_location:DF z$imag (mem/c:DF (plus:DI (reg/f:DI 7 sp)
            (const_int 40 [0x28])) [10 %sfp+-24 S8 A64])) -1
     (nil))
(debug_insn 35 34 36 2 (debug_marker) "cmodules/fbgc_math.c":24:2 -1
     (nil))
(debug_insn 36 35 37 2 (debug_marker) "cmodules/fbgc_math.c":25:2 -1
     (nil))
(insn 37 36 149 2 (set (reg:V2DF 21 xmm1 [111])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) "cmodules/fbgc_math.c":35:12 1220 {movv2df_internal}
     (expr_list:REG_EQUIV (const_vector:V2DF [
                (const_double:DF -0.0 [-0x0.0p+0])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(note 149 37 157 2 NOTE_INSN_DELETED)
(note 157 149 136 2 NOTE_INSN_DELETED)
(insn 136 157 38 2 (set (reg:DF 26 xmm6 [110])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-56 S8 A64])) "cmodules/fbgc_math.c":35:12 111 {*movdf_internal}
     (nil))
(insn 38 136 147 2 (parallel [
            (set (reg:DF 26 xmm6 [110])
                (neg:DF (reg:DF 26 xmm6 [110])))
            (use (reg:V2DF 21 xmm1 [111]))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":35:12 477 {*absnegdf2}
     (nil))
(note 147 38 137 2 NOTE_INSN_DELETED)
(insn 137 147 40 2 (set (reg:DF 20 xmm0 [110])
        (reg:DF 26 xmm6 [110])) "cmodules/fbgc_math.c":35:12 111 {*movdf_internal}
     (nil))
(call_insn 40 137 41 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":25:13 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 41 40 145 2 (set (reg/v:DF 24 xmm4 [orig:96 r ] [96])
        (reg:DF 20 xmm0 [139])) "cmodules/fbgc_math.c":25:13 111 {*movdf_internal}
     (nil))
(insn 145 41 42 2 (set (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [10 %sfp+-40 S8 A64])
        (reg/v:DF 24 xmm4 [orig:96 r ] [96])) "cmodules/fbgc_math.c":25:13 111 {*movdf_internal}
     (nil))
(debug_insn 42 145 43 2 (var_location:DF r (mem/c:DF (plus:DI (reg/f:DI 7 sp)
            (const_int 24 [0x18])) [10 %sfp+-40 S8 A64])) "cmodules/fbgc_math.c":25:13 -1
     (nil))
(debug_insn 43 42 45 2 (debug_marker) "cmodules/fbgc_math.c":26:2 -1
     (nil))
(debug_insn 45 43 46 2 (var_location:DF res$real (mult:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [10 %sfp+-40 S8 A64])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [10 %sfp+-32 S8 A64]))) "cmodules/fbgc_math.c":26:11 -1
     (nil))
(debug_insn 46 45 47 2 (debug_marker) "cmodules/fbgc_math.c":27:2 -1
     (nil))
(debug_insn 47 46 48 2 (var_location:DF res$imag (mult:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [10 %sfp+-48 S8 A64])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [10 %sfp+-40 S8 A64]))) "cmodules/fbgc_math.c":27:11 -1
     (nil))
(debug_insn 48 47 49 2 (debug_marker) "cmodules/fbgc_math.c":28:2 -1
     (nil))
(debug_insn 49 48 50 2 (var_location:DF D#1 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 50 49 51 2 (var_location:DF res$real (debug_expr:DF D#1)) -1
     (nil))
(debug_insn 51 50 52 2 (var_location:DF D#2 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 52 51 53 2 (var_location:DF res$imag (debug_expr:DF D#2)) -1
     (nil))
(debug_insn 53 52 54 2 (var_location:DF r (clobber (const_int 0 [0]))) "cmodules/fbgc_math.c":41:7 -1
     (nil))
(debug_insn 54 53 55 2 (var_location:DF z$imag (clobber (const_int 0 [0]))) "cmodules/fbgc_math.c":41:7 -1
     (nil))
(debug_insn 55 54 56 2 (var_location:DF u1$real (mult:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [10 %sfp+-40 S8 A64])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [10 %sfp+-32 S8 A64]))) "cmodules/fbgc_math.c":41:7 -1
     (nil))
(debug_insn 56 55 57 2 (var_location:DF u1$imag (mult:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [10 %sfp+-48 S8 A64])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [10 %sfp+-40 S8 A64]))) "cmodules/fbgc_math.c":41:7 -1
     (nil))
(debug_insn 57 56 58 2 (debug_marker) "cmodules/fbgc_math.c":42:2 -1
     (nil))
(debug_insn 58 57 59 2 (debug_marker:BLK) "cmodules/fbgc_math.c":22:20 -1
     (nil))
(debug_insn 59 58 60 2 (var_location:DF z$imag (neg:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [10 %sfp+-24 S8 A64]))) -1
     (nil))
(debug_insn 60 59 61 2 (debug_marker) "cmodules/fbgc_math.c":24:2 -1
     (nil))
(debug_insn 61 60 62 2 (debug_marker) "cmodules/fbgc_math.c":25:2 -1
     (nil))
(insn 62 61 63 2 (set (reg:DF 20 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-56 S8 A64])) "cmodules/fbgc_math.c":25:13 111 {*movdf_internal}
     (nil))
(call_insn 63 62 64 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":25:13 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 64 63 143 2 (set (reg/v:DF 22 xmm2 [orig:92 r ] [92])
        (reg:DF 20 xmm0 [140])) "cmodules/fbgc_math.c":25:13 111 {*movdf_internal}
     (nil))
(insn 143 64 65 2 (set (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-56 S8 A64])
        (reg/v:DF 22 xmm2 [orig:92 r ] [92])) "cmodules/fbgc_math.c":25:13 111 {*movdf_internal}
     (nil))
(debug_insn 65 143 66 2 (var_location:DF r (mem/c:DF (plus:DI (reg/f:DI 7 sp)
            (const_int 8 [0x8])) [10 %sfp+-56 S8 A64])) "cmodules/fbgc_math.c":25:13 -1
     (nil))
(debug_insn 66 65 67 2 (debug_marker) "cmodules/fbgc_math.c":26:2 -1
     (nil))
(debug_insn 67 66 68 2 (var_location:DF res$real (mult:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-56 S8 A64])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [10 %sfp+-32 S8 A64]))) "cmodules/fbgc_math.c":26:11 -1
     (nil))
(debug_insn 68 67 154 2 (debug_marker) "cmodules/fbgc_math.c":27:2 -1
     (nil))
(insn 154 68 148 2 (set (reg:DF 23 xmm3 [orig:106 z ] [106])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [10 %sfp+-24 S8 A64])) "cmodules/fbgc_math.c":39:12 111 {*movdf_internal}
     (nil))
(insn 148 154 70 2 (set (reg:V2DF 21 xmm1 [111])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) "cmodules/fbgc_math.c":39:12 1220 {movv2df_internal}
     (nil))
(insn 70 148 139 2 (parallel [
            (set (reg:DF 23 xmm3 [orig:106 z ] [106])
                (neg:DF (reg:DF 23 xmm3 [orig:106 z ] [106])))
            (use (reg:V2DF 21 xmm1 [111]))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":39:12 477 {*absnegdf2}
     (nil))
(insn 139 70 72 2 (set (reg:DF 20 xmm0 [112])
        (reg:DF 23 xmm3 [orig:106 z ] [106])) "cmodules/fbgc_math.c":39:12 111 {*movdf_internal}
     (nil))
(call_insn/u 72 139 133 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7f213e4ba300 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":27:15 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7f213e4ba300 sin>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 133 72 73 2 (set (reg:DF 23 xmm3 [141])
        (reg:DF 20 xmm0)) "cmodules/fbgc_math.c":27:15 111 {*movdf_internal}
     (nil))
(note 73 133 74 2 NOTE_INSN_DELETED)
(debug_insn 74 73 75 2 (var_location:DF res$imag (mult:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-56 S8 A64])
        (reg:DF 23 xmm3 [141]))) "cmodules/fbgc_math.c":27:11 -1
     (nil))
(debug_insn 75 74 76 2 (debug_marker) "cmodules/fbgc_math.c":28:2 -1
     (nil))
(debug_insn 76 75 77 2 (var_location:DF D#1 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 77 76 78 2 (var_location:DF res$real (debug_expr:DF D#1)) -1
     (nil))
(debug_insn 78 77 79 2 (var_location:DF D#2 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 79 78 80 2 (var_location:DF res$imag (debug_expr:DF D#2)) -1
     (nil))
(debug_insn 80 79 81 2 (var_location:DF r (clobber (const_int 0 [0]))) "cmodules/fbgc_math.c":42:7 -1
     (nil))
(debug_insn 81 80 82 2 (var_location:DF z$imag (clobber (const_int 0 [0]))) "cmodules/fbgc_math.c":42:7 -1
     (nil))
(debug_insn 82 81 83 2 (var_location:DF u2$real (mult:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-56 S8 A64])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [10 %sfp+-32 S8 A64]))) "cmodules/fbgc_math.c":42:7 -1
     (nil))
(debug_insn 83 82 84 2 (var_location:DF u2$imag (mult:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-56 S8 A64])
        (reg:DF 23 xmm3 [141]))) "cmodules/fbgc_math.c":42:7 -1
     (nil))
(debug_insn 84 83 85 2 (debug_marker) "cmodules/fbgc_math.c":44:2 -1
     (nil))
(debug_insn 85 84 86 2 (var_location:DF u1$real (mult:DF (plus:DF (mult:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                        (const_int 8 [0x8])) [10 %sfp+-56 S8 A64])
                (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                        (const_int 32 [0x20])) [10 %sfp+-32 S8 A64]))
            (mult:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                        (const_int 24 [0x18])) [10 %sfp+-40 S8 A64])
                (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                        (const_int 32 [0x20])) [10 %sfp+-32 S8 A64])))
        (const_double:DF 5.0e-1 [0x0.8p+0]))) "cmodules/fbgc_math.c":44:10 -1
     (nil))
(debug_insn 86 85 87 2 (debug_marker) "cmodules/fbgc_math.c":45:2 -1
     (nil))
(debug_insn 87 86 88 2 (var_location:DF u1$imag (mult:DF (plus:DF (mult:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                        (const_int 8 [0x8])) [10 %sfp+-56 S8 A64])
                (reg:DF 23 xmm3 [141]))
            (mult:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [10 %sfp+-48 S8 A64])
                (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                        (const_int 24 [0x18])) [10 %sfp+-40 S8 A64])))
        (const_double:DF 5.0e-1 [0x0.8p+0]))) "cmodules/fbgc_math.c":45:10 -1
     (nil))
(debug_insn 88 87 144 2 (debug_marker) "cmodules/fbgc_math.c":47:2 -1
     (nil))
(insn 144 88 140 2 (set (reg/v:DF 22 xmm2 [orig:92 r ] [92])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-56 S8 A64])) "cmodules/fbgc_math.c":26:14 111 {*movdf_internal}
     (nil))
(insn 140 144 152 2 (set (reg:DF 20 xmm0 [114])
        (reg/v:DF 22 xmm2 [orig:92 r ] [92])) "cmodules/fbgc_math.c":26:14 111 {*movdf_internal}
     (nil))
(insn 152 140 89 2 (set (reg:DF 25 xmm5 [orig:90 sincostmp_12 ] [90])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [10 %sfp+-32 S8 A64])) "cmodules/fbgc_math.c":26:14 111 {*movdf_internal}
     (nil))
(insn 89 152 146 2 (set (reg:DF 20 xmm0 [114])
        (mult:DF (reg:DF 20 xmm0 [114])
            (reg:DF 25 xmm5 [orig:90 sincostmp_12 ] [90]))) "cmodules/fbgc_math.c":26:14 818 {*fop_df_comm}
     (nil))
(insn 146 89 90 2 (set (reg/v:DF 24 xmm4 [orig:96 r ] [96])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [10 %sfp+-40 S8 A64])) "cmodules/fbgc_math.c":26:14 111 {*movdf_internal}
     (nil))
(insn 90 146 91 2 (set (reg:DF 25 xmm5 [115])
        (mult:DF (reg:DF 25 xmm5 [orig:90 sincostmp_12 ] [90])
            (reg/v:DF 24 xmm4 [orig:96 r ] [96]))) "cmodules/fbgc_math.c":26:14 818 {*fop_df_comm}
     (nil))
(insn 91 90 92 2 (set (reg:DF 20 xmm0 [116])
        (plus:DF (reg:DF 20 xmm0 [114])
            (reg:DF 25 xmm5 [115]))) "cmodules/fbgc_math.c":44:20 818 {*fop_df_comm}
     (nil))
(insn 92 91 93 2 (set (reg:DF 21 xmm1 [118])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S8 A64])) "cmodules/fbgc_math.c":44:29 111 {*movdf_internal}
     (expr_list:REG_EQUIV (const_double:DF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 93 92 95 2 (set (reg:DF 20 xmm0 [117])
        (mult:DF (reg:DF 20 xmm0 [116])
            (reg:DF 21 xmm1 [118]))) "cmodules/fbgc_math.c":44:29 818 {*fop_df_comm}
     (nil))
(insn 95 93 142 2 (set (reg:DF 22 xmm2 [119])
        (mult:DF (reg/v:DF 22 xmm2 [orig:92 r ] [92])
            (reg:DF 23 xmm3 [141]))) "cmodules/fbgc_math.c":27:14 818 {*fop_df_comm}
     (nil))
(note 142 95 156 2 NOTE_INSN_DELETED)
(note 156 142 96 2 NOTE_INSN_DELETED)
(insn 96 156 97 2 (set (reg:DF 24 xmm4 [120])
        (mult:DF (reg/v:DF 24 xmm4 [orig:96 r ] [96])
            (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])) [10 %sfp+-48 S8 A64]))) "cmodules/fbgc_math.c":27:14 818 {*fop_df_comm}
     (nil))
(insn 97 96 99 2 (set (reg:DF 22 xmm2 [121])
        (plus:DF (reg:DF 22 xmm2 [119])
            (reg:DF 24 xmm4 [120]))) "cmodules/fbgc_math.c":45:20 818 {*fop_df_comm}
     (nil))
(note 99 97 101 2 NOTE_INSN_DELETED)
(debug_insn 101 99 102 2 (var_location:DF D#3 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 102 101 103 2 (var_location:DF u1$real (debug_expr:DF D#3)) -1
     (nil))
(debug_insn 103 102 104 2 (var_location:DF D#4 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 104 103 105 2 (var_location:DF u1$imag (debug_expr:DF D#4)) -1
     (nil))
(debug_insn 105 104 106 2 (var_location:DF D#5 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 106 105 107 2 (var_location:DF u2$real (debug_expr:DF D#5)) -1
     (nil))
(debug_insn 107 106 108 2 (var_location:DF D#6 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 108 107 117 2 (var_location:DF u2$imag (debug_expr:DF D#6)) -1
     (nil))
(insn 117 108 118 2 (set (reg:DF 21 xmm1)
        (mult:DF (reg:DF 21 xmm1 [118])
            (reg:DF 22 xmm2 [121]))) "cmodules/fbgc_math.c":48:1 818 {*fop_df_comm}
     (nil))
(insn 118 117 119 2 (use (reg:DF 20 xmm0)) "cmodules/fbgc_math.c":48:1 -1
     (nil))
(insn 119 118 134 2 (use (reg:DF 21 xmm1)) "cmodules/fbgc_math.c":48:1 -1
     (nil))
;;  succ:       EXIT [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; lr  out 	 7 [sp] 20 [xmm0] 21 [xmm1]
;; live  out 	 7 [sp] 20 [xmm0] 21 [xmm1]

(note 134 119 0 NOTE_INSN_DELETED)

;; Function one_arg_math (one_arg_math, funcdef_no=58, decl_uid=5763, cgraph_uid=59, symbol_order=60)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-56, prev_offset=0)
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) qm  (1) qn {*cmpqi_1}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) qm  (1) qn {*cmpqi_1}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) qm  (1) qn {*cmpqi_1}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (1) rBwBz {*call_value}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 61:  (1) rBwBz {*call_value}
      Creating newreg=188 from oldreg=132, assigning class GENERAL_REGS to r188
   61: xmm0:DF=call [r188:DI] argc:0
      REG_DEAD r132:DI
      REG_CALL_DECL (nil)
    Inserting insn reload before:
  374: r188:DI=r132:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 374:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (1) UBsBz {*sibcall_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (1) rBwBz {*call_value}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 84:  (1) rBwBz {*call_value}
      Creating newreg=189 from oldreg=133, assigning class GENERAL_REGS to r189
   84: parallel=call [r189:DI] argc:0
      REG_DEAD r133:DI
      REG_CALL_DECL (nil)
    Inserting insn reload before:
  375: r189:DI=r133:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 375:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (1) UBsBz {*sibcall_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (1) rBwBz {*call_value}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 104:  (0) m  (1) re {*movdi_internal}
      Creating newreg=190 from oldreg=129, assigning class GENERAL_REGS to address r190
	   Change to class INDEX_REGS for r190
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) m  (1) re {*movsi_internal}
  107: [r190:DI+0xd]=r111:SI
    Inserting insn reload before:
  376: r190:DI=r129:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 376:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 136:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 138:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 139:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 147:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 150:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (1) rBwBz {*call_value}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 173:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            alt=0: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=2,overall=15,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            alt=0: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=2,overall=15,losers=2,rld_nregs=2
	 Choosing alt 2 in insn 178:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=191 from oldreg=114, assigning class GENERAL_REGS to r191
  178: {r191:SI=r191:SI*r110:SI;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  377: r191:SI=r120:SI
    Inserting insn reload after:
  378: r114:SI=r191:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 378:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=17,losers=2 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 192:  (0) r  (1) r  (2) le {*adddi_1}
      Creating newreg=192 from oldreg=129, assigning class GENERAL_REGS to r192
  192: {r172:DI=r192:DI+0xe;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  379: r192:DI=r129:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 379:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 191:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
	 Choosing alt 2 in insn 196:  (0) r  (1) 0  (2) mr {*mulsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 202:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 205:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) qm  (1) qn {*cmpqi_1}
      Creating newreg=193 from oldreg=114, assigning class GENERAL_REGS to address r193
	   Change to class INDEX_REGS for r193
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =r  (1) Ts {*leadi}
  214: r149:DI=zero_extend(r193:SI+r116:SI)
      REG_DEAD r116:SI
    Inserting insn reload before:
  380: r193:SI=r114:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=616,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=625,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=630,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 225:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 226:  (1) rBwBz {*call_value}
      Creating newreg=194 from oldreg=133, assigning class GENERAL_REGS to r194
  226: parallel=call [r194:DI] argc:0
      REG_CALL_DECL (nil)
    Inserting insn reload before:
  381: r194:DI=r133:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 381:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 233:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 235:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 238:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 251:  (1) rBwBz {*call_value}
      Creating newreg=195 from oldreg=132, assigning class GENERAL_REGS to r195
  251: xmm0:DF=call [r195:DI] argc:0
      REG_CALL_DECL (nil)
    Inserting insn reload before:
  382: r195:DI=r132:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 382:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 253:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 255:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 273:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 288:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 305:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 16
   Insn 140: point = 0, n_alt = 0
   Insn 139: point = 0, n_alt = 4
   Insn 138: point = 0, n_alt = 4
   Insn 137: point = 0, n_alt = 0
   Insn 136: point = 0, n_alt = 4
  BB 30
   Insn 306: point = 0, n_alt = -1
   Insn 305: point = 0, n_alt = 3
  BB 20
   Insn 368: point = 2, n_alt = -1
  BB 18
   Insn 365: point = 3, n_alt = -1
  BB 17
   Insn 156: point = 4, n_alt = -1
   Insn 155: point = 4, n_alt = 0
   Insn 153: point = 4, n_alt = 0
   Insn 150: point = 5, n_alt = 0
   Insn 148: point = 6, n_alt = 0
   Insn 147: point = 6, n_alt = 3
   Insn 146: point = 6, n_alt = -2
   Insn 145: point = 7, n_alt = -2
  BB 15
   Insn 133: point = 8, n_alt = -1
   Insn 132: point = 8, n_alt = 0
   Insn 129: point = 8, n_alt = -2
   Insn 353: point = 10, n_alt = -2
   Insn 128: point = 11, n_alt = 0
   Insn 127: point = 11, n_alt = -2
   Insn 126: point = 11, n_alt = 0
   Insn 125: point = 11, n_alt = 3
   Insn 124: point = 11, n_alt = 3
  BB 14
   Insn 7: point = 12, n_alt = 0
   Insn 120: point = 13, n_alt = 0
  BB 10
   Insn 362: point = 16, n_alt = -1
   Insn 10: point = 16, n_alt = 5
  BB 13
   Insn 118: point = 17, n_alt = -1
   Insn 117: point = 17, n_alt = 0
   Insn 109: point = 17, n_alt = 3
   Insn 107: point = 19, n_alt = 1
   Insn 376: point = 20, n_alt = 3
   Insn 104: point = 21, n_alt = 5
   Insn 352: point = 23, n_alt = -2
   Insn 103: point = 24, n_alt = 0
   Insn 102: point = 24, n_alt = -2
   Insn 99: point = 24, n_alt = 0
  BB 9
   Insn 48: point = 27, n_alt = -1
   Insn 47: point = 27, n_alt = 0
  BB 8
   Insn 360: point = 29, n_alt = -1
   Insn 11: point = 29, n_alt = 5
  BB 6
   Insn 358: point = 30, n_alt = -1
   Insn 12: point = 30, n_alt = 5
  BB 29
   Insn 293: point = 31, n_alt = -1
   Insn 292: point = 31, n_alt = 0
   Insn 288: point = 31, n_alt = 0
  BB 28
   Insn 285: point = 33, n_alt = -1
   Insn 284: point = 33, n_alt = 0
  BB 27
   Insn 277: point = 34, n_alt = -1
   Insn 276: point = 34, n_alt = 0
   Insn 273: point = 34, n_alt = 0
  BB 26
   Insn 268: point = 36, n_alt = 0
  BB 24
   Insn 371: point = 38, n_alt = -1
  BB 25
   Insn 260: point = 39, n_alt = -1
   Insn 259: point = 39, n_alt = 0
   Insn 258: point = 39, n_alt = 0
   Insn 255: point = 40, n_alt = 0
   Insn 253: point = 41, n_alt = 15
   Insn 357: point = 42, n_alt = -2
   Insn 251: point = 43, n_alt = 0
   Insn 382: point = 44, n_alt = 3
   Insn 250: point = 45, n_alt = -2
  BB 22
   Insn 210: point = 47, n_alt = -1
   Insn 209: point = 47, n_alt = 0
   Insn 208: point = 47, n_alt = 0
   Insn 205: point = 49, n_alt = 14
   Insn 203: point = 50, n_alt = 0
   Insn 202: point = 52, n_alt = 3
   Insn 197: point = 53, n_alt = 0
   Insn 196: point = 55, n_alt = 2
  BB 23
   Insn 243: point = 58, n_alt = -1
   Insn 242: point = 58, n_alt = 0
   Insn 241: point = 58, n_alt = 0
   Insn 238: point = 59, n_alt = 0
   Insn 235: point = 60, n_alt = 15
   Insn 233: point = 61, n_alt = 15
   Insn 356: point = 62, n_alt = -2
   Insn 355: point = 63, n_alt = -2
   Insn 226: point = 64, n_alt = 0
   Insn 381: point = 65, n_alt = 3
   Insn 225: point = 66, n_alt = 14
   Insn 224: point = 66, n_alt = -2
   Insn 215: point = 67, n_alt = 0
   Insn 214: point = 69, n_alt = 0
   Insn 380: point = 71, n_alt = 0
  BB 21
   Insn 8: point = 73, n_alt = 0
   Insn 191: point = 74, n_alt = 3
  BB 19
   Insn 186: point = 76, n_alt = -1
   Insn 185: point = 76, n_alt = 0
   Insn 192: point = 76, n_alt = 3
   Insn 379: point = 78, n_alt = 3
   Insn 9: point = 79, n_alt = 0
   Insn 378: point = 80, n_alt = 1
   Insn 178: point = 82, n_alt = 2
   Insn 377: point = 83, n_alt = -2
	Hard reg 1 is preferable by r191 with profit 13
   Insn 177: point = 84, n_alt = 0
   Insn 176: point = 85, n_alt = 0
   Insn 173: point = 86, n_alt = 5
   Insn 354: point = 88, n_alt = -2
   Insn 172: point = 89, n_alt = 0
   Insn 171: point = 89, n_alt = -2
   Insn 170: point = 90, n_alt = -2
   Insn 169: point = 91, n_alt = -2
   Insn 168: point = 92, n_alt = 0
   Insn 167: point = 92, n_alt = 0
   Insn 166: point = 93, n_alt = 0
   Insn 165: point = 94, n_alt = 0
  BB 11
   Insn 64: point = 96, n_alt = 0
   Insn 63: point = 96, n_alt = -2
   Insn 62: point = 97, n_alt = -2
   Insn 347: point = 99, n_alt = -2
   Insn 61: point = 100, n_alt = 0
   Insn 374: point = 101, n_alt = 3
   Insn 60: point = 103, n_alt = -2
   Insn 57: point = 104, n_alt = -2
   Insn 346: point = 106, n_alt = -2
   Insn 56: point = 107, n_alt = 0
   Insn 55: point = 107, n_alt = -2
  BB 5
   Insn 34: point = 109, n_alt = -1
   Insn 33: point = 109, n_alt = 0
  BB 12
   Insn 93: point = 111, n_alt = 0
   Insn 92: point = 111, n_alt = -2
   Insn 91: point = 112, n_alt = -2
   Insn 351: point = 113, n_alt = -2
   Insn 85: point = 114, n_alt = -2
   Insn 350: point = 116, n_alt = -2
   Insn 84: point = 117, n_alt = 0
   Insn 375: point = 118, n_alt = 3
   Insn 83: point = 120, n_alt = -2
   Insn 82: point = 121, n_alt = -2
   Insn 349: point = 122, n_alt = -2
   Insn 72: point = 123, n_alt = -2
   Insn 348: point = 125, n_alt = -2
   Insn 71: point = 126, n_alt = 0
   Insn 70: point = 126, n_alt = -2
  BB 7
   Insn 41: point = 128, n_alt = -1
   Insn 40: point = 128, n_alt = 0
  BB 4
   Insn 29: point = 130, n_alt = -1
   Insn 28: point = 130, n_alt = 0
  BB 3
   Insn 24: point = 131, n_alt = -1
  BB 2
   Insn 19: point = 132, n_alt = -1
   Insn 18: point = 132, n_alt = 0
   Insn 17: point = 132, n_alt = 4
   Insn 16: point = 133, n_alt = 3
   Insn 5: point = 134, n_alt = 5
   Insn 345: point = 136, n_alt = -2
   Insn 4: point = 137, n_alt = 5
   Insn 344: point = 139, n_alt = -2
   Insn 2: point = 140, n_alt = -2
   Insn 343: point = 142, n_alt = -2
 r82: [126..133] [107..110] [31..95] [25..28]
 r83: [128..132] [109..110] [27..28]
 r84: [96..97]
 r87: [17..17] [14..15]
 r99: [66..72] [45..49]
 r110: [73..84] [56..58] [31..39]
 r111: [17..24] [4..15]
 r112: [6..8]
 r113: [4..12]
 r114: [31..80]
 r115: [31..79]
 r116: [70..72] [47..53]
 r118: [39..73]
 r119: [103..104]
 r120: [76..85] [31..36]
 r121: [39..74]
 r122: [61..72] [41..47]
 r124: [4..13]
 r129: [29..86] [0..21]
 r130: [131..140] [18..28]
 r132: [130..137] [102..110] [31..95] [17..28] [4..15]
 r133: [119..134] [31..95] [17..28] [4..15]
 r134: [121..123]
 r140: [111..114]
 r142: [91..94]
 r143: [90..93]
 r144: [89..92]
 r145: [54..55]
 r146: [51..52]
 r147: [48..50]
 r149: [68..69]
 r150: [60..67]
 r172: [31..76]
 r173: [141..142]
 r174: [138..139]
 r175: [135..136]
 r176: [105..106]
 r177: [98..99]
 r178: [124..125]
 r179: [120..122]
 r180: [115..116]
 r181: [112..113]
 r182: [22..23]
 r183: [9..10]
 r184: [87..88]
 r185: [61..63]
 r186: [60..62]
 r187: [41..42]
 r188: [100..101]
 r189: [117..118]
 r190: [19..20]
 r191: [81..83]
 r192: [77..78]
 r193: [70..71]
 r194: [64..65]
 r195: [43..44]
Compressing live ranges: from 143 to 81 - 56%
Ranges after the compression:
 r82: [73..74] [61..62] [11..50]
 r83: [73..74] [61..62] [11..12]
 r84: [51..52]
 r87: [4..6]
 r99: [34..39] [20..23]
 r110: [40..46] [28..29] [13..15]
 r111: [0..10]
 r112: [0..1]
 r113: [0..3]
 r114: [13..44]
 r115: [13..44]
 r116: [38..39] [21..25]
 r118: [15..40]
 r119: [57..58]
 r120: [42..46] [13..14]
 r121: [15..41]
 r122: [30..39] [16..21]
 r124: [0..3]
 r129: [13..46] [0..8]
 r130: [73..78] [7..12]
 r132: [73..76] [57..62] [0..50]
 r133: [69..74] [0..50]
 r134: [69..70]
 r140: [63..64]
 r142: [49..50]
 r143: [49..50]
 r144: [49..50]
 r145: [26..27]
 r146: [24..25]
 r147: [22..23]
 r149: [36..37]
 r150: [30..35]
 r172: [13..42]
 r173: [79..80]
 r174: [77..78]
 r175: [75..76]
 r176: [59..60]
 r177: [53..54]
 r178: [71..72]
 r179: [69..70]
 r180: [65..66]
 r181: [63..64]
 r182: [9..10]
 r183: [2..3]
 r184: [47..48]
 r185: [30..31]
 r186: [30..31]
 r187: [16..17]
 r188: [55..56]
 r189: [67..68]
 r190: [7..8]
 r191: [45..46]
 r192: [43..44]
 r193: [38..39]
 r194: [32..33]
 r195: [18..19]

********** Inheritance #1: **********

EBB 2 3 4 5 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13 14
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=196 from oldreg=129, assigning class GENERAL_REGS to inheritance r196
    Original reg change 129->196 (bb13):
  104: r196:DI=r182:DI
      REG_DEAD r182:DI
    Add original<-inheritance after:
  383: r129:DI=r196:DI

    Inheritance reuse change 129->196 (bb13):
  105: debug res_tp => r196:DI
    Inheritance reuse change 129->196 (bb13):
  376: r190:DI=r196:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=197 from oldreg=129, assigning class GENERAL_REGS to inheritance r197
    Original reg change 129->197 (bb19):
  173: r197:DI=r184:DI
      REG_DEAD r184:DI
    Add original<-inheritance after:
  384: r129:DI=r197:DI

    Inheritance reuse change 129->197 (bb19):
  174: debug res_m => r197:DI
    Inheritance reuse change 129->197 (bb19):
  379: r192:DI=r197:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 20
EBB 21
EBB 22
EBB 23
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=198, assigning class NO_REGS to save r198
  235: [r172:DI+r150:DI+0x4]=r186:DF
      REG_DEAD r186:DF
      REG_DEAD r150:DI
    Add reg<-save before:
  386: r150:DI=r198:DI

  225: xmm1:DF=[r121:DI+r150:DI+0x4]
    Add save<-reg after:
  385: r198:DI=r150:DI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30

********** Pseudo live ranges #2: **********

  BB 16
   Insn 140: point = 0, n_alt = 0
   Insn 139: point = 0, n_alt = 4
   Insn 138: point = 0, n_alt = 4
   Insn 137: point = 0, n_alt = 0
   Insn 136: point = 0, n_alt = 4
  BB 30
   Insn 306: point = 0, n_alt = -1
   Insn 305: point = 0, n_alt = 3
  BB 20
   Insn 368: point = 2, n_alt = -1
  BB 18
   Insn 365: point = 3, n_alt = -1
  BB 17
   Insn 156: point = 4, n_alt = -1
   Insn 155: point = 4, n_alt = 0
   Insn 153: point = 4, n_alt = 0
   Insn 150: point = 5, n_alt = 0
   Insn 148: point = 6, n_alt = 0
   Insn 147: point = 6, n_alt = 3
   Insn 146: point = 6, n_alt = -2
   Insn 145: point = 7, n_alt = -2
  BB 15
   Insn 133: point = 8, n_alt = -1
   Insn 132: point = 8, n_alt = 0
   Insn 129: point = 8, n_alt = -2
   Insn 353: point = 10, n_alt = -2
   Insn 128: point = 11, n_alt = 0
   Insn 127: point = 11, n_alt = -2
   Insn 126: point = 11, n_alt = 0
   Insn 125: point = 11, n_alt = 3
   Insn 124: point = 11, n_alt = 3
  BB 14
   Insn 7: point = 12, n_alt = 0
   Insn 120: point = 13, n_alt = 0
  BB 10
   Insn 362: point = 16, n_alt = -1
   Insn 10: point = 16, n_alt = 5
  BB 13
   Insn 118: point = 17, n_alt = -1
   Insn 117: point = 17, n_alt = 0
   Insn 109: point = 17, n_alt = 3
   Insn 107: point = 19, n_alt = 1
   Insn 376: point = 20, n_alt = 3
	   Creating copy r190<-r196@13
   Insn 383: point = 22, n_alt = -1
   Insn 104: point = 23, n_alt = 5
	Hard reg 0 is preferable by r196 with profit 13
   Insn 352: point = 25, n_alt = -2
   Insn 103: point = 26, n_alt = 0
   Insn 102: point = 26, n_alt = -2
   Insn 99: point = 26, n_alt = 0
  BB 9
   Insn 48: point = 29, n_alt = -1
   Insn 47: point = 29, n_alt = 0
  BB 8
   Insn 360: point = 31, n_alt = -1
   Insn 11: point = 31, n_alt = 5
  BB 6
   Insn 358: point = 32, n_alt = -1
   Insn 12: point = 32, n_alt = 5
  BB 29
   Insn 293: point = 33, n_alt = -1
   Insn 292: point = 33, n_alt = 0
   Insn 288: point = 33, n_alt = 0
  BB 28
   Insn 285: point = 35, n_alt = -1
   Insn 284: point = 35, n_alt = 0
  BB 27
   Insn 277: point = 36, n_alt = -1
   Insn 276: point = 36, n_alt = 0
   Insn 273: point = 36, n_alt = 0
  BB 26
   Insn 268: point = 38, n_alt = 0
  BB 24
   Insn 371: point = 40, n_alt = -1
  BB 25
   Insn 260: point = 41, n_alt = -1
   Insn 259: point = 41, n_alt = 0
   Insn 258: point = 41, n_alt = 0
   Insn 255: point = 42, n_alt = 0
   Insn 253: point = 43, n_alt = 15
   Insn 357: point = 44, n_alt = -2
   Insn 251: point = 45, n_alt = 0
   Insn 382: point = 46, n_alt = 3
   Insn 250: point = 47, n_alt = -2
  BB 22
   Insn 210: point = 49, n_alt = -1
   Insn 209: point = 49, n_alt = 0
   Insn 208: point = 49, n_alt = 0
   Insn 205: point = 51, n_alt = 14
   Insn 203: point = 52, n_alt = 0
   Insn 202: point = 54, n_alt = 3
   Insn 197: point = 55, n_alt = 0
   Insn 196: point = 57, n_alt = 2
  BB 23
   Insn 243: point = 60, n_alt = -1
   Insn 242: point = 60, n_alt = 0
   Insn 241: point = 60, n_alt = 0
   Insn 238: point = 61, n_alt = 0
   Insn 235: point = 62, n_alt = 15
   Insn 386: point = 63, n_alt = -1
	Hard reg 0 is preferable by r198 with profit 302
   Insn 233: point = 65, n_alt = 15
   Insn 356: point = 66, n_alt = -2
   Insn 355: point = 67, n_alt = -2
   Insn 226: point = 68, n_alt = 0
   Insn 381: point = 69, n_alt = 3
   Insn 385: point = 70, n_alt = -1
	Hard reg 0 is preferable by r198 with profit 604
   Insn 225: point = 72, n_alt = 14
   Insn 224: point = 72, n_alt = -2
   Insn 215: point = 73, n_alt = 0
   Insn 214: point = 75, n_alt = 0
   Insn 380: point = 77, n_alt = 0
  BB 21
   Insn 8: point = 79, n_alt = 0
   Insn 191: point = 80, n_alt = 3
  BB 19
   Insn 186: point = 82, n_alt = -1
   Insn 185: point = 82, n_alt = 0
   Insn 192: point = 82, n_alt = 3
   Insn 379: point = 84, n_alt = 3
	   Creating copy r192<-r197@13
   Insn 9: point = 86, n_alt = 0
   Insn 378: point = 87, n_alt = 1
   Insn 178: point = 89, n_alt = 2
   Insn 377: point = 90, n_alt = -2
	Hard reg 1 is preferable by r191 with profit 13
   Insn 177: point = 91, n_alt = 0
   Insn 176: point = 92, n_alt = 0
   Insn 384: point = 93, n_alt = -1
   Insn 173: point = 94, n_alt = 5
	Hard reg 0 is preferable by r197 with profit 13
   Insn 354: point = 96, n_alt = -2
   Insn 172: point = 97, n_alt = 0
   Insn 171: point = 97, n_alt = -2
   Insn 170: point = 98, n_alt = -2
   Insn 169: point = 99, n_alt = -2
   Insn 168: point = 100, n_alt = 0
   Insn 167: point = 100, n_alt = 0
   Insn 166: point = 101, n_alt = 0
   Insn 165: point = 102, n_alt = 0
  BB 11
   Insn 64: point = 104, n_alt = 0
   Insn 63: point = 104, n_alt = -2
   Insn 62: point = 105, n_alt = -2
   Insn 347: point = 107, n_alt = -2
   Insn 61: point = 108, n_alt = 0
   Insn 374: point = 109, n_alt = 3
   Insn 60: point = 111, n_alt = -2
   Insn 57: point = 112, n_alt = -2
   Insn 346: point = 114, n_alt = -2
   Insn 56: point = 115, n_alt = 0
   Insn 55: point = 115, n_alt = -2
  BB 5
   Insn 34: point = 117, n_alt = -1
   Insn 33: point = 117, n_alt = 0
  BB 12
   Insn 93: point = 119, n_alt = 0
   Insn 92: point = 119, n_alt = -2
   Insn 91: point = 120, n_alt = -2
   Insn 351: point = 121, n_alt = -2
   Insn 85: point = 122, n_alt = -2
   Insn 350: point = 124, n_alt = -2
   Insn 84: point = 125, n_alt = 0
   Insn 375: point = 126, n_alt = 3
   Insn 83: point = 128, n_alt = -2
   Insn 82: point = 129, n_alt = -2
   Insn 349: point = 130, n_alt = -2
   Insn 72: point = 131, n_alt = -2
   Insn 348: point = 133, n_alt = -2
   Insn 71: point = 134, n_alt = 0
   Insn 70: point = 134, n_alt = -2
  BB 7
   Insn 41: point = 136, n_alt = -1
   Insn 40: point = 136, n_alt = 0
  BB 4
   Insn 29: point = 138, n_alt = -1
   Insn 28: point = 138, n_alt = 0
  BB 3
   Insn 24: point = 139, n_alt = -1
  BB 2
   Insn 19: point = 140, n_alt = -1
   Insn 18: point = 140, n_alt = 0
   Insn 17: point = 140, n_alt = 4
   Insn 16: point = 141, n_alt = 3
   Insn 5: point = 142, n_alt = 5
   Insn 345: point = 144, n_alt = -2
   Insn 4: point = 145, n_alt = 5
   Insn 344: point = 147, n_alt = -2
   Insn 2: point = 148, n_alt = -2
   Insn 343: point = 150, n_alt = -2
 r82: [134..141] [115..118] [33..103] [27..30]
 r83: [136..140] [117..118] [29..30]
 r84: [104..105]
 r87: [17..17] [14..15]
 r99: [72..78] [47..51]
 r110: [79..91] [58..60] [33..41]
 r111: [17..26] [4..15]
 r112: [6..8]
 r113: [4..12]
 r114: [33..87]
 r115: [33..86]
 r116: [76..78] [49..55]
 r118: [41..79]
 r119: [111..112]
 r120: [82..92] [33..38]
 r121: [41..80]
 r122: [65..78] [43..49]
 r124: [4..13]
 r129: [31..93] [0..22]
 r130: [139..148] [18..30]
 r132: [138..145] [110..118] [33..103] [17..30] [4..15]
 r133: [127..142] [33..103] [17..30] [4..15]
 r134: [129..131]
 r140: [119..122]
 r142: [99..102]
 r143: [98..101]
 r144: [97..100]
 r145: [56..57]
 r146: [53..54]
 r147: [50..52]
 r149: [74..75]
 r150: [71..73] [62..63]
 r172: [33..82]
 r173: [149..150]
 r174: [146..147]
 r175: [143..144]
 r176: [113..114]
 r177: [106..107]
 r178: [132..133]
 r179: [128..130]
 r180: [123..124]
 r181: [120..121]
 r182: [24..25]
 r183: [9..10]
 r184: [95..96]
 r185: [65..67]
 r186: [62..66]
 r187: [43..44]
 r188: [108..109]
 r189: [125..126]
 r190: [19..20]
 r191: [88..90]
 r192: [83..84]
 r193: [76..77]
 r194: [68..69]
 r195: [45..46]
 r196: [21..23]
 r197: [85..94]
 r198: [64..70]
Compressing live ranges: from 151 to 87 - 57%
Ranges after the compression:
 r82: [79..80] [67..68] [13..56]
 r83: [79..80] [67..68] [13..14]
 r84: [57..58]
 r87: [4..6]
 r99: [38..43] [22..25]
 r110: [44..52] [30..31] [15..17]
 r111: [0..12]
 r112: [0..1]
 r113: [0..3]
 r114: [15..50]
 r115: [15..50]
 r116: [42..43] [23..27]
 r118: [17..44]
 r119: [63..64]
 r120: [46..52] [15..16]
 r121: [17..45]
 r122: [34..43] [18..23]
 r124: [0..3]
 r129: [15..52] [0..10]
 r130: [79..84] [7..14]
 r132: [79..82] [63..68] [0..56]
 r133: [75..80] [0..56]
 r134: [75..76]
 r140: [69..70]
 r142: [55..56]
 r143: [55..56]
 r144: [55..56]
 r145: [28..29]
 r146: [26..27]
 r147: [24..25]
 r149: [40..41]
 r150: [38..39] [32..33]
 r172: [15..46]
 r173: [85..86]
 r174: [83..84]
 r175: [81..82]
 r176: [65..66]
 r177: [59..60]
 r178: [77..78]
 r179: [75..76]
 r180: [71..72]
 r181: [69..70]
 r182: [11..12]
 r183: [2..3]
 r184: [53..54]
 r185: [34..35]
 r186: [32..35]
 r187: [18..19]
 r188: [61..62]
 r189: [73..74]
 r190: [7..8]
 r191: [51..52]
 r192: [47..48]
 r193: [42..43]
 r194: [36..37]
 r195: [20..21]
 r196: [9..10]
 r197: [49..52]
 r198: [34..37]

********** Assignment #1: **********

	 Assigning to 195 (cl=GENERAL_REGS, orig=132, freq=1174, tfirst=195, tfreq=1174)...
	   Assign 0 to reload r195 (freq=1174)
	 Assigning to 193 (cl=INDEX_REGS, orig=114, freq=604, tfirst=193, tfreq=604)...
	   Assign 2 to reload r193 (freq=604)
	 Assigning to 194 (cl=GENERAL_REGS, orig=133, freq=604, tfirst=194, tfreq=604)...
	   Assign 0 to reload r194 (freq=604)
	 Assigning to 190 (cl=INDEX_REGS, orig=129, freq=26, tfirst=190, tfreq=39)...
	   Assign 0 to reload r190 (freq=26)
	Hard reg 0 is preferable by r196 with profit 26
	 Assigning to 196 (cl=GENERAL_REGS, orig=129, freq=39, tfirst=190, tfreq=39)...
	   Assign 0 to inheritance r196 (freq=39)
	 Assigning to 191 (cl=GENERAL_REGS, orig=114, freq=39, tfirst=191, tfreq=39)...
	   Assign 5 to reload r191 (freq=39)
	 Assigning to 197 (cl=GENERAL_REGS, orig=129, freq=39, tfirst=192, tfreq=39)...
	   Assign 4 to inheritance r197 (freq=39)
	Hard reg 4 is preferable by r192 with profit 13
	 Assigning to 192 (cl=GENERAL_REGS, orig=129, freq=26, tfirst=192, tfreq=39)...
	   Assign 4 to reload r192 (freq=26)
	 Assigning to 188 (cl=GENERAL_REGS, orig=132, freq=26, tfirst=188, tfreq=26)...
	   Assign 0 to reload r188 (freq=26)
	 Assigning to 189 (cl=GENERAL_REGS, orig=133, freq=26, tfirst=189, tfreq=26)...
	   Assign 0 to reload r189 (freq=26)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 2 out of 2 (100.00%)
	     Keep split r198 (orig=r150)
Split 1 out of 1 (100.00%)

********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 385:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 386:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 384:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 383:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 7

******** Rematerialization #1: ********

df_worklist_dataflow_doublequeue: n_basic_blocks 31 n_edges 45 count 31 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 31 n_edges 45 count 31 (    1)

Cands:
0 (nop=0, remat_regno=129, reload_regno=-1):
(insn 12 37 358 6 (set (reg/v/f:DI 129 [ <retval> ])
                    (const_int 0 [0])) "cmodules/fbgc_math.c":53:2 66 {*movdi_internal}
                 (expr_list:REG_EQUAL (const_int 0 [0])
                    (nil)))
1 (nop=0, remat_regno=129, reload_regno=-1):
(insn 383 104 105 13 (set (reg/v/f:DI 129 [ <retval> ])
                    (reg/v/f:DI 196 [orig:129 <retval> ] [129])) "cmodules/fbgc_math.c":70:34 66 {*movdi_internal}
                 (nil))
2 (nop=0, remat_regno=129, reload_regno=-1):
(insn 384 173 174 19 (set (reg/v/f:DI 129 [ <retval> ])
                    (reg/v/f:DI 197 [orig:129 <retval> ] [129])) "cmodules/fbgc_math.c":85:33 66 {*movdi_internal}
                 (nil))

BB 2:
  register live in: 1 [dx] 2 [cx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 17 [flags] 19 [frame] 82 83 130 132 133
  changed regs: 82 83 130 132 133 173 174 175
  dead regs: 1 [dx] 2 [cx] 5 [di] 173 174 175
  livein cands in BB 2:

        0

BB 3:
  register live in: 6 [bp] 7 [sp] 16 [argp] 17 [flags] 19 [frame] 82 83 130 132 133
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 130 132 133
  changed regs:
  dead regs: 17 [flags]
  livein cands in BB 3:

        0

BB 4:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 132 133
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 132 133
  changed regs:
  dead regs: 17 [flags]
  livein cands in BB 4:

        0

BB 5:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 132
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 132
  changed regs:
  dead regs: 17 [flags] 83
  livein cands in BB 5:

        0

BB 6:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
  changed regs: 129
  dead regs:
  cands generated in BB 6:

        0
  livein cands in BB 6:

        0
  pavout cands in BB 6:

        0
  avout cands in BB 6:

        0

BB 7:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 133
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 133
  changed regs:
  dead regs: 17 [flags] 83
  livein cands in BB 7:

        0

BB 8:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
  changed regs: 129
  dead regs:
  cands generated in BB 8:

        0
  livein cands in BB 8:

        0
  pavout cands in BB 8:

        0
  avout cands in BB 8:

        0

BB 9:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 130 132 133
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 130 132 133
  changed regs:
  dead regs: 17 [flags] 83
  livein cands in BB 9:

        0

BB 10:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
  changed regs: 129
  dead regs:
  cands generated in BB 10:

        0
  livein cands in BB 10:

        0
  pavout cands in BB 10:

        0
  avout cands in BB 10:

        0

BB 11:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 132
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  changed regs: 0 [ax] 5 [di] 20 [xmm0] 84 119 176 177 188
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 82 84 119 132 176 177 188
  livein cands in BB 11:

        0

BB 12:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 133
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  changed regs: 0 [ax] 5 [di] 20 [xmm0] 21 [xmm1] 134 140 178 179 180 181 189
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 82 133 134 140 178 179 180 181 189
  livein cands in BB 12:

        0

BB 13:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 130 132 133
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 87 111 129 132 133
  changed regs: 0 [ax] 5 [di] 87 111 129 182 190 196
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 82 130 182 190 196
  livein cands in BB 13:

        0

BB 14:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 87 111 129 132 133
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111 113 124 129 132 133
  changed regs: 113 124
  dead regs: 87
  livein cands in BB 14:

        0

BB 15:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111 113 124 129 132 133
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111 112 113 124 129 132 133
  changed regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 112 183
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 183
  livein cands in BB 15:

        0

BB 16:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  register live out: 7 [sp] 16 [argp] 19 [frame]
  changed regs: 1 [dx] 2 [cx] 4 [si] 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
  livein cands in BB 16:

        0

BB 17:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111 112 113 124 129 132 133
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111 113 124 129 132 133
  changed regs: 1 [dx] 4 [si] 5 [di] 113 124
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 112
  livein cands in BB 17:

        0

BB 18:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
  changed regs:
  dead regs:
  livein cands in BB 18:

        0

BB 19:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 132 133
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 110 114 115 120 129 132 133 172
  changed regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 110 114 115 120 129 142 143 144 172 184 191 192 197
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 142 143 144 184 191 192 197
  livein cands in BB 19:

        0

BB 20:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
  changed regs:
  dead regs:
  livein cands in BB 20:

        0

BB 21:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 110 114 115 129 132 133 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 110 114 115 118 121 129 132 133 172
  changed regs: 118 121
  dead regs:
  livein cands in BB 21:

        0

BB 22:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 110 114 115 118 121 129 132 133 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 99 114 115 116 118 121 122 129 132 133 172
  changed regs: 99 116 122 145 146 147
  dead regs: 17 [flags] 110 145 146 147
  livein cands in BB 22:

        0

BB 23:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 99 114 115 116 118 121 122 129 132 133 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 110 114 115 118 121 129 132 133 172
  changed regs: 20 [xmm0] 21 [xmm1] 110 118 149 150 185 186 193 194 198
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 99 116 122 149 150 185 186 193 194 198
  livein cands in BB 23:

        0

BB 24:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 110 114 115 129 132 133 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 110 114 115 129 132 133 172
  changed regs:
  dead regs:
  livein cands in BB 24:

        0

BB 25:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 99 114 115 118 121 122 129 132 133 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 110 114 115 118 121 129 132 133 172
  changed regs: 20 [xmm0] 110 118 187 195
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 99 122 187 195
  livein cands in BB 25:

        0

BB 26:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 110 114 115 129 132 133 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 110 114 115 120 129 132 133 172
  changed regs: 120
  dead regs:
  livein cands in BB 26:

        0

BB 27:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 110 114 115 120 129 132 133 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 110 114 115 120 129 132 133 172
  changed regs: 115
  dead regs: 17 [flags]
  livein cands in BB 27:

        0

BB 28:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 110 114 115 120 129 132 133 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 110 114 115 120 129 132 133 172
  changed regs:
  dead regs: 17 [flags]
  livein cands in BB 28:

        0

BB 29:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 110 114 115 120 129 132 133 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 110 114 115 120 129 132 133 172
  changed regs: 115
  dead regs: 17 [flags]
  livein cands in BB 29:

        0

BB 30:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  changed regs: 0 [ax]
  dead regs: 129
  livein cands in BB 30:

        0
  pavin cands in BB 30:

        0
subreg regs:
  Slot 0 regnos (width = 0):	 132
  Slot 1 regnos (width = 0):	 198
  Slot 2 regnos (width = 0):	 133
  Slot 3 regnos (width = 0):	 114
  Slot 4 regnos (width = 0):	 129
Changing spilled pseudos to memory in insn #4
Changing spilled pseudos to memory in insn #5
Changing spilled pseudos to memory in insn #12
Changing spilled pseudos to memory in insn #11
Changing spilled pseudos to memory in insn #10
Changing spilled pseudos to memory in insn #374
Changing spilled pseudos to memory in insn #375
Changing spilled pseudos to memory in insn #383
Changing spilled pseudos to memory in insn #124
Changing spilled pseudos to memory in insn #125
Changing spilled pseudos to memory in insn #147
Changing spilled pseudos to memory in insn #384
Changing spilled pseudos to memory in insn #378
Changing spilled pseudos to memory in insn #179
Changing spilled pseudos to memory in insn #200
Changing spilled pseudos to memory in insn #380
Changing spilled pseudos to memory in insn #385
Changing spilled pseudos to memory in insn #381
Changing spilled pseudos to memory in insn #386
Changing spilled pseudos to memory in insn #382
Changing spilled pseudos to memory in insn #305
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=112, prev_offset=64)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=-56, prev_offset=0)

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 305:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 382:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 386:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 381:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 385:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 378:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 384:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 147:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 383:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 375:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 374:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=112, prev_offset=112)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=48, prev_offset=48)
Can eliminate 19 to 6 (offset=-56, prev_offset=0)
changing reg in insn 16
changing reg in insn 268
changing reg in insn 258
changing reg in insn 241
changing reg in insn 209
changing reg in insn 191
changing reg in insn 177
changing reg in insn 176
changing reg in insn 167
changing reg in insn 166
changing reg in insn 165
changing reg in insn 163
changing reg in insn 99
changing reg in insn 70
changing reg in insn 55
changing reg in insn 17
changing reg in insn 166
changing reg in insn 165
changing reg in insn 17
changing reg in insn 47
changing reg in insn 40
changing reg in insn 33
changing reg in insn 28
changing reg in insn 18
changing reg in insn 62
changing reg in insn 63
changing reg in insn 109
changing reg in insn 120
changing reg in insn 110
changing reg in insn 205
changing reg in insn 224
changing reg in insn 250
changing reg in insn 206
changing reg in insn 258
changing reg in insn 241
changing reg in insn 177
changing reg in insn 284
changing reg in insn 259
changing reg in insn 242
changing reg in insn 196
changing reg in insn 178
changing reg in insn 99
changing reg in insn 155
changing reg in insn 117
changing reg in insn 107
changing reg in insn 102
changing reg in insn 100
changing reg in insn 129
changing reg in insn 146
changing reg in insn 132
changing reg in insn 130
changing reg in insn 150
changing reg in insn 7
changing reg in insn 155
changing reg in insn 151
changing reg in insn 150
changing reg in insn 145
changing reg in insn 122
changing reg in insn 288
changing reg in insn 9
changing reg in insn 273
changing reg in insn 292
changing reg in insn 289
changing reg in insn 288
changing reg in insn 280
changing reg in insn 276
changing reg in insn 274
changing reg in insn 273
changing reg in insn 196
changing reg in insn 197
changing reg in insn 214
changing reg in insn 202
changing reg in insn 200
changing reg in insn 198
changing reg in insn 255
changing reg in insn 238
changing reg in insn 8
changing reg in insn 259
changing reg in insn 256
changing reg in insn 255
changing reg in insn 242
changing reg in insn 239
changing reg in insn 238
changing reg in insn 197
changing reg in insn 194
changing reg in insn 57
changing reg in insn 60
changing reg in insn 58
changing reg in insn 268
changing reg in insn 176
changing reg in insn 292
changing reg in insn 276
changing reg in insn 185
changing reg in insn 191
changing reg in insn 225
changing reg in insn 205
changing reg in insn 208
changing reg in insn 253
changing reg in insn 233
changing reg in insn 357
changing reg in insn 355
changing reg in insn 153
changing reg in insn 120
changing reg in insn 153
changing reg in insn 127
changing reg in insn 2
changing reg in insn 109
changing reg in insn 16
changing reg in insn 72
changing reg in insn 82
changing reg in insn 85
changing reg in insn 92
changing reg in insn 165
changing reg in insn 169
changing reg in insn 166
changing reg in insn 170
changing reg in insn 167
changing reg in insn 171
changing reg in insn 196
changing reg in insn 197
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 208
changing reg in insn 205
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 235
changing reg in insn 225
changing reg in insn 192
changing reg in insn 235
changing reg in insn 208
changing reg in insn 343
changing reg in insn 2
changing reg in insn 344
changing reg in insn 4
changing reg in insn 345
changing reg in insn 5
changing reg in insn 346
changing reg in insn 57
changing reg in insn 347
changing reg in insn 62
changing reg in insn 348
changing reg in insn 72
changing reg in insn 349
changing reg in insn 83
changing reg in insn 350
changing reg in insn 85
changing reg in insn 351
changing reg in insn 91
changing reg in insn 352
changing reg in insn 104
changing reg in insn 353
changing reg in insn 129
changing reg in insn 354
changing reg in insn 173
changing reg in insn 355
changing reg in insn 233
changing reg in insn 356
changing reg in insn 235
changing reg in insn 357
changing reg in insn 253
deleting insn with uid = 343.
deleting insn with uid = 344.
deleting insn with uid = 345.
deleting insn with uid = 346.
deleting insn with uid = 57.
deleting insn with uid = 60.
deleting insn with uid = 347.
deleting insn with uid = 62.
deleting insn with uid = 63.
deleting insn with uid = 348.
deleting insn with uid = 72.
deleting insn with uid = 349.
deleting insn with uid = 82.
deleting insn with uid = 83.
deleting insn with uid = 350.
deleting insn with uid = 85.
deleting insn with uid = 351.
deleting insn with uid = 91.
deleting insn with uid = 92.
deleting insn with uid = 352.
deleting insn with uid = 104.
deleting insn with uid = 376.
deleting insn with uid = 353.
deleting insn with uid = 146.
deleting insn with uid = 169.
deleting insn with uid = 170.
deleting insn with uid = 171.
deleting insn with uid = 354.
deleting insn with uid = 379.
deleting insn with uid = 224.
deleting insn with uid = 355.
deleting insn with uid = 356.
deleting insn with uid = 250.
deleting insn with uid = 357.


try_optimize_cfg iteration 1

Forwarding edge 17->18 to 30 failed.
Forwarding edge 19->20 to 30 failed.
Forwarding edge 23->24 to 26 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 56.
rescanning insn with uid = 61.
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 71.
rescanning insn with uid = 84.
verify found no changes in insn with uid = 93.
verify found no changes in insn with uid = 103.
verify found no changes in insn with uid = 128.
verify found no changes in insn with uid = 140.
verify found no changes in insn with uid = 148.
verify found no changes in insn with uid = 172.
rescanning insn with uid = 226.
rescanning insn with uid = 251.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 31 n_edges 45 count 39 (  1.3)
df_worklist_dataflow_doublequeue: n_basic_blocks 31 n_edges 45 count 44 (  1.4)


one_arg_math

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0] 21 [xmm1] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;;  ref usage 	r0={28d,30u} r1={22d,12u} r2={18d,5u} r3={5d,8u} r4={19d,9u} r5={23d,10u} r6={4d,13u} r7={1d,64u} r8={13d} r9={13d} r10={13d} r11={13d} r12={13d} r13={13d} r14={13d} r15={13d} r17={42d,16u} r18={13d} r20={15d,10u} r21={15d,4u} r22={14d} r23={14d} r24={14d} r25={14d} r26={14d} r27={14d} r28={13d} r29={13d} r30={13d} r31={13d} r32={13d} r33={13d} r34={13d} r35={13d} r36={14d} r37={14d} r38={13d} r39={13d} r40={3d,7u} r41={1d,2u} r42={3d,8u} r43={1d,15u,2e} r44={13d} r45={13d} r46={13d} r47={13d} r48={13d} r49={13d} r50={13d} r51={13d} r52={13d} r53={13d} r54={13d} r55={13d} r56={13d} r57={13d} r58={13d} r59={13d} r60={13d} r61={13d} r62={13d} r63={13d} r64={13d} r65={13d} r66={13d} r67={13d} r68={13d} r69={13d} r70={13d} r71={13d} r72={13d} r73={13d} r74={13d} r75={13d} 
;;    total ref usage 1190{975d,213u,2e} in 193{180 regular + 13 call} insns.
(note 1 0 13 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 72990323 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [always]  count:72990323 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 17 [flags] 43 [r15]
;; live  in  	 1 [dx] 2 [cx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 17 [flags] 43 [r15]
;; live  kill	
(note 13 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 13 4 2 (set (reg/v/f:DI 3 bx [orig:130 arg ] [130])
        (reg:DI 5 di [173])) "cmodules/fbgc_math.c":52:1 66 {*movdi_internal}
     (nil))
(insn 4 2 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-40 S8 A64])
        (reg:DI 1 dx [174])) "cmodules/fbgc_math.c":52:1 66 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [10 %sfp+-24 S8 A64])
        (reg:DI 2 cx [175])) "cmodules/fbgc_math.c":52:1 66 {*movdi_internal}
     (nil))
(note 6 5 15 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 15 6 16 2 (debug_marker) "cmodules/fbgc_math.c":53:2 -1
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 43 r15 [orig:82 _1 ] [82])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:130 arg ] [130]) [3 *arg_50(D)+0 S8 A64])) "cmodules/fbgc_math.c":53:12 66 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:QI 0 ax [orig:83 _2 ] [83])
        (mem:QI (reg/f:DI 43 r15 [orig:82 _1 ] [82]) [0 _1->type+0 S1 A8])) "cmodules/fbgc_math.c":53:15 69 {*movqi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 0 ax [orig:83 _2 ] [83])
            (const_int 7 [0x7]))) "cmodules/fbgc_math.c":53:2 9 {*cmpqi_1}
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (eq (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 160)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 214748374 (nil))
 -> 160)
;;  succ:       3 [80.0% (adjusted)]  count:58392258 (estimated locally) (FALLTHRU)
;;              19 [20.0% (adjusted)]  count:14598065 (estimated locally)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 17 [flags] 43 [r15]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 17 [flags] 43 [r15]

;; basic block 3, loop depth 0, count 72990323 (estimated locally), maybe hot
;; Invalid sum of incoming counts 58392258 (estimated locally), should be 72990323 (estimated locally)
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [80.0% (adjusted)]  count:58392258 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 17 [flags] 43 [r15]
;; lr  use 	 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 17 [flags] 43 [r15]
;; live  gen 	
;; live  kill	
(note 20 19 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(jump_insn 24 20 25 3 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 402653190 (nil))
 -> 45)
;;  succ:       4 [62.5% (adjusted)]  count:45618952 (estimated locally) (FALLTHRU)
;;              9 [37.5% (adjusted)]  count:27371371 (estimated locally)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r15]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 43 [r15]

;; basic block 4, loop depth 0, count 72990323 (estimated locally), maybe hot
;; Invalid sum of incoming counts 45618952 (estimated locally), should be 72990323 (estimated locally)
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [62.5% (adjusted)]  count:45618952 (estimated locally) (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 43 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 43 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(note 25 24 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 25 29 4 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 0 ax [orig:83 _2 ] [83])
            (const_int 4 [0x4]))) "cmodules/fbgc_math.c":53:2 9 {*cmpqi_1}
     (nil))
(jump_insn 29 28 30 4 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 536870926 (nil))
 -> 38)
;;  succ:       5 [50.0% (adjusted)]  count:36495161 (estimated locally) (FALLTHRU)
;;              7 [50.0% (adjusted)]  count:36495162 (estimated locally)
;; lr  out 	 0 [ax] 7 [sp] 43 [r15]
;; live  out 	 0 [ax] 7 [sp] 43 [r15]

;; basic block 5, loop depth 0, count 72990323 (estimated locally), maybe hot
;; Invalid sum of incoming counts 36495161 (estimated locally), should be 72990323 (estimated locally)
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [50.0% (adjusted)]  count:36495161 (estimated locally) (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 43 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 43 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(note 30 29 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 30 34 5 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 0 ax [orig:83 _2 ] [83])
            (const_int 2 [0x2]))) "cmodules/fbgc_math.c":53:2 9 {*cmpqi_1}
     (nil))
(jump_insn 34 33 37 5 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 477218590 (nil))
 -> 52)
;;  succ:       6 [55.6% (adjusted)]  count:40550180 (estimated locally) (FALLTHRU)
;;              11 [44.4% (adjusted)]  count:32440143 (estimated locally)
;; lr  out 	 7 [sp] 43 [r15]
;; live  out 	 7 [sp] 43 [r15]

;; basic block 6, loop depth 0, count 40550180 (estimated locally), maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [55.6% (adjusted)]  count:40550180 (estimated locally) (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 37 34 12 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 12 37 358 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [10 %sfp+-8 S8 A64])
        (const_int 0 [0])) "cmodules/fbgc_math.c":53:2 66 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(jump_insn 358 12 359 6 (set (pc)
        (label_ref 304)) 660 {jump}
     (nil)
 -> 304)
;;  succ:       30 [always]  count:40550180 (estimated locally)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 359 358 38)
;; basic block 7, loop depth 0, count 72990323 (estimated locally), maybe hot
;; Invalid sum of incoming counts 36495162 (estimated locally), should be 72990323 (estimated locally)
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [50.0% (adjusted)]  count:36495162 (estimated locally)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 43 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 43 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 38 359 39 7 41 (nil) [1 uses])
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:83 _2 ] [83])
            (const_int 5 [0x5]))) "cmodules/fbgc_math.c":53:2 9 {*cmpqi_1}
     (nil))
(jump_insn 41 40 44 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 858993454 (nil))
 -> 67)
;;  succ:       8 [20.0% (adjusted)]  count:14598065 (estimated locally) (FALLTHRU)
;;              12 [80.0% (adjusted)]  count:58392258 (estimated locally)
;; lr  out 	 7 [sp] 43 [r15]
;; live  out 	 7 [sp] 43 [r15]

;; basic block 8, loop depth 0, count 14598065 (estimated locally), maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [20.0% (adjusted)]  count:14598065 (estimated locally) (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 44 41 11 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 11 44 360 8 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [10 %sfp+-8 S8 A64])
        (const_int 0 [0])) "cmodules/fbgc_math.c":53:2 66 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(jump_insn 360 11 361 8 (set (pc)
        (label_ref 304)) 660 {jump}
     (nil)
 -> 304)
;;  succ:       30 [always]  count:14598065 (estimated locally)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 361 360 45)
;; basic block 9, loop depth 0, count 72990323 (estimated locally), maybe hot
;; Invalid sum of incoming counts 27371371 (estimated locally), should be 72990323 (estimated locally)
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [37.5% (adjusted)]  count:27371371 (estimated locally)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 43 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 43 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 45 361 46 9 40 (nil) [1 uses])
(note 46 45 47 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:83 _2 ] [83])
            (const_int 8 [0x8]))) "cmodules/fbgc_math.c":53:2 9 {*cmpqi_1}
     (nil))
(jump_insn 48 47 51 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 715827886 (nil))
 -> 96)
;;  succ:       10 [33.3% (adjusted)]  count:24330108 (estimated locally) (FALLTHRU)
;;              13 [66.7% (adjusted)]  count:48660215 (estimated locally)
;; lr  out 	 3 [bx] 7 [sp] 43 [r15]
;; live  out 	 3 [bx] 7 [sp] 43 [r15]

;; basic block 10, loop depth 0, count 24330108 (estimated locally), maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [33.3% (adjusted)]  count:24330108 (estimated locally) (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 51 48 10 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 10 51 362 10 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [10 %sfp+-8 S8 A64])
        (const_int 0 [0])) "cmodules/fbgc_math.c":53:2 66 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(jump_insn 362 10 363 10 (set (pc)
        (label_ref 304)) 660 {jump}
     (nil)
 -> 304)
;;  succ:       30 [always]  count:24330108 (estimated locally)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 363 362 52)
;; basic block 11, loop depth 0, count 14598065 (estimated locally), maybe hot
;; Invalid sum of incoming counts 32440143 (estimated locally), should be 14598065 (estimated locally)
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [44.4% (adjusted)]  count:32440143 (estimated locally)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r15]
;; lr  use 	 7 [sp] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 7 [sp] 43 [r15]
;; live  gen 	 0 [ax] 5 [di] 20 [xmm0]
;; live  kill	
(code_label 52 363 53 11 42 (nil) [1 uses])
(note 53 52 54 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(debug_insn 54 53 55 11 (debug_marker) "cmodules/fbgc_math.c":58:4 -1
     (nil))
(insn 55 54 56 11 (set (reg:DI 5 di)
        (reg/f:DI 43 r15 [orig:82 _1 ] [82])) "cmodules/fbgc_math.c":58:19 66 {*movdi_internal}
     (nil))
(call_insn 56 55 58 11 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_double") [flags 0x41]  <function_decl 0x7f213e3db700 convert_fbgc_object_to_double>) [0 convert_fbgc_object_to_double S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":58:19 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_double") [flags 0x41]  <function_decl 0x7f213e3db700 convert_fbgc_object_to_double>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(debug_insn 58 56 59 11 (var_location:DF dbarg (reg/v:DF 20 xmm0 [orig:119 dbarg ] [119])) "cmodules/fbgc_math.c":58:19 -1
     (nil))
(debug_insn 59 58 374 11 (debug_marker) "cmodules/fbgc_math.c":59:4 -1
     (nil))
(insn 374 59 61 11 (set (reg/v/f:DI 0 ax [orig:132 fun ] [132])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-40 S8 A64])) "cmodules/fbgc_math.c":59:11 66 {*movdi_internal}
     (nil))
(call_insn 61 374 64 11 (set (reg:DF 20 xmm0)
        (call (mem:QI (reg/v/f:DI 0 ax [orig:132 fun ] [132]) [0 *fun_57(D) S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":59:11 677 {*call_value}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(call_insn/j 64 61 65 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_double_object") [flags 0x41]  <function_decl 0x7f213e3e6d00 new_fbgc_double_object>) [0 new_fbgc_double_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":59:11 681 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_double_object") [flags 0x41]  <function_decl 0x7f213e3e6d00 new_fbgc_double_object>)
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
;;  succ:       EXIT [always]  count:14598065 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 65 64 67)
;; basic block 12, loop depth 0, count 14598065 (estimated locally), maybe hot
;; Invalid sum of incoming counts 58392258 (estimated locally), should be 14598065 (estimated locally)
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [80.0% (adjusted)]  count:58392258 (estimated locally)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r15]
;; lr  use 	 7 [sp] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 7 [sp] 43 [r15]
;; live  gen 	 0 [ax] 5 [di] 20 [xmm0] 21 [xmm1]
;; live  kill	
(code_label 67 65 68 12 44 (nil) [1 uses])
(note 68 67 69 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(debug_insn 69 68 70 12 (debug_marker) "cmodules/fbgc_math.c":63:4 -1
     (nil))
(insn 70 69 71 12 (set (reg:DI 5 di)
        (reg/f:DI 43 r15 [orig:82 _1 ] [82])) "cmodules/fbgc_math.c":63:27 66 {*movdi_internal}
     (nil))
(call_insn 71 70 73 12 (set (parallel:TI [
                (expr_list:REG_DEP_TRUE (reg:DF 20 xmm0)
                    (const_int 0 [0]))
                (expr_list:REG_DEP_TRUE (reg:DF 21 xmm1)
                    (const_int 8 [0x8]))
            ])
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_complex") [flags 0x41]  <function_decl 0x7f213e3db800 convert_fbgc_object_to_complex>) [0 convert_fbgc_object_to_complex S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":63:27 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_complex") [flags 0x41]  <function_decl 0x7f213e3db800 convert_fbgc_object_to_complex>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(note 73 71 77 12 NOTE_INSN_DELETED)
(debug_insn 77 73 375 12 (debug_marker) "cmodules/fbgc_math.c":64:4 -1
     (nil))
(insn 375 77 84 12 (set (reg/v/f:DI 0 ax [orig:133 zfun ] [133])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [10 %sfp+-24 S8 A64])) "cmodules/fbgc_math.c":64:9 66 {*movdi_internal}
     (nil))
(call_insn 84 375 86 12 (set (parallel:TI [
                (expr_list:REG_DEP_TRUE (reg:DF 20 xmm0)
                    (const_int 0 [0]))
                (expr_list:REG_DEP_TRUE (reg:DF 21 xmm1)
                    (const_int 8 [0x8]))
            ])
        (call (mem:QI (reg/v/f:DI 0 ax [orig:133 zfun ] [133]) [0 *zfun_58(D) S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":64:9 677 {*call_value}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list (use (reg:DF 21 xmm1))
        (expr_list (use (reg:DF 20 xmm0))
            (nil))))
(note 86 84 90 12 NOTE_INSN_DELETED)
(debug_insn 90 86 93 12 (debug_marker) "cmodules/fbgc_math.c":65:4 -1
     (nil))
(call_insn/j 93 90 94 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_complex_object") [flags 0x41]  <function_decl 0x7f213e3f0300 new_fbgc_complex_object>) [0 new_fbgc_complex_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":65:11 681 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_complex_object") [flags 0x41]  <function_decl 0x7f213e3f0300 new_fbgc_complex_object>)
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (expr_list:DF (use (reg:DF 21 xmm1))
            (nil))))
;;  succ:       EXIT [always]  count:14598065 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 94 93 96)
;; basic block 13, loop depth 0, count 14598065 (estimated locally), maybe hot
;; Invalid sum of incoming counts 48660215 (estimated locally), should be 14598065 (estimated locally)
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [66.7% (adjusted)]  count:48660215 (estimated locally)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 43 [r15]
;; lr  use 	 3 [bx] 7 [sp] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 3 [bx] 7 [sp] 43 [r15]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	
(code_label 96 94 97 13 45 (nil) [1 uses])
(note 97 96 98 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(debug_insn 98 97 99 13 (debug_marker) "cmodules/fbgc_math.c":69:4 -1
     (nil))
(insn 99 98 100 13 (set (reg/v:SI 6 bp [orig:111 sz ] [111])
        (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:82 _1 ] [82])
                (const_int 13 [0xd])) [5 MEM[(struct fbgc_tuple_object *)_1].size+0 S4 A8])) "cmodules/fbgc_math.c":69:11 67 {*movsi_internal}
     (nil))
(debug_insn 100 99 101 13 (var_location:SI sz (reg/v:SI 6 bp [orig:111 sz ] [111])) "cmodules/fbgc_math.c":69:11 -1
     (nil))
(debug_insn 101 100 102 13 (debug_marker) "cmodules/fbgc_math.c":70:4 -1
     (nil))
(insn 102 101 103 13 (set (reg:SI 5 di)
        (reg/v:SI 6 bp [orig:111 sz ] [111])) "cmodules/fbgc_math.c":70:34 67 {*movsi_internal}
     (nil))
(call_insn 103 102 383 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f213e3fec00 new_fbgc_tuple_object>) [0 new_fbgc_tuple_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":70:34 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f213e3fec00 new_fbgc_tuple_object>)
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 383 103 105 13 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [10 %sfp+-8 S8 A64])
        (reg/v/f:DI 0 ax [orig:129 <retval> ] [129])) "cmodules/fbgc_math.c":70:34 66 {*movdi_internal}
     (nil))
(debug_insn 105 383 106 13 (var_location:DI res_tp (reg/v/f:DI 0 ax [orig:129 <retval> ] [129])) "cmodules/fbgc_math.c":70:34 -1
     (nil))
(debug_insn 106 105 107 13 (debug_marker) "cmodules/fbgc_math.c":71:4 -1
     (nil))
(insn 107 106 108 13 (set (mem:SI (plus:DI (reg/v/f:DI 0 ax [orig:129 <retval> ] [129])
                (const_int 13 [0xd])) [5 MEM[(struct fbgc_tuple_object *)res_tp_53].size+0 S4 A8])
        (reg/v:SI 6 bp [orig:111 sz ] [111])) "cmodules/fbgc_math.c":71:35 67 {*movsi_internal}
     (nil))
(debug_insn 108 107 109 13 (debug_marker) "cmodules/fbgc_math.c":72:4 -1
     (nil))
(insn 109 108 110 13 (set (reg/f:DI 3 bx [orig:87 _6 ] [87])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:130 arg ] [130]) [3 *arg_50(D)+0 S8 A64])) "cmodules/fbgc_math.c":72:39 66 {*movdi_internal}
     (nil))
(debug_insn 110 109 111 13 (var_location:DI D#28 (plus:DI (reg/f:DI 3 bx [orig:87 _6 ] [87])
        (const_int 17 [0x11]))) "cmodules/fbgc_math.c":72:26 -1
     (nil))
(debug_insn 111 110 112 13 (var_location:DI tp_content (debug_expr:DI D#28)) "cmodules/fbgc_math.c":72:26 -1
     (nil))
(debug_insn 112 111 113 13 (debug_marker) "cmodules/fbgc_math.c":72:67 -1
     (nil))
(debug_insn 113 112 114 13 (debug_marker) "cmodules/fbgc_math.c":74:4 -1
     (nil))
(debug_insn 114 113 115 13 (debug_marker) "cmodules/fbgc_math.c":74:8 -1
     (nil))
(debug_insn 115 114 116 13 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(debug_insn 116 115 117 13 (debug_marker) "cmodules/fbgc_math.c":74:22 -1
     (nil))
(insn 117 116 118 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 6 bp [orig:111 sz ] [111])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":74:4 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 118 117 119 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 304)
            (pc))) "cmodules/fbgc_math.c":74:4 659 {*jcc}
     (int_list:REG_BR_PROB 118111604 (nil))
 -> 304)
;;  succ:       14 [89.0% (guessed)]  count:12992278 (estimated locally) (FALLTHRU)
;;              30 [11.0% (guessed)]  count:1605787 (estimated locally)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 14, loop depth 0, count 12992278 (estimated locally), maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [89.0% (guessed)]  count:12992278 (estimated locally) (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags] 40 [r12]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 3 [bx] 40 [r12]
;; live  kill	 17 [flags]
(note 119 118 120 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 7 14 (parallel [
            (set (reg:DI 3 bx [orig:124 ivtmp.68 ] [124])
                (plus:DI (reg/f:DI 3 bx [orig:87 _6 ] [87])
                    (const_int 17 [0x11])))
            (clobber (reg:CC 17 flags))
        ]) 191 {*adddi_1}
     (nil))
(insn 7 120 154 14 (set (reg/v:SI 40 r12 [orig:113 i ] [113])
        (const_int 0 [0])) "cmodules/fbgc_math.c":74:15 67 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       15 [always]  count:12992278 (estimated locally) (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12]

;; basic block 15, loop depth 0, count 117730595 (estimated locally), maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       14 [always]  count:12992278 (estimated locally) (FALLTHRU)
;;              17 [89.0% (guessed)]  count:104738318 (estimated locally) (DFS_BACK)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  kill	
(code_label 154 7 121 15 47 (nil) [1 uses])
(note 121 154 122 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(debug_insn 122 121 123 15 (var_location:SI i (reg/v:SI 40 r12 [orig:113 i ] [113])) -1
     (nil))
(debug_insn 123 122 124 15 (debug_marker) "cmodules/fbgc_math.c":76:5 -1
     (nil))
(insn 124 123 125 15 (set (reg:DI 2 cx)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [10 %sfp+-24 S8 A64])) "cmodules/fbgc_math.c":76:35 66 {*movdi_internal}
     (nil))
(insn 125 124 126 15 (set (reg:DI 1 dx)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-40 S8 A64])) "cmodules/fbgc_math.c":76:35 66 {*movdi_internal}
     (nil))
(insn 126 125 127 15 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "cmodules/fbgc_math.c":76:35 67 {*movsi_internal}
     (nil))
(insn 127 126 128 15 (set (reg:DI 5 di)
        (reg:DI 3 bx [orig:124 ivtmp.68 ] [124])) "cmodules/fbgc_math.c":76:35 66 {*movdi_internal}
     (nil))
(call_insn 128 127 129 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("one_arg_math") [flags 0x3]  <function_decl 0x7f213dfac000 one_arg_math>) [0 one_arg_math S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":76:35 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("one_arg_math") [flags 0x3]  <function_decl 0x7f213dfac000 one_arg_math>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 129 128 130 15 (set (reg/v/f:DI 4 si [orig:112 result ] [112])
        (reg:DI 0 ax [183])) "cmodules/fbgc_math.c":76:35 66 {*movdi_internal}
     (nil))
(debug_insn 130 129 131 15 (var_location:DI result (reg/v/f:DI 4 si [orig:112 result ] [112])) "cmodules/fbgc_math.c":76:35 -1
     (nil))
(debug_insn 131 130 132 15 (debug_marker) "cmodules/fbgc_math.c":77:5 -1
     (nil))
(insn 132 131 133 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 4 si [orig:112 result ] [112])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":77:5 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 133 132 134 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 142)
            (pc))) "cmodules/fbgc_math.c":77:5 659 {*jcc}
     (int_list:REG_BR_PROB 1073312332 (nil))
 -> 142)
;;  succ:       17 [100.0% (guessed)]  count:117683503 (estimated locally)
;;              16 [0.0% (guessed)]  count:47092 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 40 [r12]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 40 [r12]

;; basic block 16, loop depth 0, count 47092 (estimated locally)
;;  prev block 15, next block 17, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [0.0% (guessed)]  count:47092 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 7 [sp]
;; live  gen 	 1 [dx] 2 [cx] 4 [si] 5 [di]
;; live  kill	
(note 134 133 135 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(debug_insn 135 134 136 16 (debug_marker) "cmodules/fbgc_math.c":77:5 -1
     (nil))
(insn 136 135 137 16 (set (reg:DI 2 cx)
        (symbol_ref:DI ("__PRETTY_FUNCTION__.5776") [flags 0x2]  <var_decl 0x7f213dfa6990 __PRETTY_FUNCTION__>)) "cmodules/fbgc_math.c":77:5 66 {*movdi_internal}
     (nil))
(insn 137 136 138 16 (set (reg:SI 1 dx)
        (const_int 77 [0x4d])) "cmodules/fbgc_math.c":77:5 67 {*movsi_internal}
     (nil))
(insn 138 137 139 16 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f213e0b5900 *.LC9>)) "cmodules/fbgc_math.c":77:5 66 {*movdi_internal}
     (nil))
(insn 139 138 140 16 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f213e0b5990 *.LC10>)) "cmodules/fbgc_math.c":77:5 66 {*movdi_internal}
     (nil))
(call_insn 140 139 141 16 (call (mem:QI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f213e2a1c00 __assert_fail>) [0 __assert_fail S1 A8])
        (const_int 0 [0])) "cmodules/fbgc_math.c":77:5 666 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f213e2a1c00 __assert_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 141 140 142)
;; basic block 17, loop depth 0, count 117683503 (estimated locally), maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [100.0% (guessed)]  count:117683503 (estimated locally)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 40 [r12]
;; lr  use 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 40 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 40 [r12]
;; live  gen 	 1 [dx] 3 [bx] 5 [di] 17 [flags] 40 [r12]
;; live  kill	 17 [flags]
(code_label 142 141 143 17 46 (nil) [1 uses])
(note 143 142 144 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(debug_insn 144 143 145 17 (debug_marker) "cmodules/fbgc_math.c":78:5 -1
     (nil))
(insn 145 144 147 17 (set (reg:SI 1 dx)
        (reg/v:SI 40 r12 [orig:113 i ] [113])) "cmodules/fbgc_math.c":78:5 67 {*movsi_internal}
     (nil))
(insn 147 145 148 17 (set (reg:DI 5 di)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [10 %sfp+-8 S8 A64])) "cmodules/fbgc_math.c":78:5 66 {*movdi_internal}
     (nil))
(call_insn 148 147 149 17 (call (mem:QI (symbol_ref:DI ("set_object_in_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f213e3fee00 set_object_in_fbgc_tuple_object>) [0 set_object_in_fbgc_tuple_object S1 A8])
        (const_int 0 [0])) "cmodules/fbgc_math.c":78:5 666 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("set_object_in_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f213e3fee00 set_object_in_fbgc_tuple_object>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(debug_insn 149 148 150 17 (debug_marker) "cmodules/fbgc_math.c":74:31 -1
     (nil))
(insn 150 149 151 17 (parallel [
            (set (reg/v:SI 40 r12 [orig:113 i ] [113])
                (plus:SI (reg/v:SI 40 r12 [orig:113 i ] [113])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":74:31 190 {*addsi_1}
     (nil))
(debug_insn 151 150 152 17 (var_location:SI i (reg/v:SI 40 r12 [orig:113 i ] [113])) -1
     (nil))
(debug_insn 152 151 153 17 (debug_marker) "cmodules/fbgc_math.c":74:22 -1
     (nil))
(insn 153 152 155 17 (parallel [
            (set (reg:DI 3 bx [orig:124 ivtmp.68 ] [124])
                (plus:DI (reg:DI 3 bx [orig:124 ivtmp.68 ] [124])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) 191 {*adddi_1}
     (nil))
(insn 155 153 156 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 6 bp [orig:111 sz ] [111])
            (reg/v:SI 40 r12 [orig:113 i ] [113]))) "cmodules/fbgc_math.c":74:4 11 {*cmpsi_1}
     (nil))
(jump_insn 156 155 364 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 154)
            (pc))) "cmodules/fbgc_math.c":74:4 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 154)
;;  succ:       15 [89.0% (guessed)]  count:104738318 (estimated locally) (DFS_BACK)
;;              18 [11.0% (guessed)]  count:12945185 (estimated locally) (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12]

;; basic block 18, loop depth 0, count 12945185 (estimated locally), maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       17 [11.0% (guessed)]  count:12945185 (estimated locally) (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 364 156 365 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(jump_insn 365 364 366 18 (set (pc)
        (label_ref 304)) 660 {jump}
     (nil)
 -> 304)
;;  succ:       30 [always]  count:12945185 (estimated locally) (LOOP_EXIT)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 366 365 160)
;; basic block 19, loop depth 0, count 14598065 (estimated locally), maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [20.0% (adjusted)]  count:14598065 (estimated locally)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r15]
;; lr  use 	 7 [sp] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 7 [sp] 43 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 40 [r12]
;; live  kill	 17 [flags]
(code_label 160 366 161 19 39 (nil) [1 uses])
(note 161 160 162 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(debug_insn 162 161 163 19 (debug_marker) "cmodules/fbgc_math.c":84:4 -1
     (nil))
(debug_insn 163 162 164 19 (var_location:DI m (reg/f:DI 43 r15 [orig:82 _1 ] [82])) "cmodules/fbgc_math.c":84:32 -1
     (nil))
(debug_insn 164 163 165 19 (debug_marker) "cmodules/fbgc_math.c":85:4 -1
     (nil))
(insn 165 164 166 19 (set (reg:SI 1 dx [orig:142 MEM[(struct fbgc_matrix_object *)_1].column ] [142])
        (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:82 _1 ] [82])
                (const_int 14 [0xe])) [5 MEM[(struct fbgc_matrix_object *)_1].column+0 S4 A8])) "cmodules/fbgc_math.c":85:33 67 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:82 _1 ] [82])
                (const_int 14 [0xe])) [5 MEM[(struct fbgc_matrix_object *)_1].column+0 S4 A8])
        (nil)))
(insn 166 165 167 19 (set (reg:SI 4 si [orig:143 MEM[(struct fbgc_matrix_object *)_1].row ] [143])
        (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:82 _1 ] [82])
                (const_int 10 [0xa])) [5 MEM[(struct fbgc_matrix_object *)_1].row+0 S4 A8])) "cmodules/fbgc_math.c":85:33 67 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:82 _1 ] [82])
                (const_int 10 [0xa])) [5 MEM[(struct fbgc_matrix_object *)_1].row+0 S4 A8])
        (nil)))
(insn 167 166 168 19 (set (reg:SI 5 di [orig:144 MEM[(struct fbgc_matrix_object *)_1].sub_type ] [144])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 43 r15 [orig:82 _1 ] [82])
                    (const_int 9 [0x9])) [0 MEM[(struct fbgc_matrix_object *)_1].sub_type+0 S1 A8]))) "cmodules/fbgc_math.c":85:33 119 {*zero_extendqisi2}
     (nil))
(insn 168 167 172 19 (set (reg:SI 2 cx)
        (const_int 10 [0xa])) "cmodules/fbgc_math.c":85:33 67 {*movsi_internal}
     (nil))
(call_insn 172 168 173 19 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_matrix_object") [flags 0x41]  <function_decl 0x7f213e3fe100 new_fbgc_matrix_object>) [0 new_fbgc_matrix_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":85:33 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_matrix_object") [flags 0x41]  <function_decl 0x7f213e3fe100 new_fbgc_matrix_object>)
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
(insn 173 172 384 19 (set (reg/v/f:DI 4 si [orig:129 <retval> ] [129])
        (reg:DI 0 ax [184])) "cmodules/fbgc_math.c":85:33 66 {*movdi_internal}
     (nil))
(insn 384 173 174 19 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [10 %sfp+-8 S8 A64])
        (reg/v/f:DI 4 si [orig:129 <retval> ] [129])) "cmodules/fbgc_math.c":85:33 66 {*movdi_internal}
     (nil))
(debug_insn 174 384 175 19 (var_location:DI res_m (reg/v/f:DI 4 si [orig:129 <retval> ] [129])) "cmodules/fbgc_math.c":85:33 -1
     (nil))
(debug_insn 175 174 176 19 (debug_marker) "cmodules/fbgc_math.c":87:4 -1
     (nil))
(insn 176 175 177 19 (set (reg:SI 1 dx [orig:120 prephitmp_109 ] [120])
        (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:82 _1 ] [82])
                (const_int 10 [0xa])) [5 MEM[(struct fbgc_matrix_object *)_1].row+0 S4 A8])) "cmodules/fbgc_math.c":87:17 67 {*movsi_internal}
     (nil))
(insn 177 176 377 19 (set (reg:SI 0 ax [orig:110 _38 ] [110])
        (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:82 _1 ] [82])
                (const_int 14 [0xe])) [5 MEM[(struct fbgc_matrix_object *)_1].column+0 S4 A8])) "cmodules/fbgc_math.c":87:24 67 {*movsi_internal}
     (nil))
(insn 377 177 178 19 (set (reg/v:SI 5 di [orig:114 rc ] [114])
        (reg:SI 1 dx [orig:120 prephitmp_109 ] [120])) "cmodules/fbgc_math.c":87:11 67 {*movsi_internal}
     (nil))
(insn 178 377 378 19 (parallel [
            (set (reg/v:SI 5 di [orig:114 rc ] [114])
                (mult:SI (reg/v:SI 5 di [orig:114 rc ] [114])
                    (reg:SI 0 ax [orig:110 _38 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":87:11 317 {*mulsi3_1}
     (nil))
(insn 378 178 179 19 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [10 %sfp+-12 S4 A32])
        (reg/v:SI 5 di [orig:114 rc ] [114])) "cmodules/fbgc_math.c":87:11 67 {*movsi_internal}
     (nil))
(debug_insn 179 378 180 19 (var_location:SI rc (mem/c:SI (plus:DI (reg/f:DI 7 sp)
            (const_int 36 [0x24])) [10 %sfp+-12 S4 A32])) "cmodules/fbgc_math.c":87:11 -1
     (nil))
(debug_insn 180 179 181 19 (debug_marker) "cmodules/fbgc_math.c":89:4 -1
     (nil))
(debug_insn 181 180 182 19 (debug_marker) "cmodules/fbgc_math.c":91:4 -1
     (nil))
(debug_insn 182 181 183 19 (debug_marker) "cmodules/fbgc_math.c":91:8 -1
     (nil))
(debug_insn 183 182 184 19 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(debug_insn 184 183 9 19 (debug_marker) "cmodules/fbgc_math.c":91:22 -1
     (nil))
(insn 9 184 192 19 (set (reg/v:SI 6 bp [orig:115 i ] [115])
        (const_int 0 [0])) "cmodules/fbgc_math.c":91:15 67 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 192 9 185 19 (parallel [
            (set (reg/f:DI 40 r12 [orig:172 pretmp_139 ] [172])
                (plus:DI (reg/v/f:DI 4 si [orig:129 <retval> ] [129])
                    (const_int 14 [0xe])))
            (clobber (reg:CC 17 flags))
        ]) 191 {*adddi_1}
     (nil))
(insn 185 192 186 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:120 prephitmp_109 ] [120])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":91:4 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 186 185 367 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 278)
            (pc))) "cmodules/fbgc_math.c":91:4 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 278)
;;  succ:       28 [89.0% (guessed)]  count:12992278 (estimated locally)
;;              20 [11.0% (guessed)]  count:1605787 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]

;; basic block 20, loop depth 0, count 1605787 (estimated locally), maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       19 [11.0% (guessed)]  count:1605787 (estimated locally) (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 367 186 368 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(jump_insn 368 367 369 20 (set (pc)
        (label_ref 304)) 660 {jump}
     (nil)
 -> 304)
;;  succ:       30 [always]  count:1605787 (estimated locally)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 369 368 283)
;; basic block 21, loop depth 0, count 105119326 (estimated locally), maybe hot
;;  prev block 20, next block 22, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       28 [99.8% (guessed)]  count:106372132 (estimated locally)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; lr  use 	 7 [sp] 43 [r15]
;; lr  def 	 3 [bx] 17 [flags] 42 [r14]
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  gen 	 3 [bx] 42 [r14]
;; live  kill	 17 [flags]
(code_label 283 369 190 21 54 (nil) [1 uses])
(note 190 283 191 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 191 190 8 21 (parallel [
            (set (reg/f:DI 3 bx [orig:121 pretmp_114 ] [121])
                (plus:DI (reg/f:DI 43 r15 [orig:82 _1 ] [82])
                    (const_int 14 [0xe])))
            (clobber (reg:CC 17 flags))
        ]) 191 {*adddi_1}
     (nil))
(insn 8 191 263 21 (set (reg/v:SI 42 r14 [orig:118 j ] [118])
        (const_int 0 [0])) "cmodules/fbgc_math.c":92:16 67 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       22 [always]  count:105119326 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 42 [r14] 43 [r15]

;; basic block 22, loop depth 0, count 955630223 (estimated locally), maybe hot
;;  prev block 21, next block 23, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       21 [always]  count:105119326 (estimated locally) (FALLTHRU)
;;              25 [89.0% (guessed)]  count:561337193 (estimated locally) (DFS_BACK)
;;              23 [89.0% (guessed)]  count:289173706 (estimated locally) (DFS_BACK)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 20 [xmm0] 41 [r13]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags] 20 [xmm0] 41 [r13]
;; live  kill	 17 [flags]
(code_label 263 8 193 22 53 (nil) [2 uses])
(note 193 263 194 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(debug_insn 194 193 195 22 (var_location:SI j (reg/v:SI 42 r14 [orig:118 j ] [118])) -1
     (nil))
(debug_insn 195 194 196 22 (debug_marker) "cmodules/fbgc_math.c":93:6 -1
     (nil))
(insn 196 195 197 22 (parallel [
            (set (reg:SI 0 ax [145])
                (mult:SI (reg:SI 0 ax [orig:110 _38 ] [110])
                    (reg/v:SI 6 bp [orig:115 i ] [115])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":93:23 317 {*mulsi3_1}
     (nil))
(insn 197 196 198 22 (parallel [
            (set (reg/v:SI 0 ax [orig:116 index ] [116])
                (plus:SI (reg:SI 0 ax [145])
                    (reg/v:SI 42 r14 [orig:118 j ] [118])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":93:13 190 {*addsi_1}
     (nil))
(debug_insn 198 197 199 22 (var_location:SI index (reg/v:SI 0 ax [orig:116 index ] [116])) "cmodules/fbgc_math.c":93:13 -1
     (nil))
(debug_insn 199 198 200 22 (debug_marker) "cmodules/fbgc_math.c":94:6 -1
     (nil))
(debug_insn 200 199 201 22 (var_location:SI c_index (plus:SI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [10 %sfp+-12 S4 A32])
        (reg/v:SI 0 ax [orig:116 index ] [116]))) "cmodules/fbgc_math.c":94:13 -1
     (nil))
(debug_insn 201 200 202 22 (debug_marker) "cmodules/fbgc_math.c":96:6 -1
     (nil))
(insn 202 201 203 22 (set (reg:DI 1 dx [orig:146 index ] [146])
        (zero_extend:DI (reg/v:SI 0 ax [orig:116 index ] [116]))) "cmodules/fbgc_math.c":96:46 114 {*zero_extendsidi2}
     (nil))
(insn 203 202 204 22 (parallel [
            (set (reg:DI 1 dx [147])
                (ashift:DI (reg:DI 1 dx [orig:146 index ] [146])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":96:46 520 {*ashldi3_1}
     (nil))
(note 204 203 205 22 NOTE_INSN_DELETED)
(insn 205 204 206 22 (set (reg:DF 20 xmm0 [orig:99 _23 ] [99])
        (mem:DF (plus:DI (plus:DI (reg/f:DI 3 bx [orig:121 pretmp_114 ] [121])
                    (reg:DI 1 dx [147]))
                (const_int 4 [0x4])) [2 *_22+0 S8 A64])) "cmodules/fbgc_math.c":96:15 111 {*movdf_internal}
     (nil))
(debug_insn 206 205 207 22 (var_location:DF z$real (reg:DF 20 xmm0 [orig:99 _23 ] [99])) "cmodules/fbgc_math.c":96:13 -1
     (nil))
(debug_insn 207 206 208 22 (debug_marker) "cmodules/fbgc_math.c":97:6 -1
     (nil))
(insn 208 207 209 22 (set (reg/f:DI 41 r13 [orig:122 _123 ] [122])
        (plus:DI (plus:DI (reg/f:DI 40 r12 [orig:172 pretmp_139 ] [172])
                (reg:DI 1 dx [147]))
            (const_int 4 [0x4]))) 187 {*leadi}
     (nil))
(insn 209 208 210 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (plus:DI (reg/f:DI 43 r15 [orig:82 _1 ] [82])
                    (const_int 9 [0x9])) [0 MEM[(struct fbgc_matrix_object *)_1].sub_type+0 S1 A8])
            (const_int 5 [0x5]))) "cmodules/fbgc_math.c":97:8 9 {*cmpqi_1}
     (nil))
(jump_insn 210 209 211 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 247)
            (pc))) "cmodules/fbgc_math.c":97:8 659 {*jcc}
     (int_list:REG_BR_PROB 708669604 (nil))
 -> 247)
;;  succ:       23 [34.0% (guessed)]  count:324914279 (estimated locally) (FALLTHRU)
;;              25 [66.0% (guessed)]  count:630715944 (estimated locally)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 20 [xmm0] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 20 [xmm0] 40 [r12] 41 [r13] 42 [r14] 43 [r15]

;; basic block 23, loop depth 0, count 324914276 (estimated locally), maybe hot
;;  prev block 22, next block 24, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       22 [34.0% (guessed)]  count:324914279 (estimated locally) (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 20 [xmm0] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 20 [xmm0] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 42 [r14] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 20 [xmm0] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  gen 	 0 [ax] 2 [cx] 17 [flags] 20 [xmm0] 21 [xmm1] 42 [r14]
;; live  kill	 17 [flags]
(note 211 210 212 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(debug_insn 212 211 213 23 (debug_marker) "cmodules/fbgc_math.c":98:7 -1
     (nil))
(note 213 212 380 23 NOTE_INSN_DELETED)
(insn 380 213 214 23 (set (reg/v:SI 2 cx [orig:114 rc ] [114])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [10 %sfp+-12 S4 A32])) "cmodules/fbgc_math.c":98:47 67 {*movsi_internal}
     (nil))
(insn 214 380 215 23 (set (reg:DI 0 ax [orig:149 c_index ] [149])
        (zero_extend:DI (plus:SI (reg/v:SI 2 cx [orig:114 rc ] [114])
                (reg/v:SI 0 ax [orig:116 index ] [116])))) "cmodules/fbgc_math.c":98:47 187 {*leadi}
     (nil))
(insn 215 214 218 23 (parallel [
            (set (reg:DI 0 ax [150])
                (ashift:DI (reg:DI 0 ax [orig:149 c_index ] [149])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":98:47 520 {*ashldi3_1}
     (nil))
(debug_insn 218 215 223 23 (debug_marker) "cmodules/fbgc_math.c":99:7 -1
     (nil))
(note 223 218 225 23 NOTE_INSN_DELETED)
(insn 225 223 385 23 (set (reg:DF 21 xmm1)
        (mem:DF (plus:DI (plus:DI (reg/f:DI 3 bx [orig:121 pretmp_114 ] [121])
                    (reg:DI 0 ax [150]))
                (const_int 4 [0x4])) [2 *_28+0 S8 A64])) "cmodules/fbgc_math.c":99:36 111 {*movdf_internal}
     (nil))
(insn 385 225 381 23 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [10 %sfp+-32 S8 A64])
        (reg:DI 0 ax [150])) "cmodules/fbgc_math.c":99:36 66 {*movdi_internal}
     (nil))
(insn 381 385 226 23 (set (reg/v/f:DI 0 ax [orig:133 zfun ] [133])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [10 %sfp+-24 S8 A64])) "cmodules/fbgc_math.c":99:36 66 {*movdi_internal}
     (nil))
(call_insn 226 381 227 23 (set (parallel:TI [
                (expr_list:REG_DEP_TRUE (reg:DF 20 xmm0)
                    (const_int 0 [0]))
                (expr_list:REG_DEP_TRUE (reg:DF 21 xmm1)
                    (const_int 8 [0x8]))
            ])
        (call (mem:QI (reg/v/f:DI 0 ax [orig:133 zfun ] [133]) [0 *zfun_58(D) S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":99:36 677 {*call_value}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list (use (reg:DF 21 xmm1))
        (expr_list (use (reg:DF 20 xmm0))
            (nil))))
(note 227 226 228 23 NOTE_INSN_DELETED)
(note 228 227 232 23 NOTE_INSN_DELETED)
(debug_insn 232 228 233 23 (debug_marker) "cmodules/fbgc_math.c":100:7 -1
     (nil))
(insn 233 232 234 23 (set (mem:DF (reg/f:DI 41 r13 [orig:122 _123 ] [122]) [2 MEM[(double *)_123]+0 S8 A64])
        (reg:DF 20 xmm0 [185])) "cmodules/fbgc_math.c":100:50 111 {*movdf_internal}
     (nil))
(debug_insn 234 233 386 23 (debug_marker) "cmodules/fbgc_math.c":101:7 -1
     (nil))
(insn 386 234 235 23 (set (reg:DI 0 ax [150])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [10 %sfp+-32 S8 A64])) "cmodules/fbgc_math.c":101:52 66 {*movdi_internal}
     (nil))
(insn 235 386 237 23 (set (mem:DF (plus:DI (plus:DI (reg/f:DI 40 r12 [orig:172 pretmp_139 ] [172])
                    (reg:DI 0 ax [150]))
                (const_int 4 [0x4])) [2 *_33+0 S8 A64])
        (reg:DF 21 xmm1 [186])) "cmodules/fbgc_math.c":101:52 111 {*movdf_internal}
     (nil))
(debug_insn 237 235 238 23 (debug_marker) "cmodules/fbgc_math.c":92:36 -1
     (nil))
(insn 238 237 239 23 (parallel [
            (set (reg/v:SI 42 r14 [orig:118 j ] [118])
                (plus:SI (reg/v:SI 42 r14 [orig:118 j ] [118])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":92:36 190 {*addsi_1}
     (nil))
(debug_insn 239 238 240 23 (var_location:SI j (reg/v:SI 42 r14 [orig:118 j ] [118])) -1
     (nil))
(debug_insn 240 239 241 23 (debug_marker) "cmodules/fbgc_math.c":92:23 -1
     (nil))
(insn 241 240 242 23 (set (reg:SI 0 ax [orig:110 _38 ] [110])
        (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:82 _1 ] [82])
                (const_int 14 [0xe])) [5 MEM[(struct fbgc_matrix_object *)_1].column+0 S4 A8])) "cmodules/fbgc_math.c":92:26 67 {*movsi_internal}
     (nil))
(insn 242 241 243 23 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 42 r14 [orig:118 j ] [118])
            (reg:SI 0 ax [orig:110 _38 ] [110]))) "cmodules/fbgc_math.c":92:5 11 {*cmpsi_1}
     (nil))
(jump_insn 243 242 370 23 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 263)
            (pc))) "cmodules/fbgc_math.c":92:5 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 263)
;;  succ:       22 [89.0% (guessed)]  count:289173706 (estimated locally) (DFS_BACK)
;;              24 [11.0% (guessed)]  count:35740570 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 42 [r14] 43 [r15]

;; basic block 24, loop depth 0, count 35740570 (estimated locally), maybe hot
;;  prev block 23, next block 25, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       23 [11.0% (guessed)]  count:35740570 (estimated locally) (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  gen 	
;; live  kill	
(note 370 243 371 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(jump_insn 371 370 372 24 (set (pc)
        (label_ref 266)) 660 {jump}
     (nil)
 -> 266)
;;  succ:       26 [always]  count:35740570 (estimated locally) (LOOP_EXIT)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 43 [r15]

(barrier 372 371 247)
;; basic block 25, loop depth 0, count 630715947 (estimated locally), maybe hot
;;  prev block 24, next block 26, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       22 [66.0% (guessed)]  count:630715944 (estimated locally)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 20 [xmm0] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; lr  use 	 7 [sp] 20 [xmm0] 41 [r13] 42 [r14] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 42 [r14] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 20 [xmm0] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  gen 	 0 [ax] 17 [flags] 20 [xmm0] 42 [r14]
;; live  kill	 17 [flags]
(code_label 247 372 248 25 50 (nil) [1 uses])
(note 248 247 249 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(debug_insn 249 248 382 25 (debug_marker) "cmodules/fbgc_math.c":103:11 -1
     (nil))
(insn 382 249 251 25 (set (reg/v/f:DI 0 ax [orig:132 fun ] [132])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-40 S8 A64])) "cmodules/fbgc_math.c":103:57 66 {*movdi_internal}
     (nil))
(call_insn 251 382 252 25 (set (reg:DF 20 xmm0)
        (call (mem:QI (reg/v/f:DI 0 ax [orig:132 fun ] [132]) [0 *fun_57(D) S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":103:57 677 {*call_value}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(note 252 251 253 25 NOTE_INSN_DELETED)
(insn 253 252 254 25 (set (mem:DF (reg/f:DI 41 r13 [orig:122 _123 ] [122]) [2 MEM[(double *)_123]+0 S8 A64])
        (reg:DF 20 xmm0 [187])) "cmodules/fbgc_math.c":103:54 111 {*movdf_internal}
     (nil))
(debug_insn 254 253 255 25 (debug_marker) "cmodules/fbgc_math.c":92:36 -1
     (nil))
(insn 255 254 256 25 (parallel [
            (set (reg/v:SI 42 r14 [orig:118 j ] [118])
                (plus:SI (reg/v:SI 42 r14 [orig:118 j ] [118])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":92:36 190 {*addsi_1}
     (nil))
(debug_insn 256 255 257 25 (var_location:SI j (reg/v:SI 42 r14 [orig:118 j ] [118])) -1
     (nil))
(debug_insn 257 256 258 25 (debug_marker) "cmodules/fbgc_math.c":92:23 -1
     (nil))
(insn 258 257 259 25 (set (reg:SI 0 ax [orig:110 _38 ] [110])
        (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:82 _1 ] [82])
                (const_int 14 [0xe])) [5 MEM[(struct fbgc_matrix_object *)_1].column+0 S4 A8])) "cmodules/fbgc_math.c":92:26 67 {*movsi_internal}
     (nil))
(insn 259 258 260 25 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:110 _38 ] [110])
            (reg/v:SI 42 r14 [orig:118 j ] [118]))) "cmodules/fbgc_math.c":92:5 11 {*cmpsi_1}
     (nil))
(jump_insn 260 259 266 25 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 263)
            (pc))) "cmodules/fbgc_math.c":92:5 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 263)
;;  succ:       22 [89.0% (guessed)]  count:561337193 (estimated locally) (DFS_BACK)
;;              26 [11.0% (guessed)]  count:69378754 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 42 [r14] 43 [r15]

;; basic block 26, loop depth 0, count 105119324 (estimated locally), maybe hot
;;  prev block 25, next block 27, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       25 [11.0% (guessed)]  count:69378754 (estimated locally) (FALLTHRU,LOOP_EXIT)
;;              24 [always]  count:35740570 (estimated locally) (LOOP_EXIT)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; lr  use 	 7 [sp] 43 [r15]
;; lr  def 	 1 [dx]
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  gen 	 1 [dx]
;; live  kill	
(code_label 266 260 267 26 52 (nil) [1 uses])
(note 267 266 268 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 268 267 291 26 (set (reg:SI 1 dx [orig:120 prephitmp_109 ] [120])
        (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:82 _1 ] [82])
                (const_int 10 [0xa])) [5 MEM[(struct fbgc_matrix_object *)_1].row+0 S4 A8])) 67 {*movsi_internal}
     (nil))
;;  succ:       27 [always]  count:105119324 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]

;; basic block 27, loop depth 0, count 105119325 (estimated locally), maybe hot
;; Invalid sum of incoming counts 116682450 (estimated locally), should be 105119325 (estimated locally)
;;  prev block 26, next block 28, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       26 [always]  count:105119324 (estimated locally) (FALLTHRU)
;;              29 [89.0% (guessed)]  count:11563126 (estimated locally)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 6 [bp] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  gen 	 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(code_label 291 268 269 27 55 (nil) [1 uses])
(note 269 291 270 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(debug_insn 270 269 271 27 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 271 270 272 27 (var_location:SI j (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 272 271 273 27 (debug_marker) "cmodules/fbgc_math.c":91:32 -1
     (nil))
(insn 273 272 274 27 (parallel [
            (set (reg/v:SI 6 bp [orig:115 i ] [115])
                (plus:SI (reg/v:SI 6 bp [orig:115 i ] [115])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":91:32 190 {*addsi_1}
     (nil))
(debug_insn 274 273 275 27 (var_location:SI i (reg/v:SI 6 bp [orig:115 i ] [115])) -1
     (nil))
(debug_insn 275 274 276 27 (debug_marker) "cmodules/fbgc_math.c":91:22 -1
     (nil))
(insn 276 275 277 27 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 6 bp [orig:115 i ] [115])
            (reg:SI 1 dx [orig:120 prephitmp_109 ] [120]))) "cmodules/fbgc_math.c":91:4 11 {*cmpsi_1}
     (nil))
(jump_insn 277 276 278 27 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 304)
            (pc))) "cmodules/fbgc_math.c":91:4 659 {*jcc}
     (int_list:REG_BR_PROB 118111604 (nil))
 -> 304)
;;  succ:       28 [89.0% (guessed)]  count:93556199 (estimated locally) (FALLTHRU,DFS_BACK)
;;              30 [11.0% (guessed)]  count:11563126 (estimated locally) (LOOP_EXIT)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]

;; basic block 28, loop depth 0, count 106548476 (estimated locally), maybe hot
;;  prev block 27, next block 29, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       19 [89.0% (guessed)]  count:12992278 (estimated locally)
;;              27 [89.0% (guessed)]  count:93556199 (estimated locally) (FALLTHRU,DFS_BACK)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 278 277 279 28 48 (nil) [1 uses])
(note 279 278 280 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(debug_insn 280 279 281 28 (var_location:SI i (reg/v:SI 6 bp [orig:115 i ] [115])) -1
     (nil))
(debug_insn 281 280 282 28 (var_location:SI j (const_int 0 [0])) -1
     (nil))
(debug_insn 282 281 284 28 (debug_marker) "cmodules/fbgc_math.c":92:23 -1
     (nil))
(insn 284 282 285 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:110 _38 ] [110])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":92:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 285 284 286 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 283)
            (pc))) "cmodules/fbgc_math.c":92:5 659 {*jcc}
     (int_list:REG_BR_PROB 1071964724 (nil))
 -> 283)
;;  succ:       21 [99.8% (guessed)]  count:106372132 (estimated locally)
;;              29 [0.2% (guessed)]  count:176344 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]

;; basic block 29, loop depth 0, count 12992276 (estimated locally), maybe hot
;; Invalid sum of incoming counts 176344 (estimated locally), should be 12992276 (estimated locally)
;;  prev block 28, next block 30, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       28 [0.2% (guessed)]  count:176344 (estimated locally) (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 6 [bp] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  gen 	 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(note 286 285 287 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(debug_insn 287 286 288 29 (debug_marker) "cmodules/fbgc_math.c":91:32 -1
     (nil))
(insn 288 287 289 29 (parallel [
            (set (reg/v:SI 6 bp [orig:115 i ] [115])
                (plus:SI (reg/v:SI 6 bp [orig:115 i ] [115])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":91:32 190 {*addsi_1}
     (nil))
(debug_insn 289 288 290 29 (var_location:SI i (reg/v:SI 6 bp [orig:115 i ] [115])) -1
     (nil))
(debug_insn 290 289 292 29 (debug_marker) "cmodules/fbgc_math.c":91:22 -1
     (nil))
(insn 292 290 293 29 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:120 prephitmp_109 ] [120])
            (reg/v:SI 6 bp [orig:115 i ] [115]))) "cmodules/fbgc_math.c":91:4 11 {*cmpsi_1}
     (nil))
(jump_insn 293 292 304 29 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 291)
            (pc))) "cmodules/fbgc_math.c":91:4 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 291)
;;  succ:       27 [89.0% (guessed)]  count:11563126 (estimated locally)
;;              30 [11.0% (guessed)]  count:1429150 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]

;; basic block 30, loop depth 0, count 43747099 (estimated locally), maybe hot
;; Invalid sum of incoming counts 108627388 (estimated locally), should be 43747099 (estimated locally)
;;  prev block 29, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       29 [11.0% (guessed)]  count:1429150 (estimated locally) (FALLTHRU,LOOP_EXIT)
;;              27 [11.0% (guessed)]  count:11563126 (estimated locally) (LOOP_EXIT)
;;              6 [always]  count:40550180 (estimated locally)
;;              8 [always]  count:14598065 (estimated locally)
;;              13 [11.0% (guessed)]  count:1605787 (estimated locally)
;;              10 [always]  count:24330108 (estimated locally)
;;              18 [always]  count:12945185 (estimated locally) (LOOP_EXIT)
;;              20 [always]  count:1605787 (estimated locally)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 304 293 307 30 38 (nil) [7 uses])
(note 307 304 305 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 305 307 306 30 (set (reg/i:DI 0 ax)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [10 %sfp+-8 S8 A64])) "cmodules/fbgc_math.c":111:1 66 {*movdi_internal}
     (nil))
(insn 306 305 373 30 (use (reg/i:DI 0 ax)) "cmodules/fbgc_math.c":111:1 -1
     (nil))
;;  succ:       EXIT [always]  count:43747099 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 373 306 0 NOTE_INSN_DELETED)

;; Function fbgc_sin (fbgc_sin, funcdef_no=59, decl_uid=5689, cgraph_uid=60, symbol_order=62)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) UBsBz {*sibcall_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 4
   Insn 31: point = 0, n_alt = -1
   Insn 30: point = 0, n_alt = 2
  BB 3
   Insn 22: point = 0, n_alt = 0
   Insn 21: point = 0, n_alt = -2
   Insn 20: point = 1, n_alt = 0
   Insn 19: point = 1, n_alt = 3
   Insn 17: point = 1, n_alt = 2
  BB 2
   Insn 10: point = 2, n_alt = -1
   Insn 9: point = 2, n_alt = 0
   Insn 34: point = 3, n_alt = -2
   Insn 2: point = 4, n_alt = -2
   Insn 33: point = 6, n_alt = -2
 r83: [0..4]
 r87: [5..6]
 r88: [2..3]
Compressing live ranges: from 7 to 4 - 57%
Ranges after the compression:
 r83: [0..1]
 r87: [2..3]
 r88: [0..1]

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4

********** Pseudo live ranges #2: **********

  BB 4
   Insn 31: point = 0, n_alt = -1
   Insn 30: point = 0, n_alt = 2
  BB 3
   Insn 22: point = 0, n_alt = 0
   Insn 21: point = 0, n_alt = -2
   Insn 20: point = 1, n_alt = 0
   Insn 19: point = 1, n_alt = 3
   Insn 17: point = 1, n_alt = 2
  BB 2
   Insn 10: point = 2, n_alt = -1
   Insn 9: point = 2, n_alt = 0
   Insn 34: point = 3, n_alt = -2
   Insn 2: point = 4, n_alt = -2
   Insn 33: point = 6, n_alt = -2
 r83: [0..4]
 r87: [5..6]
 r88: [2..3]
Compressing live ranges: from 7 to 4 - 57%
Ranges after the compression:
 r83: [0..1]
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=8)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 21
changing reg in insn 13
changing reg in insn 33
changing reg in insn 2
changing reg in insn 34
changing reg in insn 9
deleting insn with uid = 33.
deleting insn with uid = 2.
deleting insn with uid = 34.
deleting insn with uid = 21.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 5 n_edges 5 count 5 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 5 n_edges 5 count 5 (    1)


fbgc_sin

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;;  ref usage 	r0={3d,2u} r1={3d,1u} r2={3d,1u} r4={3d,2u} r5={2d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 102{88d,14u,0e} in 14{13 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 6 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 6 4 2 NOTE_INSN_DELETED)
(note 4 3 8 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 8 4 9 2 (debug_marker) "cmodules/fbgc_math.c":120:1 -1
     (nil))
(insn 9 8 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 4 si [88])
            (const_int 1 [0x1]))) "cmodules/fbgc_math.c":120:1 11 {*cmpsi_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "cmodules/fbgc_math.c":120:1 659 {*jcc}
     (int_list:REG_BR_PROB 662283964 (nil))
 -> 25)
;;  succ:       3 [38.3% (guessed)]  count:411457864 (estimated locally) (FALLTHRU)
;;              4 [61.7% (guessed)]  count:662283960 (estimated locally)
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 411457867 (estimated locally), maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [38.3% (guessed)]  count:411457864 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si]
;; live  kill	
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 12 11 13 3 (var_location:SI D#12 (const_int 1 [0x1])) -1
     (nil))
(debug_insn 13 12 14 3 (var_location:DI arg (reg/v/f:DI 5 di [orig:83 arg ] [83])) -1
     (nil))
(debug_insn 14 13 15 3 (debug_marker:BLK) "cmodules/fbgc_math.c":120:1 -1
     (nil))
(debug_insn 15 14 16 3 (var_location:SI D#13 (debug_expr:SI D#12)) -1
     (nil))
(debug_insn 16 15 17 3 (var_location:SI argc (debug_expr:SI D#13)) -1
     (nil))
(insn 17 16 19 3 (set (reg:DI 2 cx)
        (const_int 0 [0])) "cmodules/fbgc_math.c":120:1 66 {*movdi_internal}
     (nil))
(insn 19 17 20 3 (set (reg:DI 1 dx)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7f213e4ba300 sin>)
                    ] UNSPEC_GOTPCREL)) [11  S8 A8])) "cmodules/fbgc_math.c":120:1 66 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7f213e4ba300 sin>)
        (nil)))
(insn 20 19 22 3 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "cmodules/fbgc_math.c":120:1 67 {*movsi_internal}
     (nil))
(call_insn/j 22 20 23 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("one_arg_math") [flags 0x3]  <function_decl 0x7f213dfac000 one_arg_math>) [0 one_arg_math S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":120:1 681 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("one_arg_math") [flags 0x3]  <function_decl 0x7f213dfac000 one_arg_math>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       EXIT [always]  count:411457867 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 23 22 25)
;; basic block 4, loop depth 0, count 662283957 (estimated locally), maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [61.7% (guessed)]  count:662283960 (estimated locally)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 25 23 26 4 69 (nil) [1 uses])
(note 26 25 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 26 31 4 (set (reg/i:DI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_math.c":120:1 66 {*movdi_internal}
     (nil))
(insn 31 30 35 4 (use (reg/i:DI 0 ax)) "cmodules/fbgc_math.c":120:1 -1
     (nil))
;;  succ:       EXIT [always]  count:662283957 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 35 31 0 NOTE_INSN_DELETED)

;; Function fbgc_tan (fbgc_tan, funcdef_no=61, decl_uid=5697, cgraph_uid=62, symbol_order=66)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) UBsBz {*sibcall_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 4
   Insn 31: point = 0, n_alt = -1
   Insn 30: point = 0, n_alt = 2
  BB 3
   Insn 22: point = 0, n_alt = 0
   Insn 21: point = 0, n_alt = -2
   Insn 20: point = 1, n_alt = 0
   Insn 19: point = 1, n_alt = 3
   Insn 17: point = 1, n_alt = 2
  BB 2
   Insn 10: point = 2, n_alt = -1
   Insn 9: point = 2, n_alt = 0
   Insn 34: point = 3, n_alt = -2
   Insn 2: point = 4, n_alt = -2
   Insn 33: point = 6, n_alt = -2
 r83: [0..4]
 r87: [5..6]
 r88: [2..3]
Compressing live ranges: from 7 to 4 - 57%
Ranges after the compression:
 r83: [0..1]
 r87: [2..3]
 r88: [0..1]

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4

********** Pseudo live ranges #2: **********

  BB 4
   Insn 31: point = 0, n_alt = -1
   Insn 30: point = 0, n_alt = 2
  BB 3
   Insn 22: point = 0, n_alt = 0
   Insn 21: point = 0, n_alt = -2
   Insn 20: point = 1, n_alt = 0
   Insn 19: point = 1, n_alt = 3
   Insn 17: point = 1, n_alt = 2
  BB 2
   Insn 10: point = 2, n_alt = -1
   Insn 9: point = 2, n_alt = 0
   Insn 34: point = 3, n_alt = -2
   Insn 2: point = 4, n_alt = -2
   Insn 33: point = 6, n_alt = -2
 r83: [0..4]
 r87: [5..6]
 r88: [2..3]
Compressing live ranges: from 7 to 4 - 57%
Ranges after the compression:
 r83: [0..1]
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=8)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 21
changing reg in insn 13
changing reg in insn 33
changing reg in insn 2
changing reg in insn 34
changing reg in insn 9
deleting insn with uid = 33.
deleting insn with uid = 2.
deleting insn with uid = 34.
deleting insn with uid = 21.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 5 n_edges 5 count 5 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 5 n_edges 5 count 5 (    1)


fbgc_tan

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;;  ref usage 	r0={3d,2u} r1={3d,1u} r2={3d,1u} r4={3d,2u} r5={2d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 102{88d,14u,0e} in 14{13 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 6 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 6 4 2 NOTE_INSN_DELETED)
(note 4 3 8 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 8 4 9 2 (debug_marker) "cmodules/fbgc_math.c":122:1 -1
     (nil))
(insn 9 8 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 4 si [88])
            (const_int 1 [0x1]))) "cmodules/fbgc_math.c":122:1 11 {*cmpsi_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "cmodules/fbgc_math.c":122:1 659 {*jcc}
     (int_list:REG_BR_PROB 662283964 (nil))
 -> 25)
;;  succ:       3 [38.3% (guessed)]  count:411457864 (estimated locally) (FALLTHRU)
;;              4 [61.7% (guessed)]  count:662283960 (estimated locally)
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 411457867 (estimated locally), maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [38.3% (guessed)]  count:411457864 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si]
;; live  kill	
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 12 11 13 3 (var_location:SI D#16 (const_int 1 [0x1])) -1
     (nil))
(debug_insn 13 12 14 3 (var_location:DI arg (reg/v/f:DI 5 di [orig:83 arg ] [83])) -1
     (nil))
(debug_insn 14 13 15 3 (debug_marker:BLK) "cmodules/fbgc_math.c":122:1 -1
     (nil))
(debug_insn 15 14 16 3 (var_location:SI D#17 (debug_expr:SI D#16)) -1
     (nil))
(debug_insn 16 15 17 3 (var_location:SI argc (debug_expr:SI D#17)) -1
     (nil))
(insn 17 16 19 3 (set (reg:DI 2 cx)
        (const_int 0 [0])) "cmodules/fbgc_math.c":122:1 66 {*movdi_internal}
     (nil))
(insn 19 17 20 3 (set (reg:DI 1 dx)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("tan") [flags 0x41]  <function_decl 0x7f213e4bd500 tan>)
                    ] UNSPEC_GOTPCREL)) [11  S8 A8])) "cmodules/fbgc_math.c":122:1 66 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref:DI ("tan") [flags 0x41]  <function_decl 0x7f213e4bd500 tan>)
        (nil)))
(insn 20 19 22 3 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "cmodules/fbgc_math.c":122:1 67 {*movsi_internal}
     (nil))
(call_insn/j 22 20 23 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("one_arg_math") [flags 0x3]  <function_decl 0x7f213dfac000 one_arg_math>) [0 one_arg_math S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":122:1 681 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("one_arg_math") [flags 0x3]  <function_decl 0x7f213dfac000 one_arg_math>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       EXIT [always]  count:411457867 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 23 22 25)
;; basic block 4, loop depth 0, count 662283957 (estimated locally), maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [61.7% (guessed)]  count:662283960 (estimated locally)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 25 23 26 4 72 (nil) [1 uses])
(note 26 25 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 26 31 4 (set (reg/i:DI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_math.c":122:1 66 {*movdi_internal}
     (nil))
(insn 31 30 35 4 (use (reg/i:DI 0 ax)) "cmodules/fbgc_math.c":122:1 -1
     (nil))
;;  succ:       EXIT [always]  count:662283957 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 35 31 0 NOTE_INSN_DELETED)

;; Function fbgc_sqrt (fbgc_sqrt, funcdef_no=63, decl_uid=5729, cgraph_uid=64, symbol_order=70)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) UBsBz {*sibcall_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 4
   Insn 31: point = 0, n_alt = -1
   Insn 30: point = 0, n_alt = 2
  BB 3
   Insn 22: point = 0, n_alt = 0
   Insn 21: point = 0, n_alt = -2
   Insn 20: point = 1, n_alt = 0
   Insn 19: point = 1, n_alt = 3
   Insn 17: point = 1, n_alt = 2
  BB 2
   Insn 10: point = 2, n_alt = -1
   Insn 9: point = 2, n_alt = 0
   Insn 34: point = 3, n_alt = -2
   Insn 2: point = 4, n_alt = -2
   Insn 33: point = 6, n_alt = -2
 r83: [0..4]
 r87: [5..6]
 r88: [2..3]
Compressing live ranges: from 7 to 4 - 57%
Ranges after the compression:
 r83: [0..1]
 r87: [2..3]
 r88: [0..1]

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4

********** Pseudo live ranges #2: **********

  BB 4
   Insn 31: point = 0, n_alt = -1
   Insn 30: point = 0, n_alt = 2
  BB 3
   Insn 22: point = 0, n_alt = 0
   Insn 21: point = 0, n_alt = -2
   Insn 20: point = 1, n_alt = 0
   Insn 19: point = 1, n_alt = 3
   Insn 17: point = 1, n_alt = 2
  BB 2
   Insn 10: point = 2, n_alt = -1
   Insn 9: point = 2, n_alt = 0
   Insn 34: point = 3, n_alt = -2
   Insn 2: point = 4, n_alt = -2
   Insn 33: point = 6, n_alt = -2
 r83: [0..4]
 r87: [5..6]
 r88: [2..3]
Compressing live ranges: from 7 to 4 - 57%
Ranges after the compression:
 r83: [0..1]
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=8)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 21
changing reg in insn 13
changing reg in insn 33
changing reg in insn 2
changing reg in insn 34
changing reg in insn 9
deleting insn with uid = 33.
deleting insn with uid = 2.
deleting insn with uid = 34.
deleting insn with uid = 21.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 5 n_edges 5 count 5 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 5 n_edges 5 count 5 (    1)


fbgc_sqrt

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;;  ref usage 	r0={3d,2u} r1={3d,1u} r2={3d,1u} r4={3d,2u} r5={2d,2u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 102{88d,14u,0e} in 14{13 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 6 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 6 4 2 NOTE_INSN_DELETED)
(note 4 3 8 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 8 4 9 2 (debug_marker) "cmodules/fbgc_math.c":124:1 -1
     (nil))
(insn 9 8 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 4 si [88])
            (const_int 1 [0x1]))) "cmodules/fbgc_math.c":124:1 11 {*cmpsi_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "cmodules/fbgc_math.c":124:1 659 {*jcc}
     (int_list:REG_BR_PROB 662283964 (nil))
 -> 25)
;;  succ:       3 [38.3% (guessed)]  count:411457864 (estimated locally) (FALLTHRU)
;;              4 [61.7% (guessed)]  count:662283960 (estimated locally)
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 411457867 (estimated locally), maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [38.3% (guessed)]  count:411457864 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si]
;; live  kill	
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 12 11 13 3 (var_location:SI D#20 (const_int 1 [0x1])) -1
     (nil))
(debug_insn 13 12 14 3 (var_location:DI arg (reg/v/f:DI 5 di [orig:83 arg ] [83])) -1
     (nil))
(debug_insn 14 13 15 3 (debug_marker:BLK) "cmodules/fbgc_math.c":124:1 -1
     (nil))
(debug_insn 15 14 16 3 (var_location:SI D#21 (debug_expr:SI D#20)) -1
     (nil))
(debug_insn 16 15 17 3 (var_location:SI argc (debug_expr:SI D#21)) -1
     (nil))
(insn 17 16 19 3 (set (reg:DI 2 cx)
        (const_int 0 [0])) "cmodules/fbgc_math.c":124:1 66 {*movdi_internal}
     (nil))
(insn 19 17 20 3 (set (reg:DI 1 dx)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7f213e4bc500 sqrt>)
                    ] UNSPEC_GOTPCREL)) [11  S8 A8])) "cmodules/fbgc_math.c":124:1 66 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7f213e4bc500 sqrt>)
        (nil)))
(insn 20 19 22 3 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "cmodules/fbgc_math.c":124:1 67 {*movsi_internal}
     (nil))
(call_insn/j 22 20 23 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("one_arg_math") [flags 0x3]  <function_decl 0x7f213dfac000 one_arg_math>) [0 one_arg_math S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":124:1 681 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("one_arg_math") [flags 0x3]  <function_decl 0x7f213dfac000 one_arg_math>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       EXIT [always]  count:411457867 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 23 22 25)
;; basic block 4, loop depth 0, count 662283957 (estimated locally), maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [61.7% (guessed)]  count:662283960 (estimated locally)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 25 23 26 4 75 (nil) [1 uses])
(note 26 25 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 26 31 4 (set (reg/i:DI 0 ax)
        (const_int 0 [0])) "cmodules/fbgc_math.c":124:1 66 {*movdi_internal}
     (nil))
(insn 31 30 35 4 (use (reg/i:DI 0 ax)) "cmodules/fbgc_math.c":124:1 -1
     (nil))
;;  succ:       EXIT [always]  count:662283957 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 35 31 0 NOTE_INSN_DELETED)

;; Function fbgc_exp (fbgc_exp, funcdef_no=62, decl_uid=5733, cgraph_uid=63, symbol_order=68)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-56, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (1) UBsBz {*sibcall_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 93:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) rBwBz {*call}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 99:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=616,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=613,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=14,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=17,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=18,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=19,overall=11,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=20,overall=607,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=21,overall=616,losers=2 -- refuse
	 Choosing alt 14 in insn 100:  (0) v  (1) m {*movdf_internal}
      Creating newreg=185 from oldreg=129, assigning class ALL_SSE_REGS to r185
  100: r185:DF=[frame:DI+0x8]
    Inserting insn reload after:
  447: r129:DF=r185:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=616,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=15,overall=2,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 447:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (1) rBwBz {*call_value}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
	 Choosing alt 1 in insn 127:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=186 from oldreg=128, assigning class SSE_REGS to r186
  127: r186:DF=r186:DF*r116:DF
      REG_DEAD r128:DF
    Inserting insn reload before:
  448: r186:DF=r128:DF
    Inserting insn reload after:
  449: r147:DF=r186:DF

          alt=1,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 1 in insn 128:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=187 from oldreg=129, assigning class SSE_REGS to r187
      Making reload reg 187 for reg 129 optional
  128: xmm1:DF=r116:DF*r187:DF
      REG_DEAD r129:DF
      REG_DEAD r116:DF
    Inserting insn reload before:
  450: r187:DF=r129:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 450:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (1) UBsBz {*sibcall_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 144:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 398:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 161:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 174:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 176:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 177:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 188:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 191:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            alt=0: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=2,overall=15,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            alt=0: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=2,overall=15,losers=2,rld_nregs=2
	 Choosing alt 2 in insn 216:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=188 from oldreg=99, assigning class GENERAL_REGS to r188
  216: {r188:SI=r188:SI*r134:SI;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  451: r188:SI=r82:SI
    Inserting insn reload after:
  452: r99:SI=r188:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 452:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=0,overall=15,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=1,overall=15,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=18,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=16,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=16,losers=2 -- refuse
	 Choosing alt 3 in insn 230:  (0) r  (1) r  (2) le {*adddi_1}
      Creating newreg=189 from oldreg=169, assigning class GENERAL_REGS to r189
  230: {r189:DI=r139:DI+0xe;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload after:
  453: r169:DI=r189:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 453:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=17,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=17,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=18,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=16,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=16,losers=2 -- refuse
	 Choosing alt 3 in insn 256:  (0) r  (1) r  (2) le {*adddi_1}
      Creating newreg=190 from oldreg=170, assigning class GENERAL_REGS to r190
  256: {r190:DI=frame:DI+0x8;clobber flags:CC;}
      REG_UNUSED flags:CC
      REG_EQUIV frame:DI-0x8
    Inserting insn reload after:
  454: r170:DI=r190:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 454:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 257:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 229:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
	 Choosing alt 2 in insn 234:  (0) r  (1) 0  (2) mr {*mulsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 240:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 243:  (0) v  (1) m {*movdf_internal}
      Creating newreg=191 from oldreg=169, assigning class GENERAL_REGS to address r191
	   Change to class INDEX_REGS for r191
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =r  (1) Ts {*leadi}
  246: r133:DI=r191:DI+r154:DI+0x4
      REG_DEAD r154:DI
    Inserting insn reload before:
  455: r191:DI=r169:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 455:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) qm  (1) qn {*cmpqi_1}
      Creating newreg=192 from oldreg=99, assigning class GENERAL_REGS to address r192
	   Change to class INDEX_REGS for r192
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =r  (1) Ts {*leadi}
  252: r156:DI=zero_extend(r192:SI+r101:SI)
      REG_DEAD r101:SI
    Inserting insn reload before:
  456: r192:SI=r99:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 258:  (0) v  (1) m {*movdf_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 412:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) rBwBz {*call}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 263:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=616,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=613,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=14,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=17,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=18,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=19,overall=11,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=20,overall=607,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=21,overall=616,losers=2 -- refuse
	 Choosing alt 14 in insn 264:  (0) v  (1) m {*movdf_internal}
      Creating newreg=193 from oldreg=131, assigning class ALL_SSE_REGS to r193
  264: r193:DF=[frame:DI+0x8]
    Inserting insn reload after:
  457: r131:DF=r193:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=616,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=15,overall=2,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 457:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (1) rBwBz {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
	 Choosing alt 1 in insn 286:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 287:  (0) m  (1) v {*movdf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 289
	 Choosing alt 1 in insn 289:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=194 from oldreg=131, assigning class SSE_REGS to r194
      Making reload reg 194 for reg 131 optional
  289: r162:DF=r121:DF*r194:DF
      REG_DEAD r131:DF
      REG_DEAD r121:DF
      REG_EQUIV [r169:DI+r157:DI+0x4]
    Inserting insn reload before:
  458: r194:DF=r131:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 458:  (0) v  (1) m {*movdf_internal}
      Creating newreg=195 from oldreg=169, assigning class GENERAL_REGS to address r195
	   Change to class INDEX_REGS for r195
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 290:  (0) m  (1) v {*movdf_internal}
  290: [r195:DI+r157:DI+0x4]=r162:DF
      REG_DEAD r162:DF
      REG_DEAD r157:DI
    Inserting insn reload before:
  459: r195:DI=r169:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 459:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 292:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 307:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 309:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 327:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 342:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) rm  (1) re {*cmpsi_1}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 17
   Insn 178: point = 0, n_alt = 0
   Insn 177: point = 0, n_alt = 4
   Insn 176: point = 0, n_alt = 4
   Insn 175: point = 0, n_alt = 0
   Insn 174: point = 0, n_alt = 4
  BB 31
   Insn 377: point = 0, n_alt = -1
   Insn 376: point = 0, n_alt = -2
  BB 21
   Insn 441: point = 2, n_alt = -1
  BB 19
   Insn 438: point = 3, n_alt = -1
  BB 18
   Insn 194: point = 4, n_alt = -1
   Insn 193: point = 4, n_alt = 0
   Insn 191: point = 4, n_alt = 0
   Insn 188: point = 5, n_alt = 0
   Insn 186: point = 6, n_alt = 0
   Insn 185: point = 6, n_alt = -2
   Insn 184: point = 6, n_alt = -2
   Insn 183: point = 7, n_alt = -2
  BB 16
   Insn 171: point = 8, n_alt = -1
   Insn 170: point = 8, n_alt = 0
   Insn 167: point = 8, n_alt = -2
   Insn 424: point = 10, n_alt = -2
   Insn 166: point = 11, n_alt = 0
   Insn 165: point = 11, n_alt = -2
   Insn 164: point = 11, n_alt = 0
   Insn 163: point = 11, n_alt = -2
   Insn 406: point = 11, n_alt = -2
  BB 15
   Insn 161: point = 12, n_alt = 4
   Insn 398: point = 13, n_alt = 3
   Insn 5: point = 14, n_alt = 0
   Insn 157: point = 15, n_alt = 0
  BB 11
   Insn 435: point = 18, n_alt = -1
  BB 14
   Insn 155: point = 19, n_alt = -1
   Insn 154: point = 19, n_alt = 0
   Insn 146: point = 19, n_alt = 3
   Insn 144: point = 21, n_alt = 1
   Insn 141: point = 21, n_alt = -2
   Insn 423: point = 23, n_alt = -2
   Insn 140: point = 24, n_alt = 0
   Insn 139: point = 24, n_alt = -2
   Insn 136: point = 24, n_alt = 0
  BB 10
   Insn 61: point = 27, n_alt = -1
   Insn 60: point = 27, n_alt = 0
  BB 9
   Insn 432: point = 29, n_alt = -1
  BB 30
   Insn 347: point = 30, n_alt = -1
   Insn 346: point = 30, n_alt = 0
   Insn 342: point = 30, n_alt = 0
  BB 29
   Insn 339: point = 32, n_alt = -1
   Insn 338: point = 32, n_alt = 0
  BB 28
   Insn 331: point = 33, n_alt = -1
   Insn 330: point = 33, n_alt = 0
   Insn 327: point = 33, n_alt = 0
  BB 27
   Insn 322: point = 35, n_alt = 0
  BB 25
   Insn 444: point = 37, n_alt = -1
  BB 26
   Insn 314: point = 38, n_alt = -1
   Insn 313: point = 38, n_alt = 0
   Insn 312: point = 38, n_alt = 0
   Insn 309: point = 39, n_alt = 0
   Insn 307: point = 40, n_alt = 15
   Insn 427: point = 41, n_alt = -2
   Insn 305: point = 42, n_alt = 0
   Insn 304: point = 42, n_alt = -2
  BB 23
   Insn 248: point = 44, n_alt = -1
   Insn 247: point = 44, n_alt = 0
   Insn 246: point = 44, n_alt = 0
   Insn 455: point = 46, n_alt = 3
   Insn 243: point = 47, n_alt = 14
   Insn 241: point = 48, n_alt = 0
   Insn 240: point = 50, n_alt = 3
   Insn 235: point = 51, n_alt = 0
   Insn 234: point = 53, n_alt = 2
  BB 24
   Insn 297: point = 56, n_alt = -1
   Insn 296: point = 56, n_alt = 0
   Insn 295: point = 56, n_alt = 0
   Insn 292: point = 57, n_alt = 0
   Insn 290: point = 58, n_alt = 15
   Insn 459: point = 59, n_alt = 3
   Insn 289: point = 60, n_alt = 1
   Insn 458: point = 62, n_alt = 14
   Insn 287: point = 64, n_alt = 15
   Insn 286: point = 65, n_alt = 1
   Insn 272: point = 67, n_alt = -2
   Insn 426: point = 69, n_alt = -2
   Insn 271: point = 70, n_alt = 0
   Insn 270: point = 70, n_alt = -2
   Insn 457: point = 71, n_alt = 15
   Insn 264: point = 73, n_alt = 14
   Insn 263: point = 74, n_alt = 14
   Insn 262: point = 75, n_alt = 0
   Insn 261: point = 75, n_alt = -2
   Insn 412: point = 76, n_alt = 3
   Insn 259: point = 76, n_alt = 3
   Insn 258: point = 76, n_alt = 14
   Insn 253: point = 77, n_alt = 0
   Insn 252: point = 79, n_alt = 0
   Insn 456: point = 81, n_alt = 0
  BB 22
   Insn 6: point = 83, n_alt = 0
   Insn 229: point = 84, n_alt = 3
  BB 20
   Insn 224: point = 86, n_alt = -1
   Insn 223: point = 86, n_alt = 0
   Insn 257: point = 86, n_alt = 5
   Insn 454: point = 87, n_alt = 5
   Insn 256: point = 89, n_alt = 3
   Insn 453: point = 90, n_alt = 5
   Insn 230: point = 92, n_alt = 3
   Insn 7: point = 93, n_alt = 0
   Insn 452: point = 94, n_alt = 1
   Insn 216: point = 96, n_alt = 2
   Insn 451: point = 97, n_alt = -2
	Hard reg 1 is preferable by r188 with profit 76
   Insn 215: point = 98, n_alt = 0
   Insn 214: point = 99, n_alt = 0
   Insn 211: point = 100, n_alt = -2
   Insn 425: point = 102, n_alt = -2
   Insn 210: point = 103, n_alt = 0
   Insn 209: point = 103, n_alt = -2
   Insn 208: point = 104, n_alt = -2
   Insn 207: point = 105, n_alt = -2
   Insn 206: point = 106, n_alt = 0
   Insn 205: point = 106, n_alt = 0
   Insn 204: point = 107, n_alt = 0
   Insn 203: point = 108, n_alt = 0
  BB 12
   Insn 77: point = 110, n_alt = 0
   Insn 76: point = 110, n_alt = -2
   Insn 75: point = 111, n_alt = -2
   Insn 419: point = 113, n_alt = -2
   Insn 74: point = 114, n_alt = 0
   Insn 73: point = 114, n_alt = -2
   Insn 70: point = 115, n_alt = -2
   Insn 418: point = 117, n_alt = -2
   Insn 69: point = 118, n_alt = 0
   Insn 68: point = 118, n_alt = -2
  BB 7
   Insn 429: point = 120, n_alt = -1
  BB 6
   Insn 47: point = 121, n_alt = -1
   Insn 46: point = 121, n_alt = 0
  BB 13
   Insn 130: point = 123, n_alt = 0
   Insn 129: point = 123, n_alt = -2
   Insn 128: point = 124, n_alt = 1
   Insn 450: point = 125, n_alt = 14
   Insn 449: point = 127, n_alt = -2
	Hard reg 20 is preferable by r186 with profit 76
   Insn 127: point = 129, n_alt = 1
   Insn 448: point = 130, n_alt = -2
	Hard reg 20 is preferable by r186 with profit 76
	Hard reg 22 is preferable by r186 with profit 76
   Insn 108: point = 132, n_alt = -2
   Insn 422: point = 134, n_alt = -2
   Insn 107: point = 135, n_alt = 0
   Insn 106: point = 135, n_alt = -2
   Insn 447: point = 136, n_alt = 15
   Insn 100: point = 138, n_alt = 14
   Insn 99: point = 139, n_alt = 14
   Insn 98: point = 140, n_alt = 0
   Insn 97: point = 140, n_alt = -2
   Insn 96: point = 141, n_alt = -2
   Insn 95: point = 142, n_alt = -2
   Insn 94: point = 143, n_alt = -2
   Insn 93: point = 144, n_alt = 3
   Insn 86: point = 145, n_alt = -2
   Insn 421: point = 147, n_alt = -2
   Insn 85: point = 148, n_alt = -2
   Insn 420: point = 150, n_alt = -2
   Insn 84: point = 151, n_alt = 0
   Insn 83: point = 151, n_alt = -2
  BB 8
   Insn 54: point = 153, n_alt = -1
   Insn 53: point = 153, n_alt = 0
  BB 5
   Insn 42: point = 155, n_alt = -1
   Insn 41: point = 155, n_alt = 0
  BB 4
   Insn 37: point = 156, n_alt = -1
  BB 3
   Insn 32: point = 157, n_alt = -1
   Insn 31: point = 157, n_alt = 0
   Insn 30: point = 157, n_alt = 4
   Insn 29: point = 158, n_alt = 3
  BB 2
   Insn 16: point = 160, n_alt = -1
   Insn 15: point = 160, n_alt = 0
   Insn 11: point = 161, n_alt = 2
   Insn 417: point = 162, n_alt = -2
   Insn 2: point = 163, n_alt = -2
   Insn 416: point = 165, n_alt = -2
 r82: [86..99] [30..35]
 r83: [151..158] [118..122] [30..109] [25..28]
 r84: [153..157] [121..122] [27..28]
 r85: [114..115]
 r86: [110..111]
 r87: [30..93]
 r88: [19..24] [4..17]
 r89: [19..19] [16..17]
 r90: [38..83]
 r92: [6..8]
 r94: [4..14]
 r99: [30..94]
 r101: [80..82] [44..51]
 r107: [70..82] [42..47]
 r116: [124..132]
 r121: [61..67]
 r128: [131..139]
 r129: [126..136]
 r130: [66..74]
 r131: [63..71]
 r132: [38..84]
 r133: [64..82] [40..44]
 r134: [83..98] [54..56] [30..38]
 r136: [4..15]
 r139: [153..161] [121..122] [27..100] [0..21]
 r140: [156..163] [20..28]
 r142: [135..148]
 r143: [140..145]
 r144: [141..144]
 r145: [142..143]
 r147: [123..127]
 r149: [105..108]
 r150: [104..107]
 r151: [103..106]
 r152: [52..53]
 r153: [49..50]
 r154: [45..48]
 r156: [78..79]
 r157: [58..77]
 r160: [75..76]
 r161: [64..65]
 r162: [58..60]
 r166: [4..13]
 r167: [4..12]
 r169: [30..90]
 r170: [30..87]
 r172: [30..86]
 r173: [164..165]
 r174: [160..162]
 r175: [116..117]
 r176: [112..113]
 r177: [149..150]
 r178: [146..147]
 r179: [133..134]
 r180: [22..23]
 r181: [9..10]
 r182: [101..102]
 r183: [68..69]
 r184: [40..41]
 r185: [137..138]
 r186: [128..130]
 r187: [124..125]
 r188: [95..97]
 r189: [91..92]
 r190: [88..89]
 r191: [45..46]
 r192: [80..81]
 r193: [72..73]
 r194: [61..62]
 r195: [58..59]
Compressing live ranges: from 166 to 98 - 59%
Ranges after the compression:
 r82: [50..57] [13..14]
 r83: [92..93] [70..71] [11..61]
 r84: [92..93] [70..71] [11..12]
 r85: [66..67]
 r86: [62..63]
 r87: [13..55]
 r88: [0..10]
 r89: [4..6]
 r90: [15..48]
 r92: [0..1]
 r94: [0..3]
 r99: [13..55]
 r101: [46..47] [19..23]
 r107: [38..47] [18..21]
 r116: [72..79]
 r121: [30..35]
 r128: [78..85]
 r129: [74..83]
 r130: [34..41]
 r131: [32..39]
 r132: [15..49]
 r133: [32..47] [16..19]
 r134: [48..57] [26..27] [13..15]
 r136: [0..3]
 r139: [92..95] [70..71] [11..57] [0..8]
 r140: [92..95] [7..12]
 r142: [82..89]
 r143: [86..87]
 r144: [86..87]
 r145: [86..87]
 r147: [72..75]
 r149: [60..61]
 r150: [60..61]
 r151: [60..61]
 r152: [24..25]
 r153: [22..23]
 r154: [20..21]
 r156: [44..45]
 r157: [28..43]
 r160: [42..43]
 r161: [32..33]
 r162: [28..29]
 r166: [0..3]
 r167: [0..3]
 r169: [13..53]
 r170: [13..51]
 r172: [13..50]
 r173: [96..97]
 r174: [94..95]
 r175: [68..69]
 r176: [64..65]
 r177: [90..91]
 r178: [88..89]
 r179: [80..81]
 r180: [9..10]
 r181: [2..3]
 r182: [58..59]
 r183: [36..37]
 r184: [16..17]
 r185: [84..85]
 r186: [76..77]
 r187: [72..73]
 r188: [56..57]
 r189: [54..55]
 r190: [52..53]
 r191: [20..21]
 r192: [46..47]
 r193: [40..41]
 r194: [30..31]
 r195: [28..29]

********** Inheritance #1: **********

EBB 2
EBB 3 4 5 6 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=196 from oldreg=129, assigning class ALL_SSE_REGS to inheritance r196
    Original reg change 129->196 (bb13):
  447: r196:DF=r185:DF
      REG_DEAD r185:DF
    Add original<-inheritance after:
  460: r129:DF=r196:DF

    Inheritance reuse change 129->196 (bb13):
  113: debug res$imag => r196:DF*r116:DF
    Inheritance reuse change 129->196 (bb13):
  450: r187:DF=r196:DF
      REG_DEAD r196:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=197, assigning class NO_REGS to save r197
    Split reuse change 128->197:
  111: debug res$real => r197:DF*r116:DF
  448: r186:DF=r128:DF
      REG_DEAD r128:DF
    Add reg<-save before:
  462: r128:DF=r197:DF

   99: r128:DF=[frame:DI]
    Add save<-reg after:
  461: r197:DF=r128:DF

	  ))))))))))))))))))))))))))))))))))))))))))))))))
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=198, assigning class NO_REGS to save r198
    Split reuse change 142->198:
  396: debug D#37 => r198:DF#0
  106: xmm0:DF=r142:DF
      REG_DEAD r142:DF
    Add reg<-save before:
  464: r142:DF=r198:DF

   85: r142:DF=r177:DF
      REG_DEAD r177:DF
    Add save<-reg after:
  463: r198:DF=r142:DF

	  ))))))))))))))))))))))))))))))))))))))))))))))))
	    Removing dead insn:
   460: r129:DF=r196:DF
deleting insn with uid = 460.
EBB 14 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=199 from oldreg=131, assigning class ALL_SSE_REGS to inheritance r199
    Original reg change 131->199 (bb24):
  457: r199:DF=r193:DF
      REG_DEAD r193:DF
    Add original<-inheritance after:
  465: r131:DF=r199:DF

    Inheritance reuse change 131->199 (bb24):
  277: debug res$imag => r199:DF*r121:DF
    Inheritance reuse change 131->199 (bb24):
  458: r194:DF=r199:DF
      REG_DEAD r199:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=200, assigning class NO_REGS to save r200
    Split reuse change 130->200:
  275: debug res$real => r200:DF*r121:DF
  286: r161:DF=r130:DF*r121:DF
      REG_DEAD r130:DF
      REG_EQUIV [r133:DI]
    Add reg<-save before:
  467: r130:DF=r200:DF

  263: r130:DF=[frame:DI]
    Add save<-reg after:
  466: r200:DF=r130:DF

	  ))))))))))))))))))))))))))))))))))))))))))))))))
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=201, assigning class NO_REGS to save r201
  290: [r195:DI+r157:DI+0x4]=r162:DF
      REG_DEAD r195:DI
      REG_DEAD r162:DF
      REG_DEAD r157:DI
    Add reg<-save before:
  469: r157:DI=r201:DI

  258: r160:DF=[r132:DI+r157:DI+0x4]
      REG_EQUIV [r132:DI+r157:DI+0x4]
    Add save<-reg after:
  468: r201:DI=r157:DI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
  ----------------------------------
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=202, assigning class NO_REGS to save r202
  270: xmm0:DF=r107:DF
      REG_DEAD r107:DF
    Add reg<-save before:
  471: r107:DF=r202:DF

  249: NOTE_INSN_BASIC_BLOCK 24
    Add save<-reg after:
  470: r202:DF=r107:DF

	  ))))))))))))))))))))))))))))))))))))))))))))))))
	    Removing dead insn:
   465: r131:DF=r199:DF
deleting insn with uid = 465.
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31

********** Pseudo live ranges #2: **********

  BB 17
   Insn 178: point = 0, n_alt = 0
   Insn 177: point = 0, n_alt = 4
   Insn 176: point = 0, n_alt = 4
   Insn 175: point = 0, n_alt = 0
   Insn 174: point = 0, n_alt = 4
  BB 31
   Insn 377: point = 0, n_alt = -1
   Insn 376: point = 0, n_alt = -2
  BB 21
   Insn 441: point = 2, n_alt = -1
  BB 19
   Insn 438: point = 3, n_alt = -1
  BB 18
   Insn 194: point = 4, n_alt = -1
   Insn 193: point = 4, n_alt = 0
   Insn 191: point = 4, n_alt = 0
   Insn 188: point = 5, n_alt = 0
   Insn 186: point = 6, n_alt = 0
   Insn 185: point = 6, n_alt = -2
   Insn 184: point = 6, n_alt = -2
   Insn 183: point = 7, n_alt = -2
  BB 16
   Insn 171: point = 8, n_alt = -1
   Insn 170: point = 8, n_alt = 0
   Insn 167: point = 8, n_alt = -2
   Insn 424: point = 10, n_alt = -2
   Insn 166: point = 11, n_alt = 0
   Insn 165: point = 11, n_alt = -2
   Insn 164: point = 11, n_alt = 0
   Insn 163: point = 11, n_alt = -2
   Insn 406: point = 11, n_alt = -2
  BB 15
   Insn 161: point = 12, n_alt = 4
   Insn 398: point = 13, n_alt = 3
   Insn 5: point = 14, n_alt = 0
   Insn 157: point = 15, n_alt = 0
  BB 11
   Insn 435: point = 18, n_alt = -1
  BB 14
   Insn 155: point = 19, n_alt = -1
   Insn 154: point = 19, n_alt = 0
   Insn 146: point = 19, n_alt = 3
   Insn 144: point = 21, n_alt = 1
   Insn 141: point = 21, n_alt = -2
   Insn 423: point = 23, n_alt = -2
   Insn 140: point = 24, n_alt = 0
   Insn 139: point = 24, n_alt = -2
   Insn 136: point = 24, n_alt = 0
  BB 10
   Insn 61: point = 27, n_alt = -1
   Insn 60: point = 27, n_alt = 0
  BB 9
   Insn 432: point = 29, n_alt = -1
  BB 30
   Insn 347: point = 30, n_alt = -1
   Insn 346: point = 30, n_alt = 0
   Insn 342: point = 30, n_alt = 0
  BB 29
   Insn 339: point = 32, n_alt = -1
   Insn 338: point = 32, n_alt = 0
  BB 28
   Insn 331: point = 33, n_alt = -1
   Insn 330: point = 33, n_alt = 0
   Insn 327: point = 33, n_alt = 0
  BB 27
   Insn 322: point = 35, n_alt = 0
  BB 25
   Insn 444: point = 37, n_alt = -1
  BB 26
   Insn 314: point = 38, n_alt = -1
   Insn 313: point = 38, n_alt = 0
   Insn 312: point = 38, n_alt = 0
   Insn 309: point = 39, n_alt = 0
   Insn 307: point = 40, n_alt = 15
   Insn 427: point = 41, n_alt = -2
   Insn 305: point = 42, n_alt = 0
   Insn 304: point = 42, n_alt = -2
  BB 23
   Insn 248: point = 44, n_alt = -1
   Insn 247: point = 44, n_alt = 0
   Insn 246: point = 44, n_alt = 0
   Insn 455: point = 46, n_alt = 3
   Insn 243: point = 47, n_alt = 14
   Insn 241: point = 48, n_alt = 0
   Insn 240: point = 50, n_alt = 3
   Insn 235: point = 51, n_alt = 0
   Insn 234: point = 53, n_alt = 2
  BB 24
   Insn 297: point = 56, n_alt = -1
   Insn 296: point = 56, n_alt = 0
   Insn 295: point = 56, n_alt = 0
   Insn 292: point = 57, n_alt = 0
   Insn 290: point = 58, n_alt = 15
   Insn 469: point = 59, n_alt = -1
	Hard reg 0 is preferable by r201 with profit 1000
   Insn 459: point = 61, n_alt = 3
   Insn 289: point = 62, n_alt = 1
   Insn 458: point = 64, n_alt = 14
	   Creating copy r194<-r199@1000
   Insn 287: point = 66, n_alt = 15
   Insn 286: point = 67, n_alt = 1
   Insn 467: point = 69, n_alt = -1
	Hard reg 21 is preferable by r200 with profit 1000
   Insn 272: point = 71, n_alt = -2
   Insn 426: point = 73, n_alt = -2
   Insn 271: point = 74, n_alt = 0
   Insn 270: point = 74, n_alt = -2
   Insn 471: point = 75, n_alt = -1
	Hard reg 22 is preferable by r202 with profit 1000
   Insn 457: point = 77, n_alt = 15
	   Creating copy r193->r199@1000
   Insn 264: point = 79, n_alt = 14
   Insn 466: point = 80, n_alt = -1
	Hard reg 21 is preferable by r200 with profit 2000
   Insn 263: point = 82, n_alt = 14
   Insn 262: point = 83, n_alt = 0
   Insn 261: point = 83, n_alt = -2
   Insn 412: point = 84, n_alt = 3
   Insn 259: point = 84, n_alt = 3
   Insn 468: point = 84, n_alt = -1
	Hard reg 0 is preferable by r201 with profit 2000
   Insn 258: point = 86, n_alt = 14
   Insn 253: point = 87, n_alt = 0
   Insn 252: point = 89, n_alt = 0
   Insn 456: point = 91, n_alt = 0
   Insn 470: point = 92, n_alt = -1
	Hard reg 22 is preferable by r202 with profit 2000
  BB 22
   Insn 6: point = 95, n_alt = 0
   Insn 229: point = 96, n_alt = 3
  BB 20
   Insn 224: point = 98, n_alt = -1
   Insn 223: point = 98, n_alt = 0
   Insn 257: point = 98, n_alt = 5
   Insn 454: point = 99, n_alt = 5
   Insn 256: point = 101, n_alt = 3
   Insn 453: point = 102, n_alt = 5
   Insn 230: point = 104, n_alt = 3
   Insn 7: point = 105, n_alt = 0
   Insn 452: point = 106, n_alt = 1
   Insn 216: point = 108, n_alt = 2
   Insn 451: point = 109, n_alt = -2
	Hard reg 1 is preferable by r188 with profit 76
   Insn 215: point = 110, n_alt = 0
   Insn 214: point = 111, n_alt = 0
   Insn 211: point = 112, n_alt = -2
   Insn 425: point = 114, n_alt = -2
   Insn 210: point = 115, n_alt = 0
   Insn 209: point = 115, n_alt = -2
   Insn 208: point = 116, n_alt = -2
   Insn 207: point = 117, n_alt = -2
   Insn 206: point = 118, n_alt = 0
   Insn 205: point = 118, n_alt = 0
   Insn 204: point = 119, n_alt = 0
   Insn 203: point = 120, n_alt = 0
  BB 12
   Insn 77: point = 122, n_alt = 0
   Insn 76: point = 122, n_alt = -2
   Insn 75: point = 123, n_alt = -2
   Insn 419: point = 125, n_alt = -2
   Insn 74: point = 126, n_alt = 0
   Insn 73: point = 126, n_alt = -2
   Insn 70: point = 127, n_alt = -2
   Insn 418: point = 129, n_alt = -2
   Insn 69: point = 130, n_alt = 0
   Insn 68: point = 130, n_alt = -2
  BB 7
   Insn 429: point = 132, n_alt = -1
  BB 6
   Insn 47: point = 133, n_alt = -1
   Insn 46: point = 133, n_alt = 0
  BB 13
   Insn 130: point = 135, n_alt = 0
   Insn 129: point = 135, n_alt = -2
   Insn 128: point = 136, n_alt = 1
   Insn 450: point = 137, n_alt = 14
	   Creating copy r187<-r196@76
   Insn 449: point = 139, n_alt = -2
	Hard reg 20 is preferable by r186 with profit 76
   Insn 127: point = 141, n_alt = 1
   Insn 448: point = 142, n_alt = -2
	Hard reg 20 is preferable by r186 with profit 76
	Hard reg 22 is preferable by r186 with profit 76
   Insn 462: point = 144, n_alt = -1
	Hard reg 22 is preferable by r197 with profit 76
   Insn 108: point = 146, n_alt = -2
   Insn 422: point = 148, n_alt = -2
   Insn 107: point = 149, n_alt = 0
   Insn 106: point = 149, n_alt = -2
   Insn 464: point = 150, n_alt = -1
	Hard reg 23 is preferable by r198 with profit 76
   Insn 447: point = 152, n_alt = 15
	   Creating copy r185->r196@76
   Insn 100: point = 154, n_alt = 14
   Insn 461: point = 155, n_alt = -1
	Hard reg 22 is preferable by r197 with profit 152
   Insn 99: point = 157, n_alt = 14
   Insn 98: point = 158, n_alt = 0
   Insn 97: point = 158, n_alt = -2
   Insn 96: point = 159, n_alt = -2
   Insn 95: point = 160, n_alt = -2
   Insn 94: point = 161, n_alt = -2
   Insn 93: point = 162, n_alt = 3
   Insn 86: point = 163, n_alt = -2
   Insn 421: point = 165, n_alt = -2
   Insn 463: point = 166, n_alt = -1
	Hard reg 23 is preferable by r198 with profit 152
   Insn 85: point = 168, n_alt = -2
   Insn 420: point = 170, n_alt = -2
   Insn 84: point = 171, n_alt = 0
   Insn 83: point = 171, n_alt = -2
  BB 8
   Insn 54: point = 173, n_alt = -1
   Insn 53: point = 173, n_alt = 0
  BB 5
   Insn 42: point = 175, n_alt = -1
   Insn 41: point = 175, n_alt = 0
  BB 4
   Insn 37: point = 176, n_alt = -1
  BB 3
   Insn 32: point = 177, n_alt = -1
   Insn 31: point = 177, n_alt = 0
   Insn 30: point = 177, n_alt = 4
   Insn 29: point = 178, n_alt = 3
  BB 2
   Insn 16: point = 180, n_alt = -1
   Insn 15: point = 180, n_alt = 0
   Insn 11: point = 181, n_alt = 2
   Insn 417: point = 182, n_alt = -2
   Insn 2: point = 183, n_alt = -2
   Insn 416: point = 185, n_alt = -2
 r82: [98..111] [30..35]
 r83: [171..178] [130..134] [30..121] [25..28]
 r84: [173..177] [133..134] [27..28]
 r85: [126..127]
 r86: [122..123]
 r87: [30..105]
 r88: [19..24] [4..17]
 r89: [19..19] [16..17]
 r90: [38..95]
 r92: [6..8]
 r94: [4..14]
 r99: [30..106]
 r101: [90..94] [44..51]
 r107: [93..94] [74..75] [42..47]
 r116: [136..146]
 r121: [63..71]
 r128: [156..157] [143..144]
 r130: [81..82] [68..69]
 r132: [38..96]
 r133: [66..94] [40..44]
 r134: [95..110] [54..56] [30..38]
 r136: [4..15]
 r139: [173..181] [133..134] [27..112] [0..21]
 r140: [176..183] [20..28]
 r142: [167..168] [149..150]
 r143: [158..163]
 r144: [159..162]
 r145: [160..161]
 r147: [135..139]
 r149: [117..120]
 r150: [116..119]
 r151: [115..118]
 r152: [52..53]
 r153: [49..50]
 r154: [45..48]
 r156: [88..89]
 r157: [85..87] [58..59]
 r160: [83..86]
 r161: [66..67]
 r162: [58..62]
 r166: [4..13]
 r167: [4..12]
 r169: [30..102]
 r170: [30..99]
 r172: [30..98]
 r173: [184..185]
 r174: [180..182]
 r175: [128..129]
 r176: [124..125]
 r177: [169..170]
 r178: [164..165]
 r179: [147..148]
 r180: [22..23]
 r181: [9..10]
 r182: [113..114]
 r183: [72..73]
 r184: [40..41]
 r185: [153..154]
 r186: [140..142]
 r187: [136..137]
 r188: [107..109]
 r189: [103..104]
 r190: [100..101]
 r191: [45..46]
 r192: [90..91]
 r193: [78..79]
 r194: [63..64]
 r195: [58..61]
 r196: [138..152]
 r197: [145..155]
 r198: [151..166]
 r199: [65..77]
 r200: [70..80]
 r201: [60..84]
 r202: [76..92]
Compressing live ranges: from 186 to 118 - 63%
Ranges after the compression:
 r82: [62..69] [13..14]
 r83: [112..113] [82..83] [11..73]
 r84: [112..113] [82..83] [11..12]
 r85: [78..79]
 r86: [74..75]
 r87: [13..67]
 r88: [0..10]
 r89: [4..6]
 r90: [15..60]
 r92: [0..1]
 r94: [0..3]
 r99: [13..67]
 r101: [56..59] [19..23]
 r107: [58..59] [42..43] [18..21]
 r116: [84..93]
 r121: [32..39]
 r128: [102..103] [90..91]
 r130: [48..49] [36..37]
 r132: [15..61]
 r133: [34..59] [16..19]
 r134: [60..69] [26..27] [13..15]
 r136: [0..3]
 r139: [112..115] [82..83] [11..69] [0..8]
 r140: [112..115] [7..12]
 r142: [108..109] [96..97]
 r143: [104..105]
 r144: [104..105]
 r145: [104..105]
 r147: [84..87]
 r149: [72..73]
 r150: [72..73]
 r151: [72..73]
 r152: [24..25]
 r153: [22..23]
 r154: [20..21]
 r156: [54..55]
 r157: [52..53] [28..29]
 r160: [50..53]
 r161: [34..35]
 r162: [28..31]
 r166: [0..3]
 r167: [0..3]
 r169: [13..65]
 r170: [13..63]
 r172: [13..62]
 r173: [116..117]
 r174: [114..115]
 r175: [80..81]
 r176: [76..77]
 r177: [110..111]
 r178: [106..107]
 r179: [94..95]
 r180: [9..10]
 r181: [2..3]
 r182: [70..71]
 r183: [40..41]
 r184: [16..17]
 r185: [100..101]
 r186: [88..89]
 r187: [84..85]
 r188: [68..69]
 r189: [66..67]
 r190: [64..65]
 r191: [20..21]
 r192: [56..57]
 r193: [46..47]
 r194: [32..33]
 r195: [28..31]
 r196: [86..99]
 r197: [92..101]
 r198: [98..107]
 r199: [34..45]
 r200: [38..47]
 r201: [30..51]
 r202: [44..57]

********** Assignment #1: **********

	 Assigning to 191 (cl=INDEX_REGS, orig=169, freq=2000, tfirst=191, tfreq=2000)...
	   Assign 1 to reload r191 (freq=2000)
	 Assigning to 192 (cl=INDEX_REGS, orig=99, freq=2000, tfirst=192, tfreq=2000)...
	   Assign 1 to reload r192 (freq=2000)
	 Assigning to 195 (cl=INDEX_REGS, orig=169, freq=2000, tfirst=195, tfreq=2000)...
	   Assign 2 to reload r195 (freq=2000)
	 Assigning to 188 (cl=GENERAL_REGS, orig=99, freq=228, tfirst=188, tfreq=228)...
	   Assign 3 to reload r188 (freq=228)
	 Assigning to 189 (cl=GENERAL_REGS, orig=169, freq=152, tfirst=189, tfreq=152)...
	   Assign 5 to reload r189 (freq=152)
	 Assigning to 190 (cl=GENERAL_REGS, orig=170, freq=152, tfirst=190, tfreq=152)...
	   Assign 5 to reload r190 (freq=152)
	 Assigning to 199 (cl=ALL_SSE_REGS, orig=131, freq=2000, tfirst=193, tfreq=2000)...
	 Assigning to 193 (cl=ALL_SSE_REGS, orig=131, freq=2000, tfirst=193, tfreq=2000)...
	   Assign 24 to reload r193 (freq=2000)
	Hard reg 24 is preferable by r199 with profit 1000
	Hard reg 24 is preferable by r194 with profit 500
	 Assigning to 194 (cl=SSE_REGS, orig=131, freq=2000, tfirst=193, tfreq=2000)...
	   Assign 24 to optional reload r194 (freq=2000)
	Hard reg 24 is preferable by r199 with profit 2000
	 Assigning to 186 (cl=SSE_REGS, orig=128, freq=228, tfirst=186, tfreq=228)...
	   Assign 22 to reload r186 (freq=228)
	 Assigning to 196 (cl=ALL_SSE_REGS, orig=129, freq=152, tfirst=185, tfreq=152)...
	 Assigning to 185 (cl=ALL_SSE_REGS, orig=129, freq=152, tfirst=185, tfreq=152)...
	   Assign 25 to reload r185 (freq=152)
	Hard reg 25 is preferable by r196 with profit 76
	Hard reg 25 is preferable by r187 with profit 38
	 Assigning to 187 (cl=SSE_REGS, orig=129, freq=152, tfirst=185, tfreq=152)...
	   Assign 25 to optional reload r187 (freq=152)
	Hard reg 25 is preferable by r196 with profit 152
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 2 (0.00%)
	     Keep split r197 (orig=r128)
	     Keep split r198 (orig=r142)
	     Keep split r200 (orig=r130)
	     Keep split r201 (orig=r157)
	     Keep split r202 (orig=r107)
Split 5 out of 5 (100.00%)
   Insn after restoring regs:
  450: r187:DF=r129:DF
      REG_DEAD r129:DF
   Insn after restoring regs:
  113: debug res$imag => r129:DF*r116:DF
   Insn after restoring regs:
  447: r129:DF=r185:DF
      REG_DEAD r185:DF
   Insn after restoring regs:
  458: r194:DF=r131:DF
      REG_DEAD r131:DF
   Insn after restoring regs:
  277: debug res$imag => r131:DF*r121:DF
   Insn after restoring regs:
  457: r131:DF=r193:DF
      REG_DEAD r193:DF
Remove optional reload reg 187
  Restoring original insn:
  128: xmm1:DF=r116:DF*r129:DF
      REG_DEAD r129:DF
      REG_DEAD r116:DF
  Deleting move 450
  450: r187:DF=r129:DF
      REG_DEAD r129:DF
deleting insn with uid = 450.
Remove optional reload reg 194
  Restoring original insn:
  289: r162:DF=r121:DF*r131:DF
      REG_DEAD r131:DF
      REG_DEAD r121:DF
      REG_EQUIV [r169:DI+r157:DI+0x4]
  Deleting move 458
  458: r194:DF=r131:DF
      REG_DEAD r131:DF
deleting insn with uid = 458.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 289:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=203 from oldreg=131, assigning class SSE_REGS to r203
      Making reload reg 203 for reg 131 optional
  289: r162:DF=r121:DF*r203:DF
      REG_DEAD r131:DF
      REG_DEAD r121:DF
      REG_EQUIV [r169:DI+r157:DI+0x4]
    Inserting insn reload before:
  472: r203:DF=r131:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 472:  (0) v  (1) m {*movdf_internal}
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 128:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=204 from oldreg=129, assigning class SSE_REGS to r204
      Making reload reg 204 for reg 129 optional
  128: xmm1:DF=r116:DF*r204:DF
      REG_DEAD r129:DF
      REG_DEAD r116:DF
    Inserting insn reload before:
  473: r204:DF=r129:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 473:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=619,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=15,overall=1,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 470:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 471:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 468:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 469:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=619,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=15,overall=1,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 466:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 467:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=619,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=15,overall=1,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 463:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 464:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=619,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=15,overall=1,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 461:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 462:  (0) v  (1) m {*movdf_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #3: **********

  BB 17
   Insn 178: point = 0, n_alt = 0
   Insn 177: point = 0, n_alt = 4
   Insn 176: point = 0, n_alt = 4
   Insn 175: point = 0, n_alt = 0
   Insn 174: point = 0, n_alt = 4
  BB 31
   Insn 377: point = 0, n_alt = -1
   Insn 376: point = 0, n_alt = -2
  BB 21
   Insn 441: point = 2, n_alt = -1
  BB 19
   Insn 438: point = 3, n_alt = -1
  BB 18
   Insn 194: point = 4, n_alt = -1
   Insn 193: point = 4, n_alt = 0
   Insn 191: point = 4, n_alt = 0
   Insn 188: point = 5, n_alt = 0
   Insn 186: point = 6, n_alt = 0
   Insn 185: point = 6, n_alt = -2
   Insn 184: point = 6, n_alt = -2
   Insn 183: point = 7, n_alt = -2
  BB 16
   Insn 171: point = 8, n_alt = -1
   Insn 170: point = 8, n_alt = 0
   Insn 167: point = 8, n_alt = -2
   Insn 424: point = 10, n_alt = -2
   Insn 166: point = 11, n_alt = 0
   Insn 165: point = 11, n_alt = -2
   Insn 164: point = 11, n_alt = 0
   Insn 163: point = 11, n_alt = -2
   Insn 406: point = 11, n_alt = -2
  BB 15
   Insn 161: point = 12, n_alt = 4
   Insn 398: point = 13, n_alt = 3
   Insn 5: point = 14, n_alt = 0
   Insn 157: point = 15, n_alt = 0
  BB 11
   Insn 435: point = 18, n_alt = -1
  BB 14
   Insn 155: point = 19, n_alt = -1
   Insn 154: point = 19, n_alt = 0
   Insn 146: point = 19, n_alt = 3
   Insn 144: point = 21, n_alt = 1
   Insn 141: point = 21, n_alt = -2
   Insn 423: point = 23, n_alt = -2
   Insn 140: point = 24, n_alt = 0
   Insn 139: point = 24, n_alt = -2
   Insn 136: point = 24, n_alt = 0
  BB 10
   Insn 61: point = 27, n_alt = -1
   Insn 60: point = 27, n_alt = 0
  BB 9
   Insn 432: point = 29, n_alt = -1
  BB 30
   Insn 347: point = 30, n_alt = -1
   Insn 346: point = 30, n_alt = 0
   Insn 342: point = 30, n_alt = 0
  BB 29
   Insn 339: point = 32, n_alt = -1
   Insn 338: point = 32, n_alt = 0
  BB 28
   Insn 331: point = 33, n_alt = -1
   Insn 330: point = 33, n_alt = 0
   Insn 327: point = 33, n_alt = 0
  BB 27
   Insn 322: point = 35, n_alt = 0
  BB 25
   Insn 444: point = 37, n_alt = -1
  BB 26
   Insn 314: point = 38, n_alt = -1
   Insn 313: point = 38, n_alt = 0
   Insn 312: point = 38, n_alt = 0
   Insn 309: point = 39, n_alt = 0
   Insn 307: point = 40, n_alt = 15
   Insn 427: point = 41, n_alt = -2
   Insn 305: point = 42, n_alt = 0
   Insn 304: point = 42, n_alt = -2
  BB 23
   Insn 248: point = 44, n_alt = -1
   Insn 247: point = 44, n_alt = 0
   Insn 246: point = 44, n_alt = 0
   Insn 455: point = 46, n_alt = 3
   Insn 243: point = 47, n_alt = 14
   Insn 241: point = 48, n_alt = 0
   Insn 240: point = 50, n_alt = 3
   Insn 235: point = 51, n_alt = 0
   Insn 234: point = 53, n_alt = 2
  BB 24
   Insn 297: point = 56, n_alt = -1
   Insn 296: point = 56, n_alt = 0
   Insn 295: point = 56, n_alt = 0
   Insn 292: point = 57, n_alt = 0
   Insn 290: point = 58, n_alt = 15
   Insn 469: point = 59, n_alt = 3
	Hard reg 0 is preferable by r201 with profit 1000
   Insn 459: point = 61, n_alt = 3
   Insn 289: point = 62, n_alt = 1
   Insn 472: point = 64, n_alt = 14
   Insn 287: point = 66, n_alt = 15
   Insn 286: point = 67, n_alt = 1
   Insn 467: point = 69, n_alt = 14
	Hard reg 21 is preferable by r200 with profit 1000
   Insn 272: point = 71, n_alt = -2
   Insn 426: point = 73, n_alt = -2
   Insn 271: point = 74, n_alt = 0
   Insn 270: point = 74, n_alt = -2
   Insn 471: point = 75, n_alt = 14
	Hard reg 22 is preferable by r202 with profit 1000
   Insn 457: point = 77, n_alt = 15
   Insn 264: point = 79, n_alt = 14
   Insn 466: point = 80, n_alt = 15
	Hard reg 21 is preferable by r200 with profit 2000
   Insn 263: point = 82, n_alt = 14
   Insn 262: point = 83, n_alt = 0
   Insn 261: point = 83, n_alt = -2
   Insn 412: point = 84, n_alt = 3
   Insn 259: point = 84, n_alt = 3
   Insn 468: point = 84, n_alt = 5
	Hard reg 0 is preferable by r201 with profit 2000
   Insn 258: point = 86, n_alt = 14
   Insn 253: point = 87, n_alt = 0
   Insn 252: point = 89, n_alt = 0
   Insn 456: point = 91, n_alt = 0
   Insn 470: point = 92, n_alt = 15
	Hard reg 22 is preferable by r202 with profit 2000
  BB 22
   Insn 6: point = 95, n_alt = 0
   Insn 229: point = 96, n_alt = 3
  BB 20
   Insn 224: point = 98, n_alt = -1
   Insn 223: point = 98, n_alt = 0
   Insn 257: point = 98, n_alt = 5
   Insn 454: point = 99, n_alt = 5
   Insn 256: point = 101, n_alt = 3
   Insn 453: point = 102, n_alt = 5
   Insn 230: point = 104, n_alt = 3
   Insn 7: point = 105, n_alt = 0
   Insn 452: point = 106, n_alt = 1
   Insn 216: point = 108, n_alt = 2
   Insn 451: point = 109, n_alt = -2
	Hard reg 1 is preferable by r188 with profit 76
   Insn 215: point = 110, n_alt = 0
   Insn 214: point = 111, n_alt = 0
   Insn 211: point = 112, n_alt = -2
   Insn 425: point = 114, n_alt = -2
   Insn 210: point = 115, n_alt = 0
   Insn 209: point = 115, n_alt = -2
   Insn 208: point = 116, n_alt = -2
   Insn 207: point = 117, n_alt = -2
   Insn 206: point = 118, n_alt = 0
   Insn 205: point = 118, n_alt = 0
   Insn 204: point = 119, n_alt = 0
   Insn 203: point = 120, n_alt = 0
  BB 12
   Insn 77: point = 122, n_alt = 0
   Insn 76: point = 122, n_alt = -2
   Insn 75: point = 123, n_alt = -2
   Insn 419: point = 125, n_alt = -2
   Insn 74: point = 126, n_alt = 0
   Insn 73: point = 126, n_alt = -2
   Insn 70: point = 127, n_alt = -2
   Insn 418: point = 129, n_alt = -2
   Insn 69: point = 130, n_alt = 0
   Insn 68: point = 130, n_alt = -2
  BB 7
   Insn 429: point = 132, n_alt = -1
  BB 6
   Insn 47: point = 133, n_alt = -1
   Insn 46: point = 133, n_alt = 0
  BB 13
   Insn 130: point = 135, n_alt = 0
   Insn 129: point = 135, n_alt = -2
   Insn 128: point = 136, n_alt = 1
   Insn 473: point = 137, n_alt = 14
   Insn 449: point = 139, n_alt = -2
	Hard reg 20 is preferable by r186 with profit 76
   Insn 127: point = 141, n_alt = 1
   Insn 448: point = 142, n_alt = -2
	Hard reg 20 is preferable by r186 with profit 76
	Hard reg 22 is preferable by r186 with profit 76
   Insn 462: point = 144, n_alt = 14
	Hard reg 22 is preferable by r197 with profit 76
   Insn 108: point = 146, n_alt = -2
   Insn 422: point = 148, n_alt = -2
   Insn 107: point = 149, n_alt = 0
   Insn 106: point = 149, n_alt = -2
   Insn 464: point = 150, n_alt = 14
	Hard reg 23 is preferable by r198 with profit 76
   Insn 447: point = 152, n_alt = 15
   Insn 100: point = 154, n_alt = 14
   Insn 461: point = 155, n_alt = 15
	Hard reg 22 is preferable by r197 with profit 152
   Insn 99: point = 157, n_alt = 14
   Insn 98: point = 158, n_alt = 0
   Insn 97: point = 158, n_alt = -2
   Insn 96: point = 159, n_alt = -2
   Insn 95: point = 160, n_alt = -2
   Insn 94: point = 161, n_alt = -2
   Insn 93: point = 162, n_alt = 3
   Insn 86: point = 163, n_alt = -2
   Insn 421: point = 165, n_alt = -2
   Insn 463: point = 166, n_alt = 15
	Hard reg 23 is preferable by r198 with profit 152
   Insn 85: point = 168, n_alt = -2
   Insn 420: point = 170, n_alt = -2
   Insn 84: point = 171, n_alt = 0
   Insn 83: point = 171, n_alt = -2
  BB 8
   Insn 54: point = 173, n_alt = -1
   Insn 53: point = 173, n_alt = 0
  BB 5
   Insn 42: point = 175, n_alt = -1
   Insn 41: point = 175, n_alt = 0
  BB 4
   Insn 37: point = 176, n_alt = -1
  BB 3
   Insn 32: point = 177, n_alt = -1
   Insn 31: point = 177, n_alt = 0
   Insn 30: point = 177, n_alt = 4
   Insn 29: point = 178, n_alt = 3
  BB 2
   Insn 16: point = 180, n_alt = -1
   Insn 15: point = 180, n_alt = 0
   Insn 11: point = 181, n_alt = 2
   Insn 417: point = 182, n_alt = -2
   Insn 2: point = 183, n_alt = -2
   Insn 416: point = 185, n_alt = -2
 r82: [98..111] [30..35]
 r83: [171..178] [130..134] [30..121] [25..28]
 r84: [173..177] [133..134] [27..28]
 r85: [126..127]
 r86: [122..123]
 r87: [30..105]
 r88: [19..24] [4..17]
 r89: [19..19] [16..17]
 r90: [38..95]
 r92: [6..8]
 r94: [4..14]
 r99: [30..106]
 r101: [90..94] [44..51]
 r107: [93..94] [74..75] [42..47]
 r116: [136..146]
 r121: [63..71]
 r128: [156..157] [143..144]
 r129: [138..152]
 r130: [81..82] [68..69]
 r131: [65..77]
 r132: [38..96]
 r133: [66..94] [40..44]
 r134: [95..110] [54..56] [30..38]
 r136: [4..15]
 r139: [173..181] [133..134] [27..112] [0..21]
 r140: [176..183] [20..28]
 r142: [167..168] [149..150]
 r143: [158..163]
 r144: [159..162]
 r145: [160..161]
 r147: [135..139]
 r149: [117..120]
 r150: [116..119]
 r151: [115..118]
 r152: [52..53]
 r153: [49..50]
 r154: [45..48]
 r156: [88..89]
 r157: [85..87] [58..59]
 r160: [83..86]
 r161: [66..67]
 r162: [58..62]
 r166: [4..13]
 r167: [4..12]
 r169: [30..102]
 r170: [30..99]
 r172: [30..98]
 r173: [184..185]
 r174: [180..182]
 r175: [128..129]
 r176: [124..125]
 r177: [169..170]
 r178: [164..165]
 r179: [147..148]
 r180: [22..23]
 r181: [9..10]
 r182: [113..114]
 r183: [72..73]
 r184: [40..41]
 r185: [153..154]
 r186: [140..142]
 r188: [107..109]
 r189: [103..104]
 r190: [100..101]
 r191: [45..46]
 r192: [90..91]
 r193: [78..79]
 r195: [58..61]
 r197: [145..155]
 r198: [151..166]
 r200: [70..80]
 r201: [60..84]
 r202: [76..92]
 r203: [63..64]
 r204: [136..137]
Compressing live ranges: from 186 to 118 - 63%
Ranges after the compression:
 r82: [62..69] [13..14]
 r83: [112..113] [82..83] [11..73]
 r84: [112..113] [82..83] [11..12]
 r85: [78..79]
 r86: [74..75]
 r87: [13..67]
 r88: [0..10]
 r89: [4..6]
 r90: [15..60]
 r92: [0..1]
 r94: [0..3]
 r99: [13..67]
 r101: [56..59] [19..23]
 r107: [58..59] [42..43] [18..21]
 r116: [84..93]
 r121: [32..39]
 r128: [102..103] [90..91]
 r129: [86..99]
 r130: [48..49] [36..37]
 r131: [34..45]
 r132: [15..61]
 r133: [34..59] [16..19]
 r134: [60..69] [26..27] [13..15]
 r136: [0..3]
 r139: [112..115] [82..83] [11..69] [0..8]
 r140: [112..115] [7..12]
 r142: [108..109] [96..97]
 r143: [104..105]
 r144: [104..105]
 r145: [104..105]
 r147: [84..87]
 r149: [72..73]
 r150: [72..73]
 r151: [72..73]
 r152: [24..25]
 r153: [22..23]
 r154: [20..21]
 r156: [54..55]
 r157: [52..53] [28..29]
 r160: [50..53]
 r161: [34..35]
 r162: [28..31]
 r166: [0..3]
 r167: [0..3]
 r169: [13..65]
 r170: [13..63]
 r172: [13..62]
 r173: [116..117]
 r174: [114..115]
 r175: [80..81]
 r176: [76..77]
 r177: [110..111]
 r178: [106..107]
 r179: [94..95]
 r180: [9..10]
 r181: [2..3]
 r182: [70..71]
 r183: [40..41]
 r184: [16..17]
 r185: [100..101]
 r186: [88..89]
 r188: [68..69]
 r189: [66..67]
 r190: [64..65]
 r191: [20..21]
 r192: [56..57]
 r193: [46..47]
 r195: [28..31]
 r197: [92..101]
 r198: [98..107]
 r200: [38..47]
 r201: [30..51]
 r202: [44..57]
 r203: [32..33]
 r204: [84..85]

********** Inheritance #2: **********

EBB 2
EBB 3 4 5 6 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=205 from oldreg=129, assigning class ALL_SSE_REGS to inheritance r205
    Original reg change 129->205 (bb13):
  447: r205:DF=r185:DF
      REG_DEAD r185:DF
    Add original<-inheritance after:
  474: r129:DF=r205:DF

    Inheritance reuse change 129->205 (bb13):
  113: debug res$imag => r205:DF*r116:DF
    Inheritance reuse change 129->205 (bb13):
  473: r204:DF=r205:DF
      REG_DEAD r205:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   474: r129:DF=r205:DF
deleting insn with uid = 474.
EBB 14 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=206 from oldreg=131, assigning class ALL_SSE_REGS to inheritance r206
    Original reg change 131->206 (bb24):
  457: r206:DF=r193:DF
      REG_DEAD r193:DF
    Add original<-inheritance after:
  475: r131:DF=r206:DF

    Inheritance reuse change 131->206 (bb24):
  277: debug res$imag => r206:DF*r121:DF
    Inheritance reuse change 131->206 (bb24):
  472: r203:DF=r206:DF
      REG_DEAD r206:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   475: r131:DF=r206:DF
deleting insn with uid = 475.
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31

********** Pseudo live ranges #4: **********

  BB 17
   Insn 178: point = 0, n_alt = 0
   Insn 177: point = 0, n_alt = 4
   Insn 176: point = 0, n_alt = 4
   Insn 175: point = 0, n_alt = 0
   Insn 174: point = 0, n_alt = 4
  BB 31
   Insn 377: point = 0, n_alt = -1
   Insn 376: point = 0, n_alt = -2
  BB 21
   Insn 441: point = 2, n_alt = -1
  BB 19
   Insn 438: point = 3, n_alt = -1
  BB 18
   Insn 194: point = 4, n_alt = -1
   Insn 193: point = 4, n_alt = 0
   Insn 191: point = 4, n_alt = 0
   Insn 188: point = 5, n_alt = 0
   Insn 186: point = 6, n_alt = 0
   Insn 185: point = 6, n_alt = -2
   Insn 184: point = 6, n_alt = -2
   Insn 183: point = 7, n_alt = -2
  BB 16
   Insn 171: point = 8, n_alt = -1
   Insn 170: point = 8, n_alt = 0
   Insn 167: point = 8, n_alt = -2
   Insn 424: point = 10, n_alt = -2
   Insn 166: point = 11, n_alt = 0
   Insn 165: point = 11, n_alt = -2
   Insn 164: point = 11, n_alt = 0
   Insn 163: point = 11, n_alt = -2
   Insn 406: point = 11, n_alt = -2
  BB 15
   Insn 161: point = 12, n_alt = 4
   Insn 398: point = 13, n_alt = 3
   Insn 5: point = 14, n_alt = 0
   Insn 157: point = 15, n_alt = 0
  BB 11
   Insn 435: point = 18, n_alt = -1
  BB 14
   Insn 155: point = 19, n_alt = -1
   Insn 154: point = 19, n_alt = 0
   Insn 146: point = 19, n_alt = 3
   Insn 144: point = 21, n_alt = 1
   Insn 141: point = 21, n_alt = -2
   Insn 423: point = 23, n_alt = -2
   Insn 140: point = 24, n_alt = 0
   Insn 139: point = 24, n_alt = -2
   Insn 136: point = 24, n_alt = 0
  BB 10
   Insn 61: point = 27, n_alt = -1
   Insn 60: point = 27, n_alt = 0
  BB 9
   Insn 432: point = 29, n_alt = -1
  BB 30
   Insn 347: point = 30, n_alt = -1
   Insn 346: point = 30, n_alt = 0
   Insn 342: point = 30, n_alt = 0
  BB 29
   Insn 339: point = 32, n_alt = -1
   Insn 338: point = 32, n_alt = 0
  BB 28
   Insn 331: point = 33, n_alt = -1
   Insn 330: point = 33, n_alt = 0
   Insn 327: point = 33, n_alt = 0
  BB 27
   Insn 322: point = 35, n_alt = 0
  BB 25
   Insn 444: point = 37, n_alt = -1
  BB 26
   Insn 314: point = 38, n_alt = -1
   Insn 313: point = 38, n_alt = 0
   Insn 312: point = 38, n_alt = 0
   Insn 309: point = 39, n_alt = 0
   Insn 307: point = 40, n_alt = 15
   Insn 427: point = 41, n_alt = -2
   Insn 305: point = 42, n_alt = 0
   Insn 304: point = 42, n_alt = -2
  BB 23
   Insn 248: point = 44, n_alt = -1
   Insn 247: point = 44, n_alt = 0
   Insn 246: point = 44, n_alt = 0
   Insn 455: point = 46, n_alt = 3
   Insn 243: point = 47, n_alt = 14
   Insn 241: point = 48, n_alt = 0
   Insn 240: point = 50, n_alt = 3
   Insn 235: point = 51, n_alt = 0
   Insn 234: point = 53, n_alt = 2
  BB 24
   Insn 297: point = 56, n_alt = -1
   Insn 296: point = 56, n_alt = 0
   Insn 295: point = 56, n_alt = 0
   Insn 292: point = 57, n_alt = 0
   Insn 290: point = 58, n_alt = 15
   Insn 469: point = 59, n_alt = 3
	Hard reg 0 is preferable by r201 with profit 1000
   Insn 459: point = 61, n_alt = 3
   Insn 289: point = 62, n_alt = 1
   Insn 472: point = 64, n_alt = 14
	   Creating copy r203<-r206@1000
   Insn 287: point = 66, n_alt = 15
   Insn 286: point = 67, n_alt = 1
   Insn 467: point = 69, n_alt = 14
	Hard reg 21 is preferable by r200 with profit 1000
   Insn 272: point = 71, n_alt = -2
   Insn 426: point = 73, n_alt = -2
   Insn 271: point = 74, n_alt = 0
   Insn 270: point = 74, n_alt = -2
   Insn 471: point = 75, n_alt = 14
	Hard reg 22 is preferable by r202 with profit 1000
   Insn 457: point = 77, n_alt = 15
	   Creating copy r193->r206@1000
   Insn 264: point = 79, n_alt = 14
   Insn 466: point = 80, n_alt = 15
	Hard reg 21 is preferable by r200 with profit 2000
   Insn 263: point = 82, n_alt = 14
   Insn 262: point = 83, n_alt = 0
   Insn 261: point = 83, n_alt = -2
   Insn 412: point = 84, n_alt = 3
   Insn 259: point = 84, n_alt = 3
   Insn 468: point = 84, n_alt = 5
	Hard reg 0 is preferable by r201 with profit 2000
   Insn 258: point = 86, n_alt = 14
   Insn 253: point = 87, n_alt = 0
   Insn 252: point = 89, n_alt = 0
   Insn 456: point = 91, n_alt = 0
   Insn 470: point = 92, n_alt = 15
	Hard reg 22 is preferable by r202 with profit 2000
  BB 22
   Insn 6: point = 95, n_alt = 0
   Insn 229: point = 96, n_alt = 3
  BB 20
   Insn 224: point = 98, n_alt = -1
   Insn 223: point = 98, n_alt = 0
   Insn 257: point = 98, n_alt = 5
   Insn 454: point = 99, n_alt = 5
   Insn 256: point = 101, n_alt = 3
   Insn 453: point = 102, n_alt = 5
   Insn 230: point = 104, n_alt = 3
   Insn 7: point = 105, n_alt = 0
   Insn 452: point = 106, n_alt = 1
   Insn 216: point = 108, n_alt = 2
   Insn 451: point = 109, n_alt = -2
	Hard reg 1 is preferable by r188 with profit 76
   Insn 215: point = 110, n_alt = 0
   Insn 214: point = 111, n_alt = 0
   Insn 211: point = 112, n_alt = -2
   Insn 425: point = 114, n_alt = -2
   Insn 210: point = 115, n_alt = 0
   Insn 209: point = 115, n_alt = -2
   Insn 208: point = 116, n_alt = -2
   Insn 207: point = 117, n_alt = -2
   Insn 206: point = 118, n_alt = 0
   Insn 205: point = 118, n_alt = 0
   Insn 204: point = 119, n_alt = 0
   Insn 203: point = 120, n_alt = 0
  BB 12
   Insn 77: point = 122, n_alt = 0
   Insn 76: point = 122, n_alt = -2
   Insn 75: point = 123, n_alt = -2
   Insn 419: point = 125, n_alt = -2
   Insn 74: point = 126, n_alt = 0
   Insn 73: point = 126, n_alt = -2
   Insn 70: point = 127, n_alt = -2
   Insn 418: point = 129, n_alt = -2
   Insn 69: point = 130, n_alt = 0
   Insn 68: point = 130, n_alt = -2
  BB 7
   Insn 429: point = 132, n_alt = -1
  BB 6
   Insn 47: point = 133, n_alt = -1
   Insn 46: point = 133, n_alt = 0
  BB 13
   Insn 130: point = 135, n_alt = 0
   Insn 129: point = 135, n_alt = -2
   Insn 128: point = 136, n_alt = 1
   Insn 473: point = 137, n_alt = 14
	   Creating copy r204<-r205@76
   Insn 449: point = 139, n_alt = -2
	Hard reg 20 is preferable by r186 with profit 76
   Insn 127: point = 141, n_alt = 1
   Insn 448: point = 142, n_alt = -2
	Hard reg 20 is preferable by r186 with profit 76
	Hard reg 22 is preferable by r186 with profit 76
   Insn 462: point = 144, n_alt = 14
	Hard reg 22 is preferable by r197 with profit 76
   Insn 108: point = 146, n_alt = -2
   Insn 422: point = 148, n_alt = -2
   Insn 107: point = 149, n_alt = 0
   Insn 106: point = 149, n_alt = -2
   Insn 464: point = 150, n_alt = 14
	Hard reg 23 is preferable by r198 with profit 76
   Insn 447: point = 152, n_alt = 15
	   Creating copy r185->r205@76
   Insn 100: point = 154, n_alt = 14
   Insn 461: point = 155, n_alt = 15
	Hard reg 22 is preferable by r197 with profit 152
   Insn 99: point = 157, n_alt = 14
   Insn 98: point = 158, n_alt = 0
   Insn 97: point = 158, n_alt = -2
   Insn 96: point = 159, n_alt = -2
   Insn 95: point = 160, n_alt = -2
   Insn 94: point = 161, n_alt = -2
   Insn 93: point = 162, n_alt = 3
   Insn 86: point = 163, n_alt = -2
   Insn 421: point = 165, n_alt = -2
   Insn 463: point = 166, n_alt = 15
	Hard reg 23 is preferable by r198 with profit 152
   Insn 85: point = 168, n_alt = -2
   Insn 420: point = 170, n_alt = -2
   Insn 84: point = 171, n_alt = 0
   Insn 83: point = 171, n_alt = -2
  BB 8
   Insn 54: point = 173, n_alt = -1
   Insn 53: point = 173, n_alt = 0
  BB 5
   Insn 42: point = 175, n_alt = -1
   Insn 41: point = 175, n_alt = 0
  BB 4
   Insn 37: point = 176, n_alt = -1
  BB 3
   Insn 32: point = 177, n_alt = -1
   Insn 31: point = 177, n_alt = 0
   Insn 30: point = 177, n_alt = 4
   Insn 29: point = 178, n_alt = 3
  BB 2
   Insn 16: point = 180, n_alt = -1
   Insn 15: point = 180, n_alt = 0
   Insn 11: point = 181, n_alt = 2
   Insn 417: point = 182, n_alt = -2
   Insn 2: point = 183, n_alt = -2
   Insn 416: point = 185, n_alt = -2
 r82: [98..111] [30..35]
 r83: [171..178] [130..134] [30..121] [25..28]
 r84: [173..177] [133..134] [27..28]
 r85: [126..127]
 r86: [122..123]
 r87: [30..105]
 r88: [19..24] [4..17]
 r89: [19..19] [16..17]
 r90: [38..95]
 r92: [6..8]
 r94: [4..14]
 r99: [30..106]
 r101: [90..94] [44..51]
 r107: [93..94] [74..75] [42..47]
 r116: [136..146]
 r121: [63..71]
 r128: [156..157] [143..144]
 r130: [81..82] [68..69]
 r132: [38..96]
 r133: [66..94] [40..44]
 r134: [95..110] [54..56] [30..38]
 r136: [4..15]
 r139: [173..181] [133..134] [27..112] [0..21]
 r140: [176..183] [20..28]
 r142: [167..168] [149..150]
 r143: [158..163]
 r144: [159..162]
 r145: [160..161]
 r147: [135..139]
 r149: [117..120]
 r150: [116..119]
 r151: [115..118]
 r152: [52..53]
 r153: [49..50]
 r154: [45..48]
 r156: [88..89]
 r157: [85..87] [58..59]
 r160: [83..86]
 r161: [66..67]
 r162: [58..62]
 r166: [4..13]
 r167: [4..12]
 r169: [30..102]
 r170: [30..99]
 r172: [30..98]
 r173: [184..185]
 r174: [180..182]
 r175: [128..129]
 r176: [124..125]
 r177: [169..170]
 r178: [164..165]
 r179: [147..148]
 r180: [22..23]
 r181: [9..10]
 r182: [113..114]
 r183: [72..73]
 r184: [40..41]
 r185: [153..154]
 r186: [140..142]
 r188: [107..109]
 r189: [103..104]
 r190: [100..101]
 r191: [45..46]
 r192: [90..91]
 r193: [78..79]
 r195: [58..61]
 r197: [145..155]
 r198: [151..166]
 r200: [70..80]
 r201: [60..84]
 r202: [76..92]
 r203: [63..64]
 r204: [136..137]
 r205: [138..152]
 r206: [65..77]
Compressing live ranges: from 186 to 118 - 63%
Ranges after the compression:
 r82: [62..69] [13..14]
 r83: [112..113] [82..83] [11..73]
 r84: [112..113] [82..83] [11..12]
 r85: [78..79]
 r86: [74..75]
 r87: [13..67]
 r88: [0..10]
 r89: [4..6]
 r90: [15..60]
 r92: [0..1]
 r94: [0..3]
 r99: [13..67]
 r101: [56..59] [19..23]
 r107: [58..59] [42..43] [18..21]
 r116: [84..93]
 r121: [32..39]
 r128: [102..103] [90..91]
 r130: [48..49] [36..37]
 r132: [15..61]
 r133: [34..59] [16..19]
 r134: [60..69] [26..27] [13..15]
 r136: [0..3]
 r139: [112..115] [82..83] [11..69] [0..8]
 r140: [112..115] [7..12]
 r142: [108..109] [96..97]
 r143: [104..105]
 r144: [104..105]
 r145: [104..105]
 r147: [84..87]
 r149: [72..73]
 r150: [72..73]
 r151: [72..73]
 r152: [24..25]
 r153: [22..23]
 r154: [20..21]
 r156: [54..55]
 r157: [52..53] [28..29]
 r160: [50..53]
 r161: [34..35]
 r162: [28..31]
 r166: [0..3]
 r167: [0..3]
 r169: [13..65]
 r170: [13..63]
 r172: [13..62]
 r173: [116..117]
 r174: [114..115]
 r175: [80..81]
 r176: [76..77]
 r177: [110..111]
 r178: [106..107]
 r179: [94..95]
 r180: [9..10]
 r181: [2..3]
 r182: [70..71]
 r183: [40..41]
 r184: [16..17]
 r185: [100..101]
 r186: [88..89]
 r188: [68..69]
 r189: [66..67]
 r190: [64..65]
 r191: [20..21]
 r192: [56..57]
 r193: [46..47]
 r195: [28..31]
 r197: [92..101]
 r198: [98..107]
 r200: [38..47]
 r201: [30..51]
 r202: [44..57]
 r203: [32..33]
 r204: [84..85]
 r205: [86..99]
 r206: [34..45]

********** Assignment #2: **********

	 Assigning to 206 (cl=ALL_SSE_REGS, orig=131, freq=2000, tfirst=203, tfreq=2000)...
	 Assigning to 203 (cl=SSE_REGS, orig=131, freq=2000, tfirst=203, tfreq=2000)...
	   Assign 26 to optional reload r203 (freq=2000)
	Hard reg 26 is preferable by r206 with profit 1000
	 Assigning to 205 (cl=ALL_SSE_REGS, orig=129, freq=152, tfirst=204, tfreq=152)...
	 Assigning to 204 (cl=SSE_REGS, orig=129, freq=152, tfirst=204, tfreq=152)...
	   Assign 27 to optional reload r204 (freq=152)
	Hard reg 27 is preferable by r205 with profit 76
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 2 (0.00%)
   Insn after restoring regs:
  473: r204:DF=r129:DF
      REG_DEAD r129:DF
   Insn after restoring regs:
  113: debug res$imag => r129:DF*r116:DF
   Insn after restoring regs:
  447: r129:DF=r185:DF
      REG_DEAD r185:DF
   Insn after restoring regs:
  472: r203:DF=r131:DF
      REG_DEAD r131:DF
   Insn after restoring regs:
  277: debug res$imag => r131:DF*r121:DF
   Insn after restoring regs:
  457: r131:DF=r193:DF
      REG_DEAD r193:DF
Keep optional reload reg 187
Keep optional reload reg 194
Remove optional reload reg 203
  Restoring original insn:
  289: r162:DF=r121:DF*r131:DF
      REG_DEAD r131:DF
      REG_DEAD r121:DF
      REG_EQUIV [r169:DI+r157:DI+0x4]
  Deleting move 472
  472: r203:DF=r131:DF
      REG_DEAD r131:DF
deleting insn with uid = 472.
Remove optional reload reg 204
  Restoring original insn:
  128: xmm1:DF=r116:DF*r129:DF
      REG_DEAD r129:DF
      REG_DEAD r116:DF
  Deleting move 473
  473: r204:DF=r129:DF
      REG_DEAD r129:DF
deleting insn with uid = 473.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 289:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 128:  (0) x  (1) 0  (2) xm {*fop_df_comm}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #5: **********

  BB 17
   Insn 178: point = 0, n_alt = 0
   Insn 177: point = 0, n_alt = 4
   Insn 176: point = 0, n_alt = 4
   Insn 175: point = 0, n_alt = 0
   Insn 174: point = 0, n_alt = 4
  BB 31
   Insn 377: point = 0, n_alt = -1
   Insn 376: point = 0, n_alt = -2
  BB 21
   Insn 441: point = 2, n_alt = -1
  BB 19
   Insn 438: point = 3, n_alt = -1
  BB 18
   Insn 194: point = 4, n_alt = -1
   Insn 193: point = 4, n_alt = 0
   Insn 191: point = 4, n_alt = 0
   Insn 188: point = 5, n_alt = 0
   Insn 186: point = 6, n_alt = 0
   Insn 185: point = 6, n_alt = -2
   Insn 184: point = 6, n_alt = -2
   Insn 183: point = 7, n_alt = -2
  BB 16
   Insn 171: point = 8, n_alt = -1
   Insn 170: point = 8, n_alt = 0
   Insn 167: point = 8, n_alt = -2
   Insn 424: point = 10, n_alt = -2
   Insn 166: point = 11, n_alt = 0
   Insn 165: point = 11, n_alt = -2
   Insn 164: point = 11, n_alt = 0
   Insn 163: point = 11, n_alt = -2
   Insn 406: point = 11, n_alt = -2
  BB 15
   Insn 161: point = 12, n_alt = 4
   Insn 398: point = 13, n_alt = 3
   Insn 5: point = 14, n_alt = 0
   Insn 157: point = 15, n_alt = 0
  BB 11
   Insn 435: point = 18, n_alt = -1
  BB 14
   Insn 155: point = 19, n_alt = -1
   Insn 154: point = 19, n_alt = 0
   Insn 146: point = 19, n_alt = 3
   Insn 144: point = 21, n_alt = 1
   Insn 141: point = 21, n_alt = -2
   Insn 423: point = 23, n_alt = -2
   Insn 140: point = 24, n_alt = 0
   Insn 139: point = 24, n_alt = -2
   Insn 136: point = 24, n_alt = 0
  BB 10
   Insn 61: point = 27, n_alt = -1
   Insn 60: point = 27, n_alt = 0
  BB 9
   Insn 432: point = 29, n_alt = -1
  BB 30
   Insn 347: point = 30, n_alt = -1
   Insn 346: point = 30, n_alt = 0
   Insn 342: point = 30, n_alt = 0
  BB 29
   Insn 339: point = 32, n_alt = -1
   Insn 338: point = 32, n_alt = 0
  BB 28
   Insn 331: point = 33, n_alt = -1
   Insn 330: point = 33, n_alt = 0
   Insn 327: point = 33, n_alt = 0
  BB 27
   Insn 322: point = 35, n_alt = 0
  BB 25
   Insn 444: point = 37, n_alt = -1
  BB 26
   Insn 314: point = 38, n_alt = -1
   Insn 313: point = 38, n_alt = 0
   Insn 312: point = 38, n_alt = 0
   Insn 309: point = 39, n_alt = 0
   Insn 307: point = 40, n_alt = 15
   Insn 427: point = 41, n_alt = -2
   Insn 305: point = 42, n_alt = 0
   Insn 304: point = 42, n_alt = -2
  BB 23
   Insn 248: point = 44, n_alt = -1
   Insn 247: point = 44, n_alt = 0
   Insn 246: point = 44, n_alt = 0
   Insn 455: point = 46, n_alt = 3
   Insn 243: point = 47, n_alt = 14
   Insn 241: point = 48, n_alt = 0
   Insn 240: point = 50, n_alt = 3
   Insn 235: point = 51, n_alt = 0
   Insn 234: point = 53, n_alt = 2
  BB 24
   Insn 297: point = 56, n_alt = -1
   Insn 296: point = 56, n_alt = 0
   Insn 295: point = 56, n_alt = 0
   Insn 292: point = 57, n_alt = 0
   Insn 290: point = 58, n_alt = 15
   Insn 469: point = 59, n_alt = 3
   Insn 459: point = 61, n_alt = 3
   Insn 289: point = 62, n_alt = 1
   Insn 287: point = 64, n_alt = 15
   Insn 286: point = 65, n_alt = 1
   Insn 467: point = 67, n_alt = 14
   Insn 272: point = 69, n_alt = -2
   Insn 426: point = 71, n_alt = -2
   Insn 271: point = 72, n_alt = 0
   Insn 270: point = 72, n_alt = -2
   Insn 471: point = 73, n_alt = 14
   Insn 457: point = 75, n_alt = 15
   Insn 264: point = 77, n_alt = 14
   Insn 466: point = 78, n_alt = 15
   Insn 263: point = 80, n_alt = 14
   Insn 262: point = 81, n_alt = 0
   Insn 261: point = 81, n_alt = -2
   Insn 412: point = 82, n_alt = 3
   Insn 259: point = 82, n_alt = 3
   Insn 468: point = 82, n_alt = 5
   Insn 258: point = 84, n_alt = 14
   Insn 253: point = 85, n_alt = 0
   Insn 252: point = 87, n_alt = 0
   Insn 456: point = 89, n_alt = 0
   Insn 470: point = 90, n_alt = 15
  BB 22
   Insn 6: point = 93, n_alt = 0
   Insn 229: point = 94, n_alt = 3
  BB 20
   Insn 224: point = 96, n_alt = -1
   Insn 223: point = 96, n_alt = 0
   Insn 257: point = 96, n_alt = 5
   Insn 454: point = 97, n_alt = 5
   Insn 256: point = 99, n_alt = 3
   Insn 453: point = 100, n_alt = 5
   Insn 230: point = 102, n_alt = 3
   Insn 7: point = 103, n_alt = 0
   Insn 452: point = 104, n_alt = 1
   Insn 216: point = 106, n_alt = 2
   Insn 451: point = 107, n_alt = -2
   Insn 215: point = 108, n_alt = 0
   Insn 214: point = 109, n_alt = 0
   Insn 211: point = 110, n_alt = -2
   Insn 425: point = 112, n_alt = -2
   Insn 210: point = 113, n_alt = 0
   Insn 209: point = 113, n_alt = -2
   Insn 208: point = 114, n_alt = -2
   Insn 207: point = 115, n_alt = -2
   Insn 206: point = 116, n_alt = 0
   Insn 205: point = 116, n_alt = 0
   Insn 204: point = 117, n_alt = 0
   Insn 203: point = 118, n_alt = 0
  BB 12
   Insn 77: point = 120, n_alt = 0
   Insn 76: point = 120, n_alt = -2
   Insn 75: point = 121, n_alt = -2
   Insn 419: point = 123, n_alt = -2
   Insn 74: point = 124, n_alt = 0
   Insn 73: point = 124, n_alt = -2
   Insn 70: point = 125, n_alt = -2
   Insn 418: point = 127, n_alt = -2
   Insn 69: point = 128, n_alt = 0
   Insn 68: point = 128, n_alt = -2
  BB 7
   Insn 429: point = 130, n_alt = -1
  BB 6
   Insn 47: point = 131, n_alt = -1
   Insn 46: point = 131, n_alt = 0
  BB 13
   Insn 130: point = 133, n_alt = 0
   Insn 129: point = 133, n_alt = -2
   Insn 128: point = 134, n_alt = 1
   Insn 449: point = 135, n_alt = -2
   Insn 127: point = 137, n_alt = 1
   Insn 448: point = 138, n_alt = -2
   Insn 462: point = 140, n_alt = 14
   Insn 108: point = 142, n_alt = -2
   Insn 422: point = 144, n_alt = -2
   Insn 107: point = 145, n_alt = 0
   Insn 106: point = 145, n_alt = -2
   Insn 464: point = 146, n_alt = 14
   Insn 447: point = 148, n_alt = 15
   Insn 100: point = 150, n_alt = 14
   Insn 461: point = 151, n_alt = 15
   Insn 99: point = 153, n_alt = 14
   Insn 98: point = 154, n_alt = 0
   Insn 97: point = 154, n_alt = -2
   Insn 96: point = 155, n_alt = -2
   Insn 95: point = 156, n_alt = -2
   Insn 94: point = 157, n_alt = -2
   Insn 93: point = 158, n_alt = 3
   Insn 86: point = 159, n_alt = -2
   Insn 421: point = 161, n_alt = -2
   Insn 463: point = 162, n_alt = 15
   Insn 85: point = 164, n_alt = -2
   Insn 420: point = 166, n_alt = -2
   Insn 84: point = 167, n_alt = 0
   Insn 83: point = 167, n_alt = -2
  BB 8
   Insn 54: point = 169, n_alt = -1
   Insn 53: point = 169, n_alt = 0
  BB 5
   Insn 42: point = 171, n_alt = -1
   Insn 41: point = 171, n_alt = 0
  BB 4
   Insn 37: point = 172, n_alt = -1
  BB 3
   Insn 32: point = 173, n_alt = -1
   Insn 31: point = 173, n_alt = 0
   Insn 30: point = 173, n_alt = 4
   Insn 29: point = 174, n_alt = 3
  BB 2
   Insn 16: point = 176, n_alt = -1
   Insn 15: point = 176, n_alt = 0
   Insn 11: point = 177, n_alt = 2
   Insn 417: point = 178, n_alt = -2
   Insn 2: point = 179, n_alt = -2
   Insn 416: point = 181, n_alt = -2
 r99: [30..104]
 r129: [134..148]
 r131: [63..75]
 r169: [30..100]
 r170: [30..97]
 r172: [30..96]
 r197: [141..151]
 r198: [147..162]
 r200: [68..78]
 r201: [60..82]
 r202: [74..90]
Compressing live ranges: from 182 to 4 - 2%
Ranges after the compression:
 r99: [0..1]
 r129: [2..3]
 r131: [0..1]
 r169: [0..1]
 r170: [0..1]
 r172: [0..1]
 r197: [2..3]
 r198: [2..3]
 r200: [0..1]
 r201: [0..1]
 r202: [0..1]

******** Rematerialization #1: ********

df_worklist_dataflow_doublequeue: n_basic_blocks 32 n_edges 47 count 43 (  1.3)
df_worklist_dataflow_doublequeue: n_basic_blocks 32 n_edges 47 count 32 (    1)

Cands:
0 (nop=0, remat_regno=169, reload_regno=189):
(insn 230 7 453 20 (parallel [
                        (set (reg/f:DI 189 [orig:169 pretmp_151 ] [169])
                            (plus:DI (reg/v/f:DI 139 [ <retval> ])
                                (const_int 14 [0xe])))
                        (clobber (reg:CC 17 flags))
                    ]) 191 {*adddi_1}
                 (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil)))

BB 2:
  register live in: 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139 140
  changed regs: 139 140 173 174
  dead regs: 4 [si] 5 [di] 17 [flags] 173 174

BB 3:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139 140
  register live out: 6 [bp] 7 [sp] 16 [argp] 17 [flags] 19 [frame] 83 84 139 140
  changed regs: 83 84
  dead regs:
  livein cands in BB 3:

        0

BB 4:
  register live in: 6 [bp] 7 [sp] 16 [argp] 17 [flags] 19 [frame] 83 84 139 140
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 84 139 140
  changed regs:
  dead regs: 17 [flags]
  livein cands in BB 4:

        0

BB 5:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 84 139
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 84 139
  changed regs:
  dead regs: 17 [flags]
  livein cands in BB 5:

        0

BB 6:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 84 139
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 139
  changed regs:
  dead regs: 17 [flags] 84
  livein cands in BB 6:

        0

BB 7:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
  changed regs:
  dead regs:

BB 8:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 84 139
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 139
  changed regs:
  dead regs: 17 [flags] 84
  livein cands in BB 8:

        0

BB 9:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
  changed regs:
  dead regs:
  livein cands in BB 9:

        0

BB 10:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 84 139 140
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 139 140
  changed regs:
  dead regs: 17 [flags] 84
  livein cands in BB 10:

        0

BB 11:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
  changed regs:
  dead regs:
  livein cands in BB 11:

        0

BB 12:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  changed regs: 0 [ax] 5 [di] 20 [xmm0] 85 86 175 176
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 83 85 86 175 176

BB 13:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  changed regs: 0 [ax] 4 [si] 5 [di] 20 [xmm0] 21 [xmm1] 116 128 129 142 143 144 145 147 177 178 179 185 186 197 198
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 83 116 128 129 142 143 144 145 147 177 178 179 185 186 197 198

BB 14:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 140
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 89 139
  changed regs: 0 [ax] 5 [di] 88 89 139 180
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 83 140 180

BB 15:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 89 139
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 94 136 139 166 167
  changed regs: 94 136 166 167
  dead regs: 89
  livein cands in BB 15:

        0

BB 16:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 94 136 139 166 167
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 92 94 136 139 166 167
  changed regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 92 181
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 181
  livein cands in BB 16:

        0

BB 17:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  register live out: 7 [sp] 16 [argp] 19 [frame]
  changed regs: 1 [dx] 2 [cx] 4 [si] 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []

BB 18:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 92 94 136 139 166 167
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 94 136 139 166 167
  changed regs: 1 [dx] 4 [si] 5 [di] 94 136
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 92
  livein cands in BB 18:

        0

BB 19:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
  changed regs:
  dead regs:
  livein cands in BB 19:

        0

BB 20:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 87 99 134 139 169 170 172
  changed regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 82 87 99 134 139 149 150 151 169 170 172 182 188 189 190
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 149 150 151 182 188 189 190
  cands generated in BB 20:

        0
  pavout cands in BB 20:

        0
  avout cands in BB 20:

        0

BB 21:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
  changed regs:
  dead regs:
  livein cands in BB 21:

        0
  pavin cands in BB 21:

        0
  pavout cands in BB 21:

        0
  avin cands in BB 21:

        0
  avout cands in BB 21:

        0

BB 22:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 87 99 134 139 169 170 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 87 90 99 132 134 139 169 170 172
  changed regs: 90 132
  dead regs:
  livein cands in BB 22:

        0
  pavin cands in BB 22:

        0
  pavout cands in BB 22:

        0

BB 23:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 87 90 99 132 134 139 169 170 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 87 90 99 101 107 132 133 139 169 170 172
  changed regs: 101 107 133 152 153 154 191
  dead regs: 17 [flags] 134 152 153 154 191
  livein cands in BB 23:

        0
  pavin cands in BB 23:

        0
  pavout cands in BB 23:

        0

BB 24:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 87 90 99 101 107 132 133 139 169 170 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 87 90 99 132 134 139 169 170 172
  changed regs: 4 [si] 5 [di] 20 [xmm0] 90 107 121 130 131 134 156 157 160 161 162 183 192 193 195 200 201 202
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 101 107 121 130 131 133 156 157 160 161 162 183 192 193 195 200 201 202
  livein cands in BB 24:

        0
  pavin cands in BB 24:

        0
  pavout cands in BB 24:

        0

BB 25:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 87 99 134 139 169 170 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 87 99 134 139 169 170 172
  changed regs:
  dead regs:
  livein cands in BB 25:

        0
  pavin cands in BB 25:

        0
  pavout cands in BB 25:

        0

BB 26:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 87 90 99 107 132 133 139 169 170 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 87 90 99 132 134 139 169 170 172
  changed regs: 20 [xmm0] 90 134 184
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 107 133 184
  livein cands in BB 26:

        0
  pavin cands in BB 26:

        0
  pavout cands in BB 26:

        0

BB 27:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 87 99 134 139 169 170 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 87 99 134 139 169 170 172
  changed regs: 82
  dead regs:
  livein cands in BB 27:

        0
  pavin cands in BB 27:

        0
  pavout cands in BB 27:

        0

BB 28:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 87 99 134 139 169 170 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 87 99 134 139 169 170 172
  changed regs: 87
  dead regs: 17 [flags]
  livein cands in BB 28:

        0
  pavin cands in BB 28:

        0
  pavout cands in BB 28:

        0

BB 29:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 87 99 134 139 169 170 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 87 99 134 139 169 170 172
  changed regs:
  dead regs: 17 [flags]
  livein cands in BB 29:

        0
  pavin cands in BB 29:

        0
  pavout cands in BB 29:

        0

BB 30:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 87 99 134 139 169 170 172
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 87 99 134 139 169 170 172
  changed regs: 87
  dead regs: 17 [flags]
  livein cands in BB 30:

        0
  pavin cands in BB 30:

        0
  pavout cands in BB 30:

        0

BB 31:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  changed regs: 0 [ax]
  dead regs: 139
  livein cands in BB 31:

        0
  pavin cands in BB 31:

        0
subreg regs:
  Slot 0 regnos (width = 0):	 169	 129
  Slot 1 regnos (width = 0):	 131	 197
  Slot 2 regnos (width = 0):	 200	 198
  Slot 3 regnos (width = 0):	 201
  Slot 4 regnos (width = 0):	 202
  Slot 5 regnos (width = 0):	 99
  Slot 6 regnos (width = 0):	 170
  Slot 7 regnos (width = 0):	 172
Changing spilled pseudos to memory in insn #463
Changing spilled pseudos to memory in insn #396
Changing spilled pseudos to memory in insn #461
Changing spilled pseudos to memory in insn #447
Changing spilled pseudos to memory in insn #464
Changing spilled pseudos to memory in insn #111
Changing spilled pseudos to memory in insn #113
Changing spilled pseudos to memory in insn #462
Changing spilled pseudos to memory in insn #128
Changing spilled pseudos to memory in insn #452
Changing spilled pseudos to memory in insn #217
Changing spilled pseudos to memory in insn #453
Changing spilled pseudos to memory in insn #454
Changing spilled pseudos to memory in insn #257
Changing spilled pseudos to memory in insn #238
Changing spilled pseudos to memory in insn #455
Changing spilled pseudos to memory in insn #470
Changing spilled pseudos to memory in insn #456
Changing spilled pseudos to memory in insn #468
Changing spilled pseudos to memory in insn #259
Changing spilled pseudos to memory in insn #412
Changing spilled pseudos to memory in insn #466
Changing spilled pseudos to memory in insn #457
Changing spilled pseudos to memory in insn #471
Changing spilled pseudos to memory in insn #275
Changing spilled pseudos to memory in insn #277
Changing spilled pseudos to memory in insn #467
Changing spilled pseudos to memory in insn #289
Changing spilled pseudos to memory in insn #459
Changing spilled pseudos to memory in insn #469
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=144, prev_offset=80)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=80, prev_offset=16)
Can eliminate 19 to 6 (offset=-56, prev_offset=0)

********** Local #4: **********

	   Spilling non-eliminable hard regs: 7
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 264:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 263:  (0) v  (1) m {*movdf_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 256:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 100:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 99:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) Ts {*leadi}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 93:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 469:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 459:  (0) r  (1) rem {*movdi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 289:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 467:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 471:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 457:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 466:  (0) m  (1) v {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 412:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 468:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 470:  (0) m  (1) v {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 455:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=616,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=16,overall=609,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=21,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=22,overall=16,losers=1 -- refuse
            alt=23: Bad operand -- refuse
            alt=24: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=25,overall=10,losers=1 -- refuse
            alt=26: Bad operand -- refuse
            alt=27: Bad operand -- refuse
	 Choosing alt 5 in insn 257:  (0) m  (1) re {*movdi_internal}
      Creating newreg=207, assigning class GENERAL_REGS to r207
  257: [frame:DI+0x38]=r207:DI
      REG_DEAD frame:TI
      REG_EQUIV frame:DI-0x10
    Inserting insn reload before:
  476: r207:DI=frame:DI+0x40

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r207
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 454:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 453:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 452:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 128:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 462:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 464:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 447:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 461:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 463:  (0) m  (1) v {*movdf_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #6: **********

  BB 17
   Insn 178: point = 0, n_alt = 0
   Insn 177: point = 0, n_alt = 4
   Insn 176: point = 0, n_alt = 4
   Insn 175: point = 0, n_alt = 0
   Insn 174: point = 0, n_alt = 4
  BB 31
   Insn 377: point = 0, n_alt = -1
   Insn 376: point = 0, n_alt = -2
  BB 21
   Insn 441: point = 2, n_alt = -1
  BB 19
   Insn 438: point = 3, n_alt = -1
  BB 18
   Insn 194: point = 4, n_alt = -1
   Insn 193: point = 4, n_alt = 0
   Insn 191: point = 4, n_alt = 0
   Insn 188: point = 5, n_alt = 0
   Insn 186: point = 6, n_alt = 0
   Insn 185: point = 6, n_alt = -2
   Insn 184: point = 6, n_alt = -2
   Insn 183: point = 7, n_alt = -2
  BB 16
   Insn 171: point = 8, n_alt = -1
   Insn 170: point = 8, n_alt = 0
   Insn 167: point = 8, n_alt = -2
   Insn 424: point = 10, n_alt = -2
   Insn 166: point = 11, n_alt = 0
   Insn 165: point = 11, n_alt = -2
   Insn 164: point = 11, n_alt = 0
   Insn 163: point = 11, n_alt = -2
   Insn 406: point = 11, n_alt = -2
  BB 15
   Insn 161: point = 12, n_alt = 4
   Insn 398: point = 13, n_alt = 3
   Insn 5: point = 14, n_alt = 0
   Insn 157: point = 15, n_alt = 0
  BB 11
   Insn 435: point = 18, n_alt = -1
  BB 14
   Insn 155: point = 19, n_alt = -1
   Insn 154: point = 19, n_alt = 0
   Insn 146: point = 19, n_alt = 3
   Insn 144: point = 21, n_alt = 1
   Insn 141: point = 21, n_alt = -2
   Insn 423: point = 23, n_alt = -2
   Insn 140: point = 24, n_alt = 0
   Insn 139: point = 24, n_alt = -2
   Insn 136: point = 24, n_alt = 0
  BB 10
   Insn 61: point = 27, n_alt = -1
   Insn 60: point = 27, n_alt = 0
  BB 9
   Insn 432: point = 29, n_alt = -1
  BB 30
   Insn 347: point = 30, n_alt = -1
   Insn 346: point = 30, n_alt = 0
   Insn 342: point = 30, n_alt = 0
  BB 29
   Insn 339: point = 32, n_alt = -1
   Insn 338: point = 32, n_alt = 0
  BB 28
   Insn 331: point = 33, n_alt = -1
   Insn 330: point = 33, n_alt = 0
   Insn 327: point = 33, n_alt = 0
  BB 27
   Insn 322: point = 35, n_alt = 0
  BB 25
   Insn 444: point = 37, n_alt = -1
  BB 26
   Insn 314: point = 38, n_alt = -1
   Insn 313: point = 38, n_alt = 0
   Insn 312: point = 38, n_alt = 0
   Insn 309: point = 39, n_alt = 0
   Insn 307: point = 40, n_alt = 15
   Insn 427: point = 41, n_alt = -2
   Insn 305: point = 42, n_alt = 0
   Insn 304: point = 42, n_alt = -2
  BB 23
   Insn 248: point = 44, n_alt = -1
   Insn 247: point = 44, n_alt = 0
   Insn 246: point = 44, n_alt = 0
   Insn 455: point = 46, n_alt = 3
   Insn 243: point = 47, n_alt = 14
   Insn 241: point = 48, n_alt = 0
   Insn 240: point = 50, n_alt = 3
   Insn 235: point = 51, n_alt = 0
   Insn 234: point = 53, n_alt = 2
  BB 24
   Insn 297: point = 56, n_alt = -1
   Insn 296: point = 56, n_alt = 0
   Insn 295: point = 56, n_alt = 0
   Insn 292: point = 57, n_alt = 0
   Insn 290: point = 58, n_alt = 15
   Insn 469: point = 59, n_alt = 3
   Insn 459: point = 60, n_alt = 3
   Insn 289: point = 61, n_alt = 1
   Insn 287: point = 63, n_alt = 15
   Insn 286: point = 64, n_alt = 1
   Insn 467: point = 66, n_alt = 14
   Insn 272: point = 67, n_alt = -2
   Insn 426: point = 69, n_alt = -2
   Insn 271: point = 70, n_alt = 0
   Insn 270: point = 70, n_alt = -2
   Insn 471: point = 71, n_alt = 14
   Insn 457: point = 72, n_alt = 15
   Insn 264: point = 73, n_alt = 14
   Insn 466: point = 74, n_alt = 15
   Insn 263: point = 75, n_alt = 14
   Insn 262: point = 76, n_alt = 0
   Insn 261: point = 76, n_alt = -2
   Insn 412: point = 77, n_alt = 3
   Insn 259: point = 77, n_alt = 3
   Insn 468: point = 77, n_alt = 5
   Insn 258: point = 78, n_alt = 14
   Insn 253: point = 79, n_alt = 0
   Insn 252: point = 81, n_alt = 0
   Insn 456: point = 83, n_alt = 0
   Insn 470: point = 84, n_alt = 15
  BB 22
   Insn 6: point = 86, n_alt = 0
   Insn 229: point = 87, n_alt = 3
  BB 20
   Insn 224: point = 89, n_alt = -1
   Insn 223: point = 89, n_alt = 0
   Insn 257: point = 89, n_alt = 5
   Insn 476: point = 90, n_alt = 0
   Insn 454: point = 91, n_alt = 5
   Insn 256: point = 92, n_alt = 3
   Insn 453: point = 93, n_alt = 5
   Insn 230: point = 94, n_alt = 3
   Insn 7: point = 95, n_alt = 0
   Insn 452: point = 96, n_alt = 1
   Insn 216: point = 97, n_alt = 2
   Insn 451: point = 98, n_alt = -2
   Insn 215: point = 99, n_alt = 0
   Insn 214: point = 100, n_alt = 0
   Insn 211: point = 101, n_alt = -2
   Insn 425: point = 103, n_alt = -2
   Insn 210: point = 104, n_alt = 0
   Insn 209: point = 104, n_alt = -2
   Insn 208: point = 105, n_alt = -2
   Insn 207: point = 106, n_alt = -2
   Insn 206: point = 107, n_alt = 0
   Insn 205: point = 107, n_alt = 0
   Insn 204: point = 108, n_alt = 0
   Insn 203: point = 109, n_alt = 0
  BB 12
   Insn 77: point = 111, n_alt = 0
   Insn 76: point = 111, n_alt = -2
   Insn 75: point = 112, n_alt = -2
   Insn 419: point = 114, n_alt = -2
   Insn 74: point = 115, n_alt = 0
   Insn 73: point = 115, n_alt = -2
   Insn 70: point = 116, n_alt = -2
   Insn 418: point = 118, n_alt = -2
   Insn 69: point = 119, n_alt = 0
   Insn 68: point = 119, n_alt = -2
  BB 7
   Insn 429: point = 121, n_alt = -1
  BB 6
   Insn 47: point = 122, n_alt = -1
   Insn 46: point = 122, n_alt = 0
  BB 13
   Insn 130: point = 124, n_alt = 0
   Insn 129: point = 124, n_alt = -2
   Insn 128: point = 125, n_alt = 1
   Insn 449: point = 126, n_alt = -2
   Insn 127: point = 128, n_alt = 1
   Insn 448: point = 129, n_alt = -2
   Insn 462: point = 131, n_alt = 14
   Insn 108: point = 132, n_alt = -2
   Insn 422: point = 134, n_alt = -2
   Insn 107: point = 135, n_alt = 0
   Insn 106: point = 135, n_alt = -2
   Insn 464: point = 136, n_alt = 14
   Insn 447: point = 137, n_alt = 15
   Insn 100: point = 138, n_alt = 14
   Insn 461: point = 139, n_alt = 15
   Insn 99: point = 140, n_alt = 14
   Insn 98: point = 141, n_alt = 0
   Insn 97: point = 141, n_alt = -2
   Insn 96: point = 142, n_alt = -2
   Insn 95: point = 143, n_alt = -2
   Insn 94: point = 144, n_alt = 0
   Insn 93: point = 145, n_alt = 3
   Insn 86: point = 146, n_alt = -2
   Insn 421: point = 148, n_alt = -2
   Insn 463: point = 149, n_alt = 15
   Insn 85: point = 150, n_alt = -2
   Insn 420: point = 152, n_alt = -2
   Insn 84: point = 153, n_alt = 0
   Insn 83: point = 153, n_alt = -2
  BB 8
   Insn 54: point = 155, n_alt = -1
   Insn 53: point = 155, n_alt = 0
  BB 5
   Insn 42: point = 157, n_alt = -1
   Insn 41: point = 157, n_alt = 0
  BB 4
   Insn 37: point = 158, n_alt = -1
  BB 3
   Insn 32: point = 159, n_alt = -1
   Insn 31: point = 159, n_alt = 0
   Insn 30: point = 159, n_alt = 4
   Insn 29: point = 160, n_alt = 3
  BB 2
   Insn 16: point = 162, n_alt = -1
   Insn 15: point = 162, n_alt = 0
   Insn 11: point = 163, n_alt = 2
   Insn 417: point = 164, n_alt = -2
   Insn 2: point = 165, n_alt = -2
   Insn 416: point = 167, n_alt = -2
 r82: [89..100] [30..35]
 r83: [153..160] [119..123] [30..110] [25..28]
 r84: [155..159] [122..123] [27..28]
 r85: [115..116]
 r86: [111..112]
 r87: [30..95]
 r88: [19..24] [4..17]
 r89: [19..19] [16..17]
 r90: [38..86]
 r92: [6..8]
 r94: [4..14]
 r101: [82..85] [44..51]
 r107: [84..85] [70..71] [42..47]
 r116: [125..132]
 r121: [62..67]
 r128: [139..140] [130..131]
 r130: [74..75] [65..66]
 r132: [38..87]
 r133: [63..85] [40..44]
 r134: [86..99] [54..56] [30..38]
 r136: [4..15]
 r139: [155..163] [122..123] [27..101] [0..21]
 r140: [158..165] [20..28]
 r142: [149..150] [135..136]
 r143: [141..146]
 r144: [142..145]
 r145: [143..144]
 r147: [124..126]
 r149: [106..109]
 r150: [105..108]
 r151: [104..107]
 r152: [52..53]
 r153: [49..50]
 r154: [45..48]
 r156: [80..81]
 r157: [77..79] [58..59]
 r160: [76..78]
 r161: [63..64]
 r162: [58..61]
 r166: [4..13]
 r167: [4..12]
 r173: [166..167]
 r174: [162..164]
 r175: [117..118]
 r176: [113..114]
 r177: [151..152]
 r178: [147..148]
 r179: [133..134]
 r180: [22..23]
 r181: [9..10]
 r182: [102..103]
 r183: [68..69]
 r184: [40..41]
 r185: [137..138]
 r186: [127..129]
 r188: [96..98]
 r189: [93..94]
 r190: [91..92]
 r191: [45..46]
 r192: [82..83]
 r193: [72..73]
 r195: [58..60]
 r207: [89..90]
Compressing live ranges: from 168 to 102 - 60%
Ranges after the compression:
 r82: [52..59] [13..14]
 r83: [96..97] [72..73] [11..63]
 r84: [96..97] [72..73] [11..12]
 r85: [68..69]
 r86: [64..65]
 r87: [13..57]
 r88: [0..10]
 r89: [4..6]
 r90: [15..50]
 r92: [0..1]
 r94: [0..3]
 r101: [46..49] [19..23]
 r107: [48..49] [36..37] [18..21]
 r116: [74..79]
 r121: [30..33]
 r128: [86..87] [78..79]
 r130: [40..41] [32..33]
 r132: [15..51]
 r133: [30..49] [16..19]
 r134: [50..59] [26..27] [13..15]
 r136: [0..3]
 r139: [96..99] [72..73] [11..59] [0..8]
 r140: [96..99] [7..12]
 r142: [92..93] [82..83]
 r143: [88..89]
 r144: [88..89]
 r145: [88..89]
 r147: [74..75]
 r149: [62..63]
 r150: [62..63]
 r151: [62..63]
 r152: [24..25]
 r153: [22..23]
 r154: [20..21]
 r156: [44..45]
 r157: [42..43] [28..29]
 r160: [42..43]
 r161: [30..31]
 r162: [28..29]
 r166: [0..3]
 r167: [0..3]
 r173: [100..101]
 r174: [98..99]
 r175: [70..71]
 r176: [66..67]
 r177: [94..95]
 r178: [90..91]
 r179: [80..81]
 r180: [9..10]
 r181: [2..3]
 r182: [60..61]
 r183: [34..35]
 r184: [16..17]
 r185: [84..85]
 r186: [76..77]
 r188: [58..59]
 r189: [56..57]
 r190: [54..55]
 r191: [20..21]
 r192: [46..47]
 r193: [38..39]
 r195: [28..29]
 r207: [52..53]

********** Pseudo live ranges #7: **********

  BB 17
   Insn 178: point = 0, n_alt = 0
   Insn 177: point = 0, n_alt = 4
   Insn 176: point = 0, n_alt = 4
   Insn 175: point = 0, n_alt = 0
   Insn 174: point = 0, n_alt = 4
  BB 31
   Insn 377: point = 0, n_alt = -1
   Insn 376: point = 0, n_alt = -2
  BB 21
   Insn 441: point = 2, n_alt = -1
  BB 19
   Insn 438: point = 3, n_alt = -1
  BB 18
   Insn 194: point = 4, n_alt = -1
   Insn 193: point = 4, n_alt = 0
   Insn 191: point = 4, n_alt = 0
   Insn 188: point = 5, n_alt = 0
   Insn 186: point = 6, n_alt = 0
   Insn 185: point = 6, n_alt = -2
   Insn 184: point = 6, n_alt = -2
   Insn 183: point = 7, n_alt = -2
  BB 16
   Insn 171: point = 8, n_alt = -1
   Insn 170: point = 8, n_alt = 0
   Insn 167: point = 8, n_alt = -2
   Insn 424: point = 10, n_alt = -2
   Insn 166: point = 11, n_alt = 0
   Insn 165: point = 11, n_alt = -2
   Insn 164: point = 11, n_alt = 0
   Insn 163: point = 11, n_alt = -2
   Insn 406: point = 11, n_alt = -2
  BB 15
   Insn 161: point = 12, n_alt = 4
   Insn 398: point = 13, n_alt = 3
   Insn 5: point = 14, n_alt = 0
   Insn 157: point = 15, n_alt = 0
  BB 11
   Insn 435: point = 18, n_alt = -1
  BB 14
   Insn 155: point = 19, n_alt = -1
   Insn 154: point = 19, n_alt = 0
   Insn 146: point = 19, n_alt = 3
   Insn 144: point = 21, n_alt = 1
   Insn 141: point = 21, n_alt = -2
   Insn 423: point = 23, n_alt = -2
   Insn 140: point = 24, n_alt = 0
   Insn 139: point = 24, n_alt = -2
   Insn 136: point = 24, n_alt = 0
  BB 10
   Insn 61: point = 27, n_alt = -1
   Insn 60: point = 27, n_alt = 0
  BB 9
   Insn 432: point = 29, n_alt = -1
  BB 30
   Insn 347: point = 30, n_alt = -1
   Insn 346: point = 30, n_alt = 0
   Insn 342: point = 30, n_alt = 0
  BB 29
   Insn 339: point = 32, n_alt = -1
   Insn 338: point = 32, n_alt = 0
  BB 28
   Insn 331: point = 33, n_alt = -1
   Insn 330: point = 33, n_alt = 0
   Insn 327: point = 33, n_alt = 0
  BB 27
   Insn 322: point = 35, n_alt = 0
  BB 25
   Insn 444: point = 37, n_alt = -1
  BB 26
   Insn 314: point = 38, n_alt = -1
   Insn 313: point = 38, n_alt = 0
   Insn 312: point = 38, n_alt = 0
   Insn 309: point = 39, n_alt = 0
   Insn 307: point = 40, n_alt = 15
   Insn 427: point = 41, n_alt = -2
   Insn 305: point = 42, n_alt = 0
   Insn 304: point = 42, n_alt = -2
  BB 23
   Insn 248: point = 44, n_alt = -1
   Insn 247: point = 44, n_alt = 0
   Insn 246: point = 44, n_alt = 0
   Insn 455: point = 46, n_alt = 3
   Insn 243: point = 47, n_alt = 14
   Insn 241: point = 48, n_alt = 0
   Insn 240: point = 50, n_alt = 3
   Insn 235: point = 51, n_alt = 0
   Insn 234: point = 53, n_alt = 2
  BB 24
   Insn 297: point = 56, n_alt = -1
   Insn 296: point = 56, n_alt = 0
   Insn 295: point = 56, n_alt = 0
   Insn 292: point = 57, n_alt = 0
   Insn 290: point = 58, n_alt = 15
   Insn 469: point = 59, n_alt = 3
   Insn 459: point = 60, n_alt = 3
   Insn 289: point = 61, n_alt = 1
   Insn 287: point = 63, n_alt = 15
   Insn 286: point = 64, n_alt = 1
   Insn 467: point = 66, n_alt = 14
   Insn 272: point = 67, n_alt = -2
   Insn 426: point = 69, n_alt = -2
   Insn 271: point = 70, n_alt = 0
   Insn 270: point = 70, n_alt = -2
   Insn 471: point = 71, n_alt = 14
   Insn 457: point = 72, n_alt = 15
   Insn 264: point = 73, n_alt = 14
   Insn 466: point = 74, n_alt = 15
   Insn 263: point = 75, n_alt = 14
   Insn 262: point = 76, n_alt = 0
   Insn 261: point = 76, n_alt = -2
   Insn 412: point = 77, n_alt = 3
   Insn 259: point = 77, n_alt = 3
   Insn 468: point = 77, n_alt = 5
   Insn 258: point = 78, n_alt = 14
   Insn 253: point = 79, n_alt = 0
   Insn 252: point = 81, n_alt = 0
   Insn 456: point = 83, n_alt = 0
   Insn 470: point = 84, n_alt = 15
  BB 22
   Insn 6: point = 86, n_alt = 0
   Insn 229: point = 87, n_alt = 3
  BB 20
   Insn 224: point = 89, n_alt = -1
   Insn 223: point = 89, n_alt = 0
   Insn 257: point = 89, n_alt = 5
   Insn 476: point = 90, n_alt = 0
   Insn 454: point = 91, n_alt = 5
   Insn 256: point = 92, n_alt = 3
   Insn 453: point = 93, n_alt = 5
   Insn 230: point = 94, n_alt = 3
   Insn 7: point = 95, n_alt = 0
   Insn 452: point = 96, n_alt = 1
   Insn 216: point = 97, n_alt = 2
   Insn 451: point = 98, n_alt = -2
   Insn 215: point = 99, n_alt = 0
   Insn 214: point = 100, n_alt = 0
   Insn 211: point = 101, n_alt = -2
   Insn 425: point = 103, n_alt = -2
   Insn 210: point = 104, n_alt = 0
   Insn 209: point = 104, n_alt = -2
   Insn 208: point = 105, n_alt = -2
   Insn 207: point = 106, n_alt = -2
   Insn 206: point = 107, n_alt = 0
   Insn 205: point = 107, n_alt = 0
   Insn 204: point = 108, n_alt = 0
   Insn 203: point = 109, n_alt = 0
  BB 12
   Insn 77: point = 111, n_alt = 0
   Insn 76: point = 111, n_alt = -2
   Insn 75: point = 112, n_alt = -2
   Insn 419: point = 114, n_alt = -2
   Insn 74: point = 115, n_alt = 0
   Insn 73: point = 115, n_alt = -2
   Insn 70: point = 116, n_alt = -2
   Insn 418: point = 118, n_alt = -2
   Insn 69: point = 119, n_alt = 0
   Insn 68: point = 119, n_alt = -2
  BB 7
   Insn 429: point = 121, n_alt = -1
  BB 6
   Insn 47: point = 122, n_alt = -1
   Insn 46: point = 122, n_alt = 0
  BB 13
   Insn 130: point = 124, n_alt = 0
   Insn 129: point = 124, n_alt = -2
   Insn 128: point = 125, n_alt = 1
   Insn 449: point = 126, n_alt = -2
   Insn 127: point = 128, n_alt = 1
   Insn 448: point = 129, n_alt = -2
   Insn 462: point = 131, n_alt = 14
   Insn 108: point = 132, n_alt = -2
   Insn 422: point = 134, n_alt = -2
   Insn 107: point = 135, n_alt = 0
   Insn 106: point = 135, n_alt = -2
   Insn 464: point = 136, n_alt = 14
   Insn 447: point = 137, n_alt = 15
   Insn 100: point = 138, n_alt = 14
   Insn 461: point = 139, n_alt = 15
   Insn 99: point = 140, n_alt = 14
   Insn 98: point = 141, n_alt = 0
   Insn 97: point = 141, n_alt = -2
   Insn 96: point = 142, n_alt = -2
   Insn 95: point = 143, n_alt = -2
   Insn 94: point = 144, n_alt = 0
   Insn 93: point = 145, n_alt = 3
   Insn 86: point = 146, n_alt = -2
   Insn 421: point = 148, n_alt = -2
   Insn 463: point = 149, n_alt = 15
   Insn 85: point = 150, n_alt = -2
   Insn 420: point = 152, n_alt = -2
   Insn 84: point = 153, n_alt = 0
   Insn 83: point = 153, n_alt = -2
  BB 8
   Insn 54: point = 155, n_alt = -1
   Insn 53: point = 155, n_alt = 0
  BB 5
   Insn 42: point = 157, n_alt = -1
   Insn 41: point = 157, n_alt = 0
  BB 4
   Insn 37: point = 158, n_alt = -1
  BB 3
   Insn 32: point = 159, n_alt = -1
   Insn 31: point = 159, n_alt = 0
   Insn 30: point = 159, n_alt = 4
   Insn 29: point = 160, n_alt = 3
  BB 2
   Insn 16: point = 162, n_alt = -1
   Insn 15: point = 162, n_alt = 0
   Insn 11: point = 163, n_alt = 2
   Insn 417: point = 164, n_alt = -2
   Insn 2: point = 165, n_alt = -2
   Insn 416: point = 167, n_alt = -2
 r82: [89..100] [30..35]
 r83: [153..160] [119..123] [30..110] [25..28]
 r84: [155..159] [122..123] [27..28]
 r85: [115..116]
 r86: [111..112]
 r87: [30..95]
 r88: [19..24] [4..17]
 r89: [19..19] [16..17]
 r90: [38..86]
 r92: [6..8]
 r94: [4..14]
 r101: [82..85] [44..51]
 r107: [84..85] [70..71] [42..47]
 r116: [125..132]
 r121: [62..67]
 r128: [139..140] [130..131]
 r130: [74..75] [65..66]
 r132: [38..87]
 r133: [63..85] [40..44]
 r134: [86..99] [54..56] [30..38]
 r136: [4..15]
 r139: [155..163] [122..123] [27..101] [0..21]
 r140: [158..165] [20..28]
 r142: [149..150] [135..136]
 r143: [141..146]
 r144: [142..145]
 r145: [143..144]
 r147: [124..126]
 r149: [106..109]
 r150: [105..108]
 r151: [104..107]
 r152: [52..53]
 r153: [49..50]
 r154: [45..48]
 r156: [80..81]
 r157: [77..79] [58..59]
 r160: [76..78]
 r161: [63..64]
 r162: [58..61]
 r166: [4..13]
 r167: [4..12]
 r173: [166..167]
 r174: [162..164]
 r175: [117..118]
 r176: [113..114]
 r177: [151..152]
 r178: [147..148]
 r179: [133..134]
 r180: [22..23]
 r181: [9..10]
 r182: [102..103]
 r183: [68..69]
 r184: [40..41]
 r185: [137..138]
 r186: [127..129]
 r188: [96..98]
 r189: [93..94]
 r190: [91..92]
 r191: [45..46]
 r192: [82..83]
 r193: [72..73]
 r195: [58..60]
 r207: [89..90]
Compressing live ranges: from 168 to 102 - 60%
Ranges after the compression:
 r82: [52..59] [13..14]
 r83: [96..97] [72..73] [11..63]
 r84: [96..97] [72..73] [11..12]
 r85: [68..69]
 r86: [64..65]
 r87: [13..57]
 r88: [0..10]
 r89: [4..6]
 r90: [15..50]
 r92: [0..1]
 r94: [0..3]
 r101: [46..49] [19..23]
 r107: [48..49] [36..37] [18..21]
 r116: [74..79]
 r121: [30..33]
 r128: [86..87] [78..79]
 r130: [40..41] [32..33]
 r132: [15..51]
 r133: [30..49] [16..19]
 r134: [50..59] [26..27] [13..15]
 r136: [0..3]
 r139: [96..99] [72..73] [11..59] [0..8]
 r140: [96..99] [7..12]
 r142: [92..93] [82..83]
 r143: [88..89]
 r144: [88..89]
 r145: [88..89]
 r147: [74..75]
 r149: [62..63]
 r150: [62..63]
 r151: [62..63]
 r152: [24..25]
 r153: [22..23]
 r154: [20..21]
 r156: [44..45]
 r157: [42..43] [28..29]
 r160: [42..43]
 r161: [30..31]
 r162: [28..29]
 r166: [0..3]
 r167: [0..3]
 r173: [100..101]
 r174: [98..99]
 r175: [70..71]
 r176: [66..67]
 r177: [94..95]
 r178: [90..91]
 r179: [80..81]
 r180: [9..10]
 r181: [2..3]
 r182: [60..61]
 r183: [34..35]
 r184: [16..17]
 r185: [84..85]
 r186: [76..77]
 r188: [58..59]
 r189: [56..57]
 r190: [54..55]
 r191: [20..21]
 r192: [46..47]
 r193: [38..39]
 r195: [28..29]
 r207: [52..53]

********** Assignment #3: **********

	 Assigning to 207 (cl=INDEX_REGS, orig=207, freq=152, tfirst=207, tfreq=152)...
	   Assign 3 to reload r207 (freq=152)

********** Local #5: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=144, prev_offset=144)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=80, prev_offset=80)
Can eliminate 19 to 6 (offset=-56, prev_offset=0)
changing reg in insn 322
changing reg in insn 214
changing reg in insn 346
changing reg in insn 330
changing reg in insn 223
changing reg in insn 29
changing reg in insn 322
changing reg in insn 312
changing reg in insn 295
changing reg in insn 247
changing reg in insn 229
changing reg in insn 215
changing reg in insn 214
changing reg in insn 205
changing reg in insn 204
changing reg in insn 203
changing reg in insn 201
changing reg in insn 136
changing reg in insn 83
changing reg in insn 68
changing reg in insn 30
changing reg in insn 204
changing reg in insn 203
changing reg in insn 30
changing reg in insn 60
changing reg in insn 53
changing reg in insn 46
changing reg in insn 41
changing reg in insn 31
changing reg in insn 70
changing reg in insn 73
changing reg in insn 71
changing reg in insn 75
changing reg in insn 76
changing reg in insn 342
changing reg in insn 7
changing reg in insn 327
changing reg in insn 346
changing reg in insn 343
changing reg in insn 342
changing reg in insn 334
changing reg in insn 330
changing reg in insn 328
changing reg in insn 327
changing reg in insn 234
changing reg in insn 136
changing reg in insn 193
changing reg in insn 154
changing reg in insn 144
changing reg in insn 139
changing reg in insn 137
changing reg in insn 146
changing reg in insn 157
changing reg in insn 147
changing reg in insn 309
changing reg in insn 292
changing reg in insn 6
changing reg in insn 313
changing reg in insn 310
changing reg in insn 309
changing reg in insn 296
changing reg in insn 293
changing reg in insn 292
changing reg in insn 235
changing reg in insn 232
changing reg in insn 167
changing reg in insn 184
changing reg in insn 170
changing reg in insn 168
changing reg in insn 188
changing reg in insn 5
changing reg in insn 193
changing reg in insn 189
changing reg in insn 188
changing reg in insn 183
changing reg in insn 159
changing reg in insn 235
changing reg in insn 252
changing reg in insn 240
changing reg in insn 238
changing reg in insn 236
changing reg in insn 243
changing reg in insn 304
changing reg in insn 270
changing reg in insn 244
changing reg in insn 108
changing reg in insn 127
changing reg in insn 113
changing reg in insn 111
changing reg in insn 109
changing reg in insn 272
changing reg in insn 286
changing reg in insn 277
changing reg in insn 275
changing reg in insn 273
changing reg in insn 99
changing reg in insn 263
changing reg in insn 286
changing reg in insn 229
changing reg in insn 258
changing reg in insn 255
changing reg in insn 243
changing reg in insn 258
changing reg in insn 246
changing reg in insn 307
changing reg in insn 287
changing reg in insn 427
changing reg in insn 286
changing reg in insn 312
changing reg in insn 295
changing reg in insn 215
changing reg in insn 338
changing reg in insn 313
changing reg in insn 296
changing reg in insn 234
changing reg in insn 216
changing reg in insn 191
changing reg in insn 157
changing reg in insn 191
changing reg in insn 165
changing reg in insn 211
changing reg in insn 141
changing reg in insn 11
changing reg in insn 230
changing reg in insn 376
changing reg in insn 212
changing reg in insn 185
changing reg in insn 144
changing reg in insn 142
changing reg in insn 2
changing reg in insn 146
changing reg in insn 29
changing reg in insn 23
changing reg in insn 19
changing reg in insn 85
changing reg in insn 106
changing reg in insn 86
changing reg in insn 97
changing reg in insn 93
changing reg in insn 96
changing reg in insn 94
changing reg in insn 95
changing reg in insn 129
changing reg in insn 203
changing reg in insn 207
changing reg in insn 204
changing reg in insn 208
changing reg in insn 205
changing reg in insn 209
changing reg in insn 234
changing reg in insn 235
changing reg in insn 240
changing reg in insn 241
changing reg in insn 241
changing reg in insn 246
changing reg in insn 243
changing reg in insn 252
changing reg in insn 253
changing reg in insn 253
changing reg in insn 290
changing reg in insn 258
changing reg in insn 255
changing reg in insn 289
changing reg in insn 258
changing reg in insn 258
changing reg in insn 261
changing reg in insn 286
changing reg in insn 287
changing reg in insn 289
changing reg in insn 290
changing reg in insn 398
changing reg in insn 163
changing reg in insn 161
changing reg in insn 406
changing reg in insn 416
changing reg in insn 2
changing reg in insn 417
changing reg in insn 15
changing reg in insn 418
changing reg in insn 70
changing reg in insn 419
changing reg in insn 75
changing reg in insn 420
changing reg in insn 85
changing reg in insn 421
changing reg in insn 86
changing reg in insn 422
changing reg in insn 108
changing reg in insn 423
changing reg in insn 141
changing reg in insn 424
changing reg in insn 167
changing reg in insn 425
changing reg in insn 211
changing reg in insn 426
changing reg in insn 272
changing reg in insn 427
changing reg in insn 307
deleting insn with uid = 416.
deleting insn with uid = 417.
deleting insn with uid = 418.
deleting insn with uid = 70.
deleting insn with uid = 73.
deleting insn with uid = 419.
deleting insn with uid = 75.
deleting insn with uid = 76.
deleting insn with uid = 420.
deleting insn with uid = 421.
deleting insn with uid = 95.
deleting insn with uid = 96.
deleting insn with uid = 97.
deleting insn with uid = 422.
deleting insn with uid = 448.
deleting insn with uid = 129.
deleting insn with uid = 423.
deleting insn with uid = 424.
deleting insn with uid = 184.
deleting insn with uid = 207.
deleting insn with uid = 208.
deleting insn with uid = 209.
deleting insn with uid = 425.
deleting insn with uid = 261.
deleting insn with uid = 426.
deleting insn with uid = 272.
deleting insn with uid = 427.


try_optimize_cfg iteration 1

Forwarding edge 6->7 to 12 failed.
Forwarding edge 8->9 to 31 failed.
Forwarding edge 10->11 to 31 failed.
Forwarding edge 18->19 to 31 failed.
Forwarding edge 20->21 to 31 failed.
Forwarding edge 24->25 to 27 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 74.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 98.
verify found no changes in insn with uid = 107.
verify found no changes in insn with uid = 130.
verify found no changes in insn with uid = 140.
verify found no changes in insn with uid = 166.
verify found no changes in insn with uid = 178.
verify found no changes in insn with uid = 186.
verify found no changes in insn with uid = 210.
verify found no changes in insn with uid = 262.
verify found no changes in insn with uid = 271.
verify found no changes in insn with uid = 305.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 32 n_edges 47 count 39 (  1.2)
df_worklist_dataflow_doublequeue: n_basic_blocks 32 n_edges 47 count 45 (  1.4)


fbgc_exp

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;;  ref usage 	r0={26d,25u,2e} r1={24d,10u} r2={22d,7u} r3={8d,13u,1e} r4={22d,9u} r5={27d,12u} r6={4d,13u} r7={1d,84u} r8={15d} r9={15d} r10={15d} r11={15d} r12={15d} r13={15d} r14={15d} r15={15d} r17={47d,17u} r18={15d} r19={5e} r20={23d,19u} r21={21d,10u} r22={21d,7u} r23={18d,2u} r24={17d,1u} r25={17d,1u} r26={16d} r27={16d} r28={15d} r29={15d} r30={15d} r31={15d} r32={15d} r33={15d} r34={15d} r35={15d} r36={16d} r37={16d} r38={15d} r39={15d} r40={3d,6u} r41={2d,4u,1e} r42={4d,9u} r43={3d,20u,2e} r44={15d} r45={15d} r46={15d} r47={15d} r48={15d} r49={15d} r50={15d} r51={15d} r52={15d} r53={15d} r54={15d} r55={15d} r56={15d} r57={15d} r58={15d} r59={15d} r60={15d} r61={15d} r62={15d} r63={15d} r64={15d} r65={15d} r66={15d} r67={15d} r68={15d} r69={15d} r70={15d} r71={15d} r72={15d} r73={15d} r74={15d} r75={15d} r169={1e} 
;;    total ref usage 1420{1139d,269u,12e} in 281{266 regular + 15 call} insns.
(note 1 0 12 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags] 40 [r12]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 3 [bx] 17 [flags] 40 [r12]
;; live  kill	
(note 12 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 12 3 2 (set (reg/v/f:DI 3 bx [orig:140 arg ] [140])
        (reg:DI 5 di [173])) "cmodules/fbgc_math.c":123:1 66 {*movdi_internal}
     (nil))
(note 3 2 4 2 NOTE_INSN_DELETED)
(note 4 3 14 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 14 4 11 2 (debug_marker) "cmodules/fbgc_math.c":123:1 -1
     (nil))
(insn 11 14 15 2 (set (reg/v/f:DI 40 r12 [orig:139 <retval> ] [139])
        (const_int 0 [0])) "cmodules/fbgc_math.c":123:1 66 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 15 11 16 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 4 si [174])
            (const_int 1 [0x1]))) "cmodules/fbgc_math.c":123:1 11 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 375)
            (pc))) "cmodules/fbgc_math.c":123:1 659 {*jcc}
     (int_list:REG_BR_PROB 662283964 (nil))
 -> 375)
;;  succ:       3 [38.3% (guessed)]  count:411457864 (estimated locally) (FALLTHRU)
;;              31 [61.7% (guessed)]  count:662283960 (estimated locally)
;; lr  out 	 3 [bx] 7 [sp] 40 [r12]
;; live  out 	 3 [bx] 7 [sp] 40 [r12]

;; basic block 3, loop depth 0, count 411457868 (estimated locally), maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [38.3% (guessed)]  count:411457864 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 40 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 43 [r15]
;; live  in  	 3 [bx] 7 [sp] 40 [r12]
;; live  gen 	 0 [ax] 17 [flags] 43 [r15]
;; live  kill	
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 18 17 19 3 (var_location:SI D#18 (const_int 1 [0x1])) -1
     (nil))
(debug_insn 19 18 20 3 (var_location:DI arg (reg/v/f:DI 3 bx [orig:140 arg ] [140])) -1
     (nil))
(debug_insn 20 19 21 3 (debug_marker:BLK) "cmodules/fbgc_math.c":123:1 -1
     (nil))
(debug_insn 21 20 22 3 (var_location:SI D#19 (debug_expr:SI D#18)) -1
     (nil))
(debug_insn 22 21 23 3 (var_location:SI argc (debug_expr:SI D#19)) -1
     (nil))
(debug_insn 23 22 24 3 (var_location:DI arg (reg/v/f:DI 3 bx [orig:140 arg ] [140])) -1
     (nil))
(debug_insn 24 23 25 3 (var_location:SI argc (const_int 1 [0x1])) -1
     (nil))
(debug_insn 25 24 26 3 (var_location:DI fun (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>)) -1
     (nil))
(debug_insn 26 25 27 3 (var_location:DI zfun (symbol_ref:DI ("c_exp") [flags 0x3]  <function_decl 0x7f213dfa5c00 c_exp>)) -1
     (nil))
(debug_insn 27 26 28 3 (debug_marker:BLK) "cmodules/fbgc_math.c":50:22 -1
     (nil))
(debug_insn 28 27 29 3 (debug_marker) "cmodules/fbgc_math.c":53:2 -1
     (nil))
(insn 29 28 30 3 (set (reg/f:DI 43 r15 [orig:83 _10 ] [83])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:140 arg ] [140]) [3 *arg_5(D)+0 S8 A64])) "cmodules/fbgc_math.c":53:12 66 {*movdi_internal}
     (nil))
(insn 30 29 31 3 (set (reg:QI 0 ax [orig:84 _11 ] [84])
        (mem:QI (reg/f:DI 43 r15 [orig:83 _10 ] [83]) [0 _10->type+0 S1 A8])) "cmodules/fbgc_math.c":53:15 69 {*movqi_internal}
     (nil))
(insn 31 30 32 3 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 0 ax [orig:84 _11 ] [84])
            (const_int 7 [0x7]))) "cmodules/fbgc_math.c":53:2 9 {*cmpqi_1}
     (nil))
(jump_insn 32 31 33 3 (set (pc)
        (if_then_else (eq (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 198)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 214748374 (nil))
 -> 198)
;;  succ:       4 [80.0% (adjusted)]  count:329166293 (estimated locally) (FALLTHRU)
;;              20 [20.0% (adjusted)]  count:82291575 (estimated locally)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 17 [flags] 40 [r12] 43 [r15]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 17 [flags] 40 [r12] 43 [r15]

;; basic block 4, loop depth 0, count 411457868 (estimated locally), maybe hot
;; Invalid sum of incoming counts 329166293 (estimated locally), should be 411457868 (estimated locally)
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [80.0% (adjusted)]  count:329166293 (estimated locally) (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 17 [flags] 40 [r12] 43 [r15]
;; lr  use 	 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 17 [flags] 40 [r12] 43 [r15]
;; live  gen 	
;; live  kill	
(note 33 32 37 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 37 33 38 4 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 402653190 (nil))
 -> 58)
;;  succ:       5 [62.5% (adjusted)]  count:257161168 (estimated locally) (FALLTHRU)
;;              10 [37.5% (adjusted)]  count:154296701 (estimated locally)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 40 [r12] 43 [r15]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 40 [r12] 43 [r15]

;; basic block 5, loop depth 0, count 411457868 (estimated locally), maybe hot
;; Invalid sum of incoming counts 257161168 (estimated locally), should be 411457868 (estimated locally)
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [62.5% (adjusted)]  count:257161168 (estimated locally) (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 40 [r12] 43 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 40 [r12] 43 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(note 38 37 41 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 41 38 42 5 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 0 ax [orig:84 _11 ] [84])
            (const_int 4 [0x4]))) "cmodules/fbgc_math.c":53:2 9 {*cmpqi_1}
     (nil))
(jump_insn 42 41 43 5 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 536870926 (nil))
 -> 51)
;;  succ:       6 [50.0% (adjusted)]  count:205728931 (estimated locally) (FALLTHRU)
;;              8 [50.0% (adjusted)]  count:205728937 (estimated locally)
;; lr  out 	 0 [ax] 7 [sp] 40 [r12] 43 [r15]
;; live  out 	 0 [ax] 7 [sp] 40 [r12] 43 [r15]

;; basic block 6, loop depth 0, count 411457868 (estimated locally), maybe hot
;; Invalid sum of incoming counts 205728931 (estimated locally), should be 411457868 (estimated locally)
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [50.0% (adjusted)]  count:205728931 (estimated locally) (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 40 [r12] 43 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 40 [r12] 43 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(note 43 42 46 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 46 43 47 6 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 0 ax [orig:84 _11 ] [84])
            (const_int 2 [0x2]))) "cmodules/fbgc_math.c":53:2 9 {*cmpqi_1}
     (nil))
(jump_insn 47 46 428 6 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 375)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 596523246 (nil))
 -> 375)
;;  succ:       31 [55.6% (adjusted)]  count:228587706 (estimated locally)
;;              7 [44.4% (adjusted)]  count:182870162 (estimated locally) (FALLTHRU)
;; lr  out 	 7 [sp] 40 [r12] 43 [r15]
;; live  out 	 7 [sp] 40 [r12] 43 [r15]

;; basic block 7, loop depth 0, count 182870162 (estimated locally), maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [44.4% (adjusted)]  count:182870162 (estimated locally) (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp] 43 [r15]
;; live  gen 	
;; live  kill	
(note 428 47 429 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 429 428 430 7 (set (pc)
        (label_ref 65)) 660 {jump}
     (nil)
 -> 65)
;;  succ:       12 [always]  count:182870162 (estimated locally)
;; lr  out 	 7 [sp] 43 [r15]
;; live  out 	 7 [sp] 43 [r15]

(barrier 430 429 51)
;; basic block 8, loop depth 0, count 411457868 (estimated locally), maybe hot
;; Invalid sum of incoming counts 205728937 (estimated locally), should be 411457868 (estimated locally)
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [50.0% (adjusted)]  count:205728937 (estimated locally)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 40 [r12] 43 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 40 [r12] 43 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 51 430 52 8 81 (nil) [1 uses])
(note 52 51 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:84 _11 ] [84])
            (const_int 5 [0x5]))) "cmodules/fbgc_math.c":53:2 9 {*cmpqi_1}
     (nil))
(jump_insn 54 53 431 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 80)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 858993454 (nil))
 -> 80)
;;  succ:       9 [20.0% (adjusted)]  count:82291578 (estimated locally) (FALLTHRU)
;;              13 [80.0% (adjusted)]  count:329166290 (estimated locally)
;; lr  out 	 7 [sp] 40 [r12] 43 [r15]
;; live  out 	 7 [sp] 40 [r12] 43 [r15]

;; basic block 9, loop depth 0, count 82291578 (estimated locally), maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [20.0% (adjusted)]  count:82291578 (estimated locally) (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 40 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp] 40 [r12]
;; live  gen 	
;; live  kill	
(note 431 54 432 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(jump_insn 432 431 433 9 (set (pc)
        (label_ref 375)) 660 {jump}
     (nil)
 -> 375)
;;  succ:       31 [always]  count:82291578 (estimated locally)
;; lr  out 	 7 [sp] 40 [r12]
;; live  out 	 7 [sp] 40 [r12]

(barrier 433 432 58)
;; basic block 10, loop depth 0, count 411457868 (estimated locally), maybe hot
;; Invalid sum of incoming counts 154296701 (estimated locally), should be 411457868 (estimated locally)
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [37.5% (adjusted)]  count:154296701 (estimated locally)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 40 [r12] 43 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 40 [r12] 43 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 58 433 59 10 80 (nil) [1 uses])
(note 59 58 60 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:84 _11 ] [84])
            (const_int 8 [0x8]))) "cmodules/fbgc_math.c":53:2 9 {*cmpqi_1}
     (nil))
(jump_insn 61 60 434 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 133)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 715827886 (nil))
 -> 133)
;;  succ:       11 [33.3% (adjusted)]  count:137152624 (estimated locally) (FALLTHRU)
;;              14 [66.7% (adjusted)]  count:274305244 (estimated locally)
;; lr  out 	 3 [bx] 7 [sp] 40 [r12] 43 [r15]
;; live  out 	 3 [bx] 7 [sp] 40 [r12] 43 [r15]

;; basic block 11, loop depth 0, count 137152624 (estimated locally), maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [33.3% (adjusted)]  count:137152624 (estimated locally) (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 40 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp] 40 [r12]
;; live  gen 	
;; live  kill	
(note 434 61 435 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(jump_insn 435 434 436 11 (set (pc)
        (label_ref 375)) 660 {jump}
     (nil)
 -> 375)
;;  succ:       31 [always]  count:137152624 (estimated locally)
;; lr  out 	 7 [sp] 40 [r12]
;; live  out 	 7 [sp] 40 [r12]

(barrier 436 435 65)
;; basic block 12, loop depth 0, count 82291576 (estimated locally), maybe hot
;; Invalid sum of incoming counts 182870162 (estimated locally), should be 82291576 (estimated locally)
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [always]  count:182870162 (estimated locally)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r15]
;; lr  use 	 7 [sp] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 7 [sp] 43 [r15]
;; live  gen 	 0 [ax] 5 [di] 20 [xmm0]
;; live  kill	
(code_label 65 436 66 12 82 (nil) [1 uses])
(note 66 65 67 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(debug_insn 67 66 68 12 (debug_marker) "cmodules/fbgc_math.c":58:4 -1
     (nil))
(insn 68 67 69 12 (set (reg:DI 5 di)
        (reg/f:DI 43 r15 [orig:83 _10 ] [83])) "cmodules/fbgc_math.c":58:19 66 {*movdi_internal}
     (nil))
(call_insn 69 68 71 12 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_double") [flags 0x41]  <function_decl 0x7f213e3db700 convert_fbgc_object_to_double>) [0 convert_fbgc_object_to_double S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":58:19 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_double") [flags 0x41]  <function_decl 0x7f213e3db700 convert_fbgc_object_to_double>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(debug_insn 71 69 72 12 (var_location:DF dbarg (reg/v:DF 20 xmm0 [orig:85 dbarg ] [85])) "cmodules/fbgc_math.c":58:19 -1
     (nil))
(debug_insn 72 71 74 12 (debug_marker) "cmodules/fbgc_math.c":59:4 -1
     (nil))
(call_insn 74 72 77 12 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":59:11 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(call_insn/j 77 74 78 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_double_object") [flags 0x41]  <function_decl 0x7f213e3e6d00 new_fbgc_double_object>) [0 new_fbgc_double_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":59:11 681 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_double_object") [flags 0x41]  <function_decl 0x7f213e3e6d00 new_fbgc_double_object>)
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
;;  succ:       EXIT [always]  count:82291576 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 78 77 80)
;; basic block 13, loop depth 0, count 82291576 (estimated locally), maybe hot
;; Invalid sum of incoming counts 329166290 (estimated locally), should be 82291576 (estimated locally)
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [80.0% (adjusted)]  count:329166290 (estimated locally)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r15]
;; lr  use 	 7 [sp] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 7 [sp] 43 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 25 [xmm5]
;; live  kill	 17 [flags]
(code_label 80 78 81 13 83 (nil) [1 uses])
(note 81 80 82 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(debug_insn 82 81 83 13 (debug_marker) "cmodules/fbgc_math.c":63:4 -1
     (nil))
(insn 83 82 84 13 (set (reg:DI 5 di)
        (reg/f:DI 43 r15 [orig:83 _10 ] [83])) "cmodules/fbgc_math.c":63:27 66 {*movdi_internal}
     (nil))
(call_insn 84 83 85 13 (set (parallel:TI [
                (expr_list:REG_DEP_TRUE (reg:DF 20 xmm0)
                    (const_int 0 [0]))
                (expr_list:REG_DEP_TRUE (reg:DF 21 xmm1)
                    (const_int 8 [0x8]))
            ])
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_complex") [flags 0x41]  <function_decl 0x7f213e3db800 convert_fbgc_object_to_complex>) [0 convert_fbgc_object_to_complex S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":63:27 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_complex") [flags 0x41]  <function_decl 0x7f213e3db800 convert_fbgc_object_to_complex>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 85 84 463 13 (set (reg:DF 23 xmm3 [142])
        (reg:DF 20 xmm0 [177])) "cmodules/fbgc_math.c":63:27 111 {*movdf_internal}
     (nil))
(insn 463 85 86 13 (set (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [10 %sfp+-64 S8 A64])
        (reg:DF 23 xmm3 [142])) "cmodules/fbgc_math.c":63:27 111 {*movdf_internal}
     (nil))
(insn 86 463 396 13 (set (reg:DF 20 xmm0 [143])
        (reg:DF 21 xmm1 [178])) "cmodules/fbgc_math.c":63:27 111 {*movdf_internal}
     (nil))
(debug_insn 396 86 391 13 (var_location:DI D#37 (mem/c:DI (plus:DI (reg/f:DI 7 sp)
            (const_int 16 [0x10])) [10 %sfp+-64 S8 A64])) -1
     (nil))
(debug_insn 391 396 395 13 (var_location:DI D#35 (debug_expr:DI D#37)) -1
     (nil))
(debug_insn 395 391 390 13 (var_location:DI D#36 (reg:DI 20 xmm0 [143])) -1
     (nil))
(debug_insn 390 395 90 13 (var_location:DI D#34 (debug_expr:DI D#36)) -1
     (nil))
(debug_insn 90 390 91 13 (debug_marker) "cmodules/fbgc_math.c":64:4 -1
     (nil))
(debug_insn 91 90 92 13 (var_location:DF z$real (subreg:DF (debug_expr:DI D#35) 0)) -1
     (nil))
(debug_insn 92 91 93 13 (var_location:DF D#32 (subreg:DF (debug_expr:DI D#34) 0)) -1
     (nil))
(insn 93 92 94 13 (parallel [
            (set (reg/f:DI 5 di [144])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) 191 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 19 frame)
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))
(insn 94 93 98 13 (set (reg/f:DI 4 si [145])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 64 [0x40]))) 187 {*leadi}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 19 frame)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))
(call_insn 98 94 99 13 (call (mem:QI (symbol_ref:DI ("sincos") [flags 0x41]  <function_decl 0x7f213e4ba400 __builtin_sincos>) [0 __builtin_sincos S1 A8])
        (const_int 0 [0])) 666 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("sincos") [flags 0x41]  <function_decl 0x7f213e4ba400 __builtin_sincos>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 99 98 461 13 (set (reg:DF 22 xmm2 [orig:128 sincostmp_107 ] [128])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [2  S8 A64])) 111 {*movdf_internal}
     (nil))
(insn 461 99 100 13 (set (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-72 S8 A64])
        (reg:DF 22 xmm2 [orig:128 sincostmp_107 ] [128])) 111 {*movdf_internal}
     (nil))
(insn 100 461 447 13 (set (reg:DF 25 xmm5 [orig:129 sincostmp_107+8 ] [129])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [2  S8 A64])) 111 {*movdf_internal}
     (nil))
(insn 447 100 474 13 (set (mem/c:DF (reg/f:DI 7 sp) [10 %sfp+-80 S8 A64])
        (reg:DF 25 xmm5 [orig:129 sincostmp_107+8 ] [129])) 111 {*movdf_internal}
     (nil))
(note 474 447 460 13 NOTE_INSN_DELETED)
(note 460 474 101 13 NOTE_INSN_DELETED)
(debug_insn 101 460 102 13 (var_location:DF z$8 (debug_expr:DF D#32)) -1
     (nil))
(debug_insn 102 101 103 13 (debug_marker:BLK) "cmodules/fbgc_math.c":22:20 -1
     (nil))
(debug_insn 103 102 104 13 (var_location:DF z$imag (debug_expr:DF D#32)) -1
     (nil))
(debug_insn 104 103 105 13 (debug_marker) "cmodules/fbgc_math.c":24:2 -1
     (nil))
(debug_insn 105 104 464 13 (debug_marker) "cmodules/fbgc_math.c":25:2 -1
     (nil))
(insn 464 105 106 13 (set (reg:DF 23 xmm3 [142])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [10 %sfp+-64 S8 A64])) "cmodules/fbgc_math.c":25:13 111 {*movdf_internal}
     (nil))
(insn 106 464 107 13 (set (reg:DF 20 xmm0)
        (reg:DF 23 xmm3 [142])) "cmodules/fbgc_math.c":25:13 111 {*movdf_internal}
     (nil))
(call_insn 107 106 108 13 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":25:13 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 108 107 109 13 (set (reg/v:DF 21 xmm1 [orig:116 r ] [116])
        (reg:DF 20 xmm0 [179])) "cmodules/fbgc_math.c":25:13 111 {*movdf_internal}
     (nil))
(debug_insn 109 108 110 13 (var_location:DF r (reg/v:DF 21 xmm1 [orig:116 r ] [116])) "cmodules/fbgc_math.c":25:13 -1
     (nil))
(debug_insn 110 109 111 13 (debug_marker) "cmodules/fbgc_math.c":26:2 -1
     (nil))
(debug_insn 111 110 112 13 (var_location:DF res$real (mult:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-72 S8 A64])
        (reg/v:DF 21 xmm1 [orig:116 r ] [116]))) "cmodules/fbgc_math.c":26:11 -1
     (nil))
(debug_insn 112 111 113 13 (debug_marker) "cmodules/fbgc_math.c":27:2 -1
     (nil))
(debug_insn 113 112 114 13 (var_location:DF res$imag (mult:DF (mem/c:DF (reg/f:DI 7 sp) [10 %sfp+-80 S8 A64])
        (reg/v:DF 21 xmm1 [orig:116 r ] [116]))) "cmodules/fbgc_math.c":27:11 -1
     (nil))
(debug_insn 114 113 115 13 (debug_marker) "cmodules/fbgc_math.c":28:2 -1
     (nil))
(debug_insn 115 114 116 13 (var_location:DF D#1 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 116 115 117 13 (var_location:DF res$real (debug_expr:DF D#1)) -1
     (nil))
(debug_insn 117 116 118 13 (var_location:DF D#2 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 118 117 119 13 (var_location:DF res$imag (debug_expr:DF D#2)) -1
     (nil))
(debug_insn 119 118 120 13 (var_location:DF r (clobber (const_int 0 [0]))) "cmodules/fbgc_math.c":64:9 -1
     (nil))
(debug_insn 120 119 121 13 (var_location:DF z$imag (clobber (const_int 0 [0]))) "cmodules/fbgc_math.c":64:9 -1
     (nil))
(debug_insn 121 120 122 13 (var_location:DF D#29 (clobber (const_int 0 [0]))) "cmodules/fbgc_math.c":64:9 -1
     (nil))
(debug_insn 122 121 123 13 (var_location:DF z$real (debug_expr:DF D#29)) "cmodules/fbgc_math.c":64:9 -1
     (nil))
(debug_insn 123 122 124 13 (var_location:DF D#30 (clobber (const_int 0 [0]))) "cmodules/fbgc_math.c":64:9 -1
     (nil))
(debug_insn 124 123 125 13 (var_location:DF z$8 (debug_expr:DF D#30)) "cmodules/fbgc_math.c":64:9 -1
     (nil))
(debug_insn 125 124 126 13 (debug_marker) "cmodules/fbgc_math.c":65:4 -1
     (nil))
(note 126 125 462 13 NOTE_INSN_DELETED)
(insn 462 126 127 13 (set (reg:DF 22 xmm2 [orig:128 sincostmp_107 ] [128])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-72 S8 A64])) "cmodules/fbgc_math.c":26:14 111 {*movdf_internal}
     (nil))
(insn 127 462 449 13 (set (reg:DF 22 xmm2 [orig:128 sincostmp_107 ] [128])
        (mult:DF (reg:DF 22 xmm2 [orig:128 sincostmp_107 ] [128])
            (reg/v:DF 21 xmm1 [orig:116 r ] [116]))) "cmodules/fbgc_math.c":26:14 818 {*fop_df_comm}
     (nil))
(insn 449 127 450 13 (set (reg:DF 20 xmm0 [147])
        (reg:DF 22 xmm2 [orig:128 sincostmp_107 ] [128])) "cmodules/fbgc_math.c":26:14 111 {*movdf_internal}
     (nil))
(note 450 449 473 13 NOTE_INSN_DELETED)
(note 473 450 128 13 NOTE_INSN_DELETED)
(insn 128 473 130 13 (set (reg:DF 21 xmm1)
        (mult:DF (reg/v:DF 21 xmm1 [orig:116 r ] [116])
            (mem/c:DF (reg/f:DI 7 sp) [10 %sfp+-80 S8 A64]))) "cmodules/fbgc_math.c":65:11 818 {*fop_df_comm}
     (nil))
(call_insn/j 130 128 131 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_complex_object") [flags 0x41]  <function_decl 0x7f213e3f0300 new_fbgc_complex_object>) [0 new_fbgc_complex_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":65:11 681 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_complex_object") [flags 0x41]  <function_decl 0x7f213e3f0300 new_fbgc_complex_object>)
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (expr_list:DF (use (reg:DF 21 xmm1))
            (nil))))
;;  succ:       EXIT [always]  count:82291576 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 131 130 133)
;; basic block 14, loop depth 0, count 82291576 (estimated locally), maybe hot
;; Invalid sum of incoming counts 274305244 (estimated locally), should be 82291576 (estimated locally)
;;  prev block 13, next block 15, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [66.7% (adjusted)]  count:274305244 (estimated locally)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 43 [r15]
;; lr  use 	 3 [bx] 7 [sp] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 3 [bx] 7 [sp] 43 [r15]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags] 40 [r12]
;; live  kill	
(code_label 133 131 134 14 84 (nil) [1 uses])
(note 134 133 135 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(debug_insn 135 134 136 14 (debug_marker) "cmodules/fbgc_math.c":69:4 -1
     (nil))
(insn 136 135 137 14 (set (reg/v:SI 6 bp [orig:88 sz ] [88])
        (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:83 _10 ] [83])
                (const_int 13 [0xd])) [5 MEM[(struct fbgc_tuple_object *)_10].size+0 S4 A8])) "cmodules/fbgc_math.c":69:11 67 {*movsi_internal}
     (nil))
(debug_insn 137 136 138 14 (var_location:SI sz (reg/v:SI 6 bp [orig:88 sz ] [88])) "cmodules/fbgc_math.c":69:11 -1
     (nil))
(debug_insn 138 137 139 14 (debug_marker) "cmodules/fbgc_math.c":70:4 -1
     (nil))
(insn 139 138 140 14 (set (reg:SI 5 di)
        (reg/v:SI 6 bp [orig:88 sz ] [88])) "cmodules/fbgc_math.c":70:34 67 {*movsi_internal}
     (nil))
(call_insn 140 139 141 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f213e3fec00 new_fbgc_tuple_object>) [0 new_fbgc_tuple_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":70:34 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f213e3fec00 new_fbgc_tuple_object>)
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 141 140 142 14 (set (reg/v/f:DI 40 r12 [orig:139 <retval> ] [139])
        (reg:DI 0 ax [180])) "cmodules/fbgc_math.c":70:34 66 {*movdi_internal}
     (nil))
(debug_insn 142 141 143 14 (var_location:DI res_tp (reg/v/f:DI 40 r12 [orig:139 <retval> ] [139])) "cmodules/fbgc_math.c":70:34 -1
     (nil))
(debug_insn 143 142 144 14 (debug_marker) "cmodules/fbgc_math.c":71:4 -1
     (nil))
(insn 144 143 145 14 (set (mem:SI (plus:DI (reg/v/f:DI 40 r12 [orig:139 <retval> ] [139])
                (const_int 13 [0xd])) [5 MEM[(struct fbgc_tuple_object *)res_tp_19].size+0 S4 A8])
        (reg/v:SI 6 bp [orig:88 sz ] [88])) "cmodules/fbgc_math.c":71:35 67 {*movsi_internal}
     (nil))
(debug_insn 145 144 146 14 (debug_marker) "cmodules/fbgc_math.c":72:4 -1
     (nil))
(insn 146 145 147 14 (set (reg/f:DI 3 bx [orig:89 _20 ] [89])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:140 arg ] [140]) [3 *arg_5(D)+0 S8 A64])) "cmodules/fbgc_math.c":72:39 66 {*movdi_internal}
     (nil))
(debug_insn 147 146 148 14 (var_location:DI D#31 (plus:DI (reg/f:DI 3 bx [orig:89 _20 ] [89])
        (const_int 17 [0x11]))) "cmodules/fbgc_math.c":72:26 -1
     (nil))
(debug_insn 148 147 149 14 (var_location:DI tp_content (debug_expr:DI D#31)) "cmodules/fbgc_math.c":72:26 -1
     (nil))
(debug_insn 149 148 150 14 (debug_marker) "cmodules/fbgc_math.c":72:67 -1
     (nil))
(debug_insn 150 149 151 14 (debug_marker) "cmodules/fbgc_math.c":74:4 -1
     (nil))
(debug_insn 151 150 152 14 (debug_marker) "cmodules/fbgc_math.c":74:8 -1
     (nil))
(debug_insn 152 151 153 14 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(debug_insn 153 152 154 14 (debug_marker) "cmodules/fbgc_math.c":74:22 -1
     (nil))
(insn 154 153 155 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 6 bp [orig:88 sz ] [88])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":74:4 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 155 154 156 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 375)
            (pc))) "cmodules/fbgc_math.c":74:4 659 {*jcc}
     (int_list:REG_BR_PROB 118111604 (nil))
 -> 375)
;;  succ:       15 [89.0% (guessed)]  count:73239503 (estimated locally) (FALLTHRU)
;;              31 [11.0% (guessed)]  count:9052073 (estimated locally)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12]

;; basic block 15, loop depth 0, count 73239503 (estimated locally), maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       14 [89.0% (guessed)]  count:73239503 (estimated locally) (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags] 41 [r13] 42 [r14] 43 [r15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12]
;; live  gen 	 3 [bx] 41 [r13] 42 [r14] 43 [r15]
;; live  kill	 17 [flags]
(note 156 155 157 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 157 156 5 15 (parallel [
            (set (reg:DI 3 bx [orig:136 ivtmp.93 ] [136])
                (plus:DI (reg/f:DI 3 bx [orig:89 _20 ] [89])
                    (const_int 17 [0x11])))
            (clobber (reg:CC 17 flags))
        ]) 191 {*adddi_1}
     (nil))
(insn 5 157 398 15 (set (reg/v:SI 43 r15 [orig:94 i ] [94])
        (const_int 0 [0])) "cmodules/fbgc_math.c":74:15 67 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 398 5 161 15 (set (reg:DI 42 r14 [166])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>)
                    ] UNSPEC_GOTPCREL)) [11  S8 A8])) 66 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>)
                    ] UNSPEC_GOTPCREL)) [11  S8 A8])
        (nil)))
(insn 161 398 192 15 (set (reg/f:DI 41 r13 [167])
        (symbol_ref:DI ("c_exp") [flags 0x3]  <function_decl 0x7f213dfa5c00 c_exp>)) "cmodules/fbgc_math.c":76:35 66 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref:DI ("c_exp") [flags 0x3]  <function_decl 0x7f213dfa5c00 c_exp>)
        (nil)))
;;  succ:       16 [always]  count:73239503 (estimated locally) (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]

;; basic block 16, loop depth 0, count 663665780 (estimated locally), maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [always]  count:73239503 (estimated locally) (FALLTHRU)
;;              18 [89.0% (guessed)]  count:590426281 (estimated locally) (DFS_BACK)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; lr  use 	 3 [bx] 7 [sp] 41 [r13] 42 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  kill	
(code_label 192 161 158 16 86 (nil) [1 uses])
(note 158 192 159 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(debug_insn 159 158 160 16 (var_location:SI i (reg/v:SI 43 r15 [orig:94 i ] [94])) -1
     (nil))
(debug_insn 160 159 406 16 (debug_marker) "cmodules/fbgc_math.c":76:5 -1
     (nil))
(insn 406 160 163 16 (set (reg:DI 2 cx)
        (reg/f:DI 41 r13 [167])) "cmodules/fbgc_math.c":76:35 66 {*movdi_internal}
     (nil))
(insn 163 406 164 16 (set (reg:DI 1 dx)
        (reg:DI 42 r14 [166])) "cmodules/fbgc_math.c":76:35 66 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>)
        (nil)))
(insn 164 163 165 16 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "cmodules/fbgc_math.c":76:35 67 {*movsi_internal}
     (nil))
(insn 165 164 166 16 (set (reg:DI 5 di)
        (reg:DI 3 bx [orig:136 ivtmp.93 ] [136])) "cmodules/fbgc_math.c":76:35 66 {*movdi_internal}
     (nil))
(call_insn 166 165 167 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("one_arg_math") [flags 0x3]  <function_decl 0x7f213dfac000 one_arg_math>) [0 one_arg_math S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":76:35 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("one_arg_math") [flags 0x3]  <function_decl 0x7f213dfac000 one_arg_math>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 167 166 168 16 (set (reg/v/f:DI 4 si [orig:92 result ] [92])
        (reg:DI 0 ax [181])) "cmodules/fbgc_math.c":76:35 66 {*movdi_internal}
     (nil))
(debug_insn 168 167 169 16 (var_location:DI result (reg/v/f:DI 4 si [orig:92 result ] [92])) "cmodules/fbgc_math.c":76:35 -1
     (nil))
(debug_insn 169 168 170 16 (debug_marker) "cmodules/fbgc_math.c":77:5 -1
     (nil))
(insn 170 169 171 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 4 si [orig:92 result ] [92])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":77:5 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 171 170 172 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 180)
            (pc))) "cmodules/fbgc_math.c":77:5 659 {*jcc}
     (int_list:REG_BR_PROB 1073312332 (nil))
 -> 180)
;;  succ:       18 [100.0% (guessed)]  count:663400314 (estimated locally)
;;              17 [0.0% (guessed)]  count:265466 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]

;; basic block 17, loop depth 0, count 265465 (estimated locally)
;;  prev block 16, next block 18, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       16 [0.0% (guessed)]  count:265466 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 7 [sp]
;; live  gen 	 1 [dx] 2 [cx] 4 [si] 5 [di]
;; live  kill	
(note 172 171 173 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(debug_insn 173 172 174 17 (debug_marker) "cmodules/fbgc_math.c":77:5 -1
     (nil))
(insn 174 173 175 17 (set (reg:DI 2 cx)
        (symbol_ref:DI ("__PRETTY_FUNCTION__.5776") [flags 0x2]  <var_decl 0x7f213dfa6990 __PRETTY_FUNCTION__>)) "cmodules/fbgc_math.c":77:5 66 {*movdi_internal}
     (nil))
(insn 175 174 176 17 (set (reg:SI 1 dx)
        (const_int 77 [0x4d])) "cmodules/fbgc_math.c":77:5 67 {*movsi_internal}
     (nil))
(insn 176 175 177 17 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f213e0b5900 *.LC9>)) "cmodules/fbgc_math.c":77:5 66 {*movdi_internal}
     (nil))
(insn 177 176 178 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f213e0b5990 *.LC10>)) "cmodules/fbgc_math.c":77:5 66 {*movdi_internal}
     (nil))
(call_insn 178 177 179 17 (call (mem:QI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f213e2a1c00 __assert_fail>) [0 __assert_fail S1 A8])
        (const_int 0 [0])) "cmodules/fbgc_math.c":77:5 666 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f213e2a1c00 __assert_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 179 178 180)
;; basic block 18, loop depth 0, count 663400315 (estimated locally), maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       16 [100.0% (guessed)]  count:663400314 (estimated locally)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; lr  use 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  gen 	 1 [dx] 3 [bx] 5 [di] 17 [flags] 43 [r15]
;; live  kill	 17 [flags]
(code_label 180 179 181 18 85 (nil) [1 uses])
(note 181 180 182 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(debug_insn 182 181 183 18 (debug_marker) "cmodules/fbgc_math.c":78:5 -1
     (nil))
(insn 183 182 185 18 (set (reg:SI 1 dx)
        (reg/v:SI 43 r15 [orig:94 i ] [94])) "cmodules/fbgc_math.c":78:5 67 {*movsi_internal}
     (nil))
(insn 185 183 186 18 (set (reg:DI 5 di)
        (reg/v/f:DI 40 r12 [orig:139 <retval> ] [139])) "cmodules/fbgc_math.c":78:5 66 {*movdi_internal}
     (nil))
(call_insn 186 185 187 18 (call (mem:QI (symbol_ref:DI ("set_object_in_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f213e3fee00 set_object_in_fbgc_tuple_object>) [0 set_object_in_fbgc_tuple_object S1 A8])
        (const_int 0 [0])) "cmodules/fbgc_math.c":78:5 666 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("set_object_in_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f213e3fee00 set_object_in_fbgc_tuple_object>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(debug_insn 187 186 188 18 (debug_marker) "cmodules/fbgc_math.c":74:31 -1
     (nil))
(insn 188 187 189 18 (parallel [
            (set (reg/v:SI 43 r15 [orig:94 i ] [94])
                (plus:SI (reg/v:SI 43 r15 [orig:94 i ] [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":74:31 190 {*addsi_1}
     (nil))
(debug_insn 189 188 190 18 (var_location:SI i (reg/v:SI 43 r15 [orig:94 i ] [94])) -1
     (nil))
(debug_insn 190 189 191 18 (debug_marker) "cmodules/fbgc_math.c":74:22 -1
     (nil))
(insn 191 190 193 18 (parallel [
            (set (reg:DI 3 bx [orig:136 ivtmp.93 ] [136])
                (plus:DI (reg:DI 3 bx [orig:136 ivtmp.93 ] [136])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) 191 {*adddi_1}
     (nil))
(insn 193 191 194 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 6 bp [orig:88 sz ] [88])
            (reg/v:SI 43 r15 [orig:94 i ] [94]))) "cmodules/fbgc_math.c":74:4 11 {*cmpsi_1}
     (nil))
(jump_insn 194 193 437 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 192)
            (pc))) "cmodules/fbgc_math.c":74:4 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 192)
;;  succ:       16 [89.0% (guessed)]  count:590426281 (estimated locally) (DFS_BACK)
;;              19 [11.0% (guessed)]  count:72974034 (estimated locally) (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]

;; basic block 19, loop depth 0, count 72974034 (estimated locally), maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       18 [11.0% (guessed)]  count:72974034 (estimated locally) (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 40 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp] 40 [r12]
;; live  gen 	
;; live  kill	
(note 437 194 438 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(jump_insn 438 437 439 19 (set (pc)
        (label_ref 375)) 660 {jump}
     (nil)
 -> 375)
;;  succ:       31 [always]  count:72974034 (estimated locally) (LOOP_EXIT)
;; lr  out 	 7 [sp] 40 [r12]
;; live  out 	 7 [sp] 40 [r12]

(barrier 439 438 198)
;; basic block 20, loop depth 0, count 82291576 (estimated locally), maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [20.0% (adjusted)]  count:82291575 (estimated locally)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r15]
;; lr  use 	 7 [sp] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 7 [sp] 43 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags] 40 [r12]
;; live  kill	 17 [flags]
(code_label 198 439 199 20 79 (nil) [1 uses])
(note 199 198 200 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(debug_insn 200 199 201 20 (debug_marker) "cmodules/fbgc_math.c":84:4 -1
     (nil))
(debug_insn 201 200 202 20 (var_location:DI m (reg/f:DI 43 r15 [orig:83 _10 ] [83])) "cmodules/fbgc_math.c":84:32 -1
     (nil))
(debug_insn 202 201 203 20 (debug_marker) "cmodules/fbgc_math.c":85:4 -1
     (nil))
(insn 203 202 204 20 (set (reg:SI 1 dx [orig:149 MEM[(struct fbgc_matrix_object *)_10].column ] [149])
        (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:83 _10 ] [83])
                (const_int 14 [0xe])) [5 MEM[(struct fbgc_matrix_object *)_10].column+0 S4 A8])) "cmodules/fbgc_math.c":85:33 67 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:83 _10 ] [83])
                (const_int 14 [0xe])) [5 MEM[(struct fbgc_matrix_object *)_10].column+0 S4 A8])
        (nil)))
(insn 204 203 205 20 (set (reg:SI 4 si [orig:150 MEM[(struct fbgc_matrix_object *)_10].row ] [150])
        (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:83 _10 ] [83])
                (const_int 10 [0xa])) [5 MEM[(struct fbgc_matrix_object *)_10].row+0 S4 A8])) "cmodules/fbgc_math.c":85:33 67 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:83 _10 ] [83])
                (const_int 10 [0xa])) [5 MEM[(struct fbgc_matrix_object *)_10].row+0 S4 A8])
        (nil)))
(insn 205 204 206 20 (set (reg:SI 5 di [orig:151 MEM[(struct fbgc_matrix_object *)_10].sub_type ] [151])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 43 r15 [orig:83 _10 ] [83])
                    (const_int 9 [0x9])) [0 MEM[(struct fbgc_matrix_object *)_10].sub_type+0 S1 A8]))) "cmodules/fbgc_math.c":85:33 119 {*zero_extendqisi2}
     (nil))
(insn 206 205 210 20 (set (reg:SI 2 cx)
        (const_int 10 [0xa])) "cmodules/fbgc_math.c":85:33 67 {*movsi_internal}
     (nil))
(call_insn 210 206 211 20 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_matrix_object") [flags 0x41]  <function_decl 0x7f213e3fe100 new_fbgc_matrix_object>) [0 new_fbgc_matrix_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":85:33 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_matrix_object") [flags 0x41]  <function_decl 0x7f213e3fe100 new_fbgc_matrix_object>)
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
(insn 211 210 212 20 (set (reg/v/f:DI 40 r12 [orig:139 <retval> ] [139])
        (reg:DI 0 ax [182])) "cmodules/fbgc_math.c":85:33 66 {*movdi_internal}
     (nil))
(debug_insn 212 211 213 20 (var_location:DI res_m (reg/v/f:DI 40 r12 [orig:139 <retval> ] [139])) "cmodules/fbgc_math.c":85:33 -1
     (nil))
(debug_insn 213 212 214 20 (debug_marker) "cmodules/fbgc_math.c":87:4 -1
     (nil))
(insn 214 213 215 20 (set (reg:SI 1 dx [orig:82 prephitmp_7 ] [82])
        (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:83 _10 ] [83])
                (const_int 10 [0xa])) [5 MEM[(struct fbgc_matrix_object *)_10].row+0 S4 A8])) "cmodules/fbgc_math.c":87:17 67 {*movsi_internal}
     (nil))
(insn 215 214 451 20 (set (reg:SI 0 ax [orig:134 _139 ] [134])
        (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:83 _10 ] [83])
                (const_int 14 [0xe])) [5 MEM[(struct fbgc_matrix_object *)_10].column+0 S4 A8])) "cmodules/fbgc_math.c":87:24 67 {*movsi_internal}
     (nil))
(insn 451 215 216 20 (set (reg/v:SI 3 bx [orig:99 rc ] [99])
        (reg:SI 1 dx [orig:82 prephitmp_7 ] [82])) "cmodules/fbgc_math.c":87:11 67 {*movsi_internal}
     (nil))
(insn 216 451 452 20 (parallel [
            (set (reg/v:SI 3 bx [orig:99 rc ] [99])
                (mult:SI (reg/v:SI 3 bx [orig:99 rc ] [99])
                    (reg:SI 0 ax [orig:134 _139 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":87:11 317 {*mulsi3_1}
     (nil))
(insn 452 216 217 20 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 44 [0x2c])) [10 %sfp+-36 S4 A32])
        (reg/v:SI 3 bx [orig:99 rc ] [99])) "cmodules/fbgc_math.c":87:11 67 {*movsi_internal}
     (nil))
(debug_insn 217 452 218 20 (var_location:SI rc (mem/c:SI (plus:DI (reg/f:DI 7 sp)
            (const_int 44 [0x2c])) [10 %sfp+-36 S4 A32])) "cmodules/fbgc_math.c":87:11 -1
     (nil))
(debug_insn 218 217 219 20 (debug_marker) "cmodules/fbgc_math.c":89:4 -1
     (nil))
(debug_insn 219 218 220 20 (debug_marker) "cmodules/fbgc_math.c":91:4 -1
     (nil))
(debug_insn 220 219 221 20 (debug_marker) "cmodules/fbgc_math.c":91:8 -1
     (nil))
(debug_insn 221 220 222 20 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(debug_insn 222 221 7 20 (debug_marker) "cmodules/fbgc_math.c":91:22 -1
     (nil))
(insn 7 222 230 20 (set (reg/v:SI 6 bp [orig:87 i ] [87])
        (const_int 0 [0])) "cmodules/fbgc_math.c":91:15 67 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 230 7 453 20 (parallel [
            (set (reg/f:DI 5 di [orig:169 pretmp_151 ] [169])
                (plus:DI (reg/v/f:DI 40 r12 [orig:139 <retval> ] [139])
                    (const_int 14 [0xe])))
            (clobber (reg:CC 17 flags))
        ]) 191 {*adddi_1}
     (nil))
(insn 453 230 256 20 (set (mem/c:DI (reg/f:DI 7 sp) [10 %sfp+-80 S8 A64])
        (reg/f:DI 5 di [orig:169 pretmp_151 ] [169])) 66 {*movdi_internal}
     (nil))
(insn 256 453 454 20 (parallel [
            (set (reg/f:DI 5 di [170])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) 191 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 19 frame)
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))
(insn 454 256 476 20 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [10 %sfp+-32 S8 A64])
        (reg/f:DI 5 di [170])) 66 {*movdi_internal}
     (nil))
(insn 476 454 257 20 (set (reg:DI 3 bx [207])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 64 [0x40]))) 187 {*leadi}
     (nil))
(insn 257 476 223 20 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [10 %sfp+-24 S8 A64])
        (reg:DI 3 bx [207])) 66 {*movdi_internal}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 19 frame)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))
(insn 223 257 224 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:82 prephitmp_7 ] [82])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":91:4 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 224 223 440 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 332)
            (pc))) "cmodules/fbgc_math.c":91:4 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 332)
;;  succ:       29 [89.0% (guessed)]  count:73239503 (estimated locally)
;;              21 [11.0% (guessed)]  count:9052073 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]

;; basic block 21, loop depth 0, count 9052073 (estimated locally), maybe hot
;;  prev block 20, next block 22, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       20 [11.0% (guessed)]  count:9052073 (estimated locally) (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 40 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp] 40 [r12]
;; live  gen 	
;; live  kill	
(note 440 224 441 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(jump_insn 441 440 442 21 (set (pc)
        (label_ref 375)) 660 {jump}
     (nil)
 -> 375)
;;  succ:       31 [always]  count:9052073 (estimated locally)
;; lr  out 	 7 [sp] 40 [r12]
;; live  out 	 7 [sp] 40 [r12]

(barrier 442 441 337)
;; basic block 22, loop depth 0, count 592574083 (estimated locally), maybe hot
;;  prev block 21, next block 23, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       29 [99.8% (guessed)]  count:599636349 (estimated locally)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; lr  use 	 7 [sp] 43 [r15]
;; lr  def 	 17 [flags] 41 [r13] 42 [r14]
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  gen 	 41 [r13] 42 [r14]
;; live  kill	 17 [flags]
(code_label 337 442 228 22 93 (nil) [1 uses])
(note 228 337 229 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 229 228 6 22 (parallel [
            (set (reg/f:DI 41 r13 [orig:132 pretmp_124 ] [132])
                (plus:DI (reg/f:DI 43 r15 [orig:83 _10 ] [83])
                    (const_int 14 [0xe])))
            (clobber (reg:CC 17 flags))
        ]) 191 {*adddi_1}
     (nil))
(insn 6 229 317 22 (set (reg/v:SI 42 r14 [orig:90 j ] [90])
        (const_int 0 [0])) "cmodules/fbgc_math.c":92:16 67 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       23 [always]  count:592574083 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]

;; basic block 23, loop depth 0, count 5387037060 (estimated locally), maybe hot
;;  prev block 22, next block 24, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       22 [always]  count:592574083 (estimated locally) (FALLTHRU)
;;              26 [89.0% (guessed)]  count:3164345581 (estimated locally) (DFS_BACK)
;;              24 [89.0% (guessed)]  count:1630117415 (estimated locally) (DFS_BACK)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 41 [r13] 42 [r14] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags] 22 [xmm2]
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags] 22 [xmm2]
;; live  kill	 17 [flags]
(code_label 317 6 231 23 92 (nil) [2 uses])
(note 231 317 232 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(debug_insn 232 231 233 23 (var_location:SI j (reg/v:SI 42 r14 [orig:90 j ] [90])) -1
     (nil))
(debug_insn 233 232 234 23 (debug_marker) "cmodules/fbgc_math.c":93:6 -1
     (nil))
(insn 234 233 235 23 (parallel [
            (set (reg:SI 0 ax [152])
                (mult:SI (reg:SI 0 ax [orig:134 _139 ] [134])
                    (reg/v:SI 6 bp [orig:87 i ] [87])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":93:23 317 {*mulsi3_1}
     (nil))
(insn 235 234 236 23 (parallel [
            (set (reg/v:SI 0 ax [orig:101 index ] [101])
                (plus:SI (reg:SI 0 ax [152])
                    (reg/v:SI 42 r14 [orig:90 j ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":93:13 190 {*addsi_1}
     (nil))
(debug_insn 236 235 237 23 (var_location:SI index (reg/v:SI 0 ax [orig:101 index ] [101])) "cmodules/fbgc_math.c":93:13 -1
     (nil))
(debug_insn 237 236 238 23 (debug_marker) "cmodules/fbgc_math.c":94:6 -1
     (nil))
(debug_insn 238 237 239 23 (var_location:SI c_index (plus:SI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 44 [0x2c])) [10 %sfp+-36 S4 A32])
        (reg/v:SI 0 ax [orig:101 index ] [101]))) "cmodules/fbgc_math.c":94:13 -1
     (nil))
(debug_insn 239 238 240 23 (debug_marker) "cmodules/fbgc_math.c":96:6 -1
     (nil))
(insn 240 239 241 23 (set (reg:DI 2 cx [orig:153 index ] [153])
        (zero_extend:DI (reg/v:SI 0 ax [orig:101 index ] [101]))) "cmodules/fbgc_math.c":96:46 114 {*zero_extendsidi2}
     (nil))
(insn 241 240 242 23 (parallel [
            (set (reg:DI 2 cx [154])
                (ashift:DI (reg:DI 2 cx [orig:153 index ] [153])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":96:46 520 {*ashldi3_1}
     (nil))
(note 242 241 243 23 NOTE_INSN_DELETED)
(insn 243 242 244 23 (set (reg:DF 22 xmm2 [orig:107 _48 ] [107])
        (mem:DF (plus:DI (plus:DI (reg/f:DI 41 r13 [orig:132 pretmp_124 ] [132])
                    (reg:DI 2 cx [154]))
                (const_int 4 [0x4])) [2 *_47+0 S8 A64])) "cmodules/fbgc_math.c":96:15 111 {*movdf_internal}
     (nil))
(debug_insn 244 243 245 23 (var_location:DF z$real (reg:DF 22 xmm2 [orig:107 _48 ] [107])) "cmodules/fbgc_math.c":96:13 -1
     (nil))
(debug_insn 245 244 455 23 (debug_marker) "cmodules/fbgc_math.c":97:6 -1
     (nil))
(insn 455 245 246 23 (set (reg/f:DI 1 dx [orig:169 pretmp_151 ] [169])
        (mem/c:DI (reg/f:DI 7 sp) [10 %sfp+-80 S8 A64])) 66 {*movdi_internal}
     (nil))
(insn 246 455 247 23 (set (reg/f:DI 3 bx [orig:133 _135 ] [133])
        (plus:DI (plus:DI (reg/f:DI 1 dx [orig:169 pretmp_151 ] [169])
                (reg:DI 2 cx [154]))
            (const_int 4 [0x4]))) 187 {*leadi}
     (nil))
(insn 247 246 248 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (plus:DI (reg/f:DI 43 r15 [orig:83 _10 ] [83])
                    (const_int 9 [0x9])) [0 MEM[(struct fbgc_matrix_object *)_10].sub_type+0 S1 A8])
            (const_int 5 [0x5]))) "cmodules/fbgc_math.c":97:8 9 {*cmpqi_1}
     (nil))
(jump_insn 248 247 249 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 301)
            (pc))) "cmodules/fbgc_math.c":97:8 659 {*jcc}
     (int_list:REG_BR_PROB 708669604 (nil))
 -> 301)
;;  succ:       24 [34.0% (guessed)]  count:1831592620 (estimated locally) (FALLTHRU)
;;              26 [66.0% (guessed)]  count:3555444440 (estimated locally)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 22 [xmm2] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 22 [xmm2] 40 [r12] 41 [r13] 42 [r14] 43 [r15]

;; basic block 24, loop depth 0, count 1831592600 (estimated locally), maybe hot
;;  prev block 23, next block 25, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       23 [34.0% (guessed)]  count:1831592620 (estimated locally) (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 22 [xmm2] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 22 [xmm2] 41 [r13] 42 [r14] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 42 [r14] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 22 [xmm2] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags] 20 [xmm0] 21 [xmm1] 22 [xmm2] 24 [xmm4] 42 [r14]
;; live  kill	 17 [flags]
(note 249 248 470 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 470 249 250 24 (set (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [10 %sfp+-48 S8 A64])
        (reg:DF 22 xmm2 [orig:107 _48 ] [107])) 111 {*movdf_internal}
     (nil))
(debug_insn 250 470 251 24 (debug_marker) "cmodules/fbgc_math.c":98:7 -1
     (nil))
(note 251 250 456 24 NOTE_INSN_DELETED)
(insn 456 251 252 24 (set (reg/v:SI 1 dx [orig:99 rc ] [99])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 44 [0x2c])) [10 %sfp+-36 S4 A32])) "cmodules/fbgc_math.c":98:47 67 {*movsi_internal}
     (nil))
(insn 252 456 253 24 (set (reg:DI 0 ax [orig:156 c_index ] [156])
        (zero_extend:DI (plus:SI (reg/v:SI 1 dx [orig:99 rc ] [99])
                (reg/v:SI 0 ax [orig:101 index ] [101])))) "cmodules/fbgc_math.c":98:47 187 {*leadi}
     (nil))
(insn 253 252 255 24 (parallel [
            (set (reg:DI 0 ax [157])
                (ashift:DI (reg:DI 0 ax [orig:156 c_index ] [156])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":98:47 520 {*ashldi3_1}
     (nil))
(debug_insn 255 253 258 24 (var_location:DF D#33 (mem:DF (plus:DI (plus:DI (reg/f:DI 41 r13 [orig:132 pretmp_124 ] [132])
                (reg:DI 0 ax [157]))
            (const_int 4 [0x4])) [2 *_53+0 S8 A64])) "cmodules/fbgc_math.c":98:16 -1
     (nil))
(insn 258 255 468 24 (set (reg:DF 20 xmm0 [orig:160 *_53 ] [160])
        (mem:DF (plus:DI (plus:DI (reg/f:DI 41 r13 [orig:132 pretmp_124 ] [132])
                    (reg:DI 0 ax [157]))
                (const_int 4 [0x4])) [2 *_53+0 S8 A64])) 111 {*movdf_internal}
     (expr_list:REG_EQUIV (mem:DF (plus:DI (plus:DI (reg/f:DI 41 r13 [orig:132 pretmp_124 ] [132])
                    (reg:DI 0 ax [157]))
                (const_int 4 [0x4])) [2 *_53+0 S8 A64])
        (nil)))
(insn 468 258 259 24 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [10 %sfp+-56 S8 A64])
        (reg:DI 0 ax [157])) 66 {*movdi_internal}
     (nil))
(insn 259 468 412 24 (set (reg:DI 4 si)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [10 %sfp+-24 S8 A64])) 66 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 19 frame)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))
(insn 412 259 262 24 (set (reg:DI 5 di)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [10 %sfp+-32 S8 A64])) 66 {*movdi_internal}
     (nil))
(call_insn 262 412 263 24 (call (mem:QI (symbol_ref:DI ("sincos") [flags 0x41]  <function_decl 0x7f213e4ba400 __builtin_sincos>) [0 __builtin_sincos S1 A8])
        (const_int 0 [0])) 666 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("sincos") [flags 0x41]  <function_decl 0x7f213e4ba400 __builtin_sincos>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 263 262 466 24 (set (reg:DF 21 xmm1 [orig:130 sincostmp_111 ] [130])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [2  S8 A64])) 111 {*movdf_internal}
     (nil))
(insn 466 263 264 24 (set (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [10 %sfp+-64 S8 A64])
        (reg:DF 21 xmm1 [orig:130 sincostmp_111 ] [130])) 111 {*movdf_internal}
     (nil))
(insn 264 466 457 24 (set (reg:DF 24 xmm4 [orig:131 sincostmp_111+8 ] [131])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [2  S8 A64])) 111 {*movdf_internal}
     (nil))
(insn 457 264 475 24 (set (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-72 S8 A64])
        (reg:DF 24 xmm4 [orig:131 sincostmp_111+8 ] [131])) 111 {*movdf_internal}
     (nil))
(note 475 457 465 24 NOTE_INSN_DELETED)
(note 465 475 265 24 NOTE_INSN_DELETED)
(debug_insn 265 465 266 24 (debug_marker) "cmodules/fbgc_math.c":99:7 -1
     (nil))
(debug_insn 266 265 267 24 (debug_marker:BLK) "cmodules/fbgc_math.c":22:20 -1
     (nil))
(debug_insn 267 266 268 24 (var_location:DF z$imag (debug_expr:DF D#33)) -1
     (nil))
(debug_insn 268 267 269 24 (debug_marker) "cmodules/fbgc_math.c":24:2 -1
     (nil))
(debug_insn 269 268 471 24 (debug_marker) "cmodules/fbgc_math.c":25:2 -1
     (nil))
(insn 471 269 270 24 (set (reg:DF 22 xmm2 [orig:107 _48 ] [107])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [10 %sfp+-48 S8 A64])) "cmodules/fbgc_math.c":25:13 111 {*movdf_internal}
     (nil))
(insn 270 471 271 24 (set (reg:DF 20 xmm0)
        (reg:DF 22 xmm2 [orig:107 _48 ] [107])) "cmodules/fbgc_math.c":25:13 111 {*movdf_internal}
     (nil))
(call_insn 271 270 273 24 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":25:13 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(debug_insn 273 271 274 24 (var_location:DF r (reg/v:DF 20 xmm0 [orig:121 r ] [121])) "cmodules/fbgc_math.c":25:13 -1
     (nil))
(debug_insn 274 273 275 24 (debug_marker) "cmodules/fbgc_math.c":26:2 -1
     (nil))
(debug_insn 275 274 276 24 (var_location:DF res$real (mult:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [10 %sfp+-64 S8 A64])
        (reg/v:DF 20 xmm0 [orig:121 r ] [121]))) "cmodules/fbgc_math.c":26:11 -1
     (nil))
(debug_insn 276 275 277 24 (debug_marker) "cmodules/fbgc_math.c":27:2 -1
     (nil))
(debug_insn 277 276 278 24 (var_location:DF res$imag (mult:DF (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-72 S8 A64])
        (reg/v:DF 20 xmm0 [orig:121 r ] [121]))) "cmodules/fbgc_math.c":27:11 -1
     (nil))
(debug_insn 278 277 279 24 (debug_marker) "cmodules/fbgc_math.c":28:2 -1
     (nil))
(debug_insn 279 278 280 24 (var_location:DF D#1 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 280 279 281 24 (var_location:DF res$real (debug_expr:DF D#1)) -1
     (nil))
(debug_insn 281 280 282 24 (var_location:DF D#2 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 282 281 283 24 (var_location:DF res$imag (debug_expr:DF D#2)) -1
     (nil))
(debug_insn 283 282 284 24 (var_location:DF r (clobber (const_int 0 [0]))) "cmodules/fbgc_math.c":99:36 -1
     (nil))
(debug_insn 284 283 285 24 (var_location:DF z$imag (clobber (const_int 0 [0]))) "cmodules/fbgc_math.c":99:36 -1
     (nil))
(debug_insn 285 284 467 24 (debug_marker) "cmodules/fbgc_math.c":100:7 -1
     (nil))
(insn 467 285 286 24 (set (reg:DF 21 xmm1 [orig:130 sincostmp_111 ] [130])
        (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [10 %sfp+-64 S8 A64])) "cmodules/fbgc_math.c":26:14 111 {*movdf_internal}
     (nil))
(insn 286 467 287 24 (set (reg:DF 21 xmm1 [161])
        (mult:DF (reg:DF 21 xmm1 [orig:130 sincostmp_111 ] [130])
            (reg/v:DF 20 xmm0 [orig:121 r ] [121]))) "cmodules/fbgc_math.c":26:14 818 {*fop_df_comm}
     (expr_list:REG_EQUIV (mem:DF (reg/f:DI 3 bx [orig:133 _135 ] [133]) [2 MEM[(double *)_135]+0 S8 A64])
        (nil)))
(insn 287 286 288 24 (set (mem:DF (reg/f:DI 3 bx [orig:133 _135 ] [133]) [2 MEM[(double *)_135]+0 S8 A64])
        (reg:DF 21 xmm1 [161])) "cmodules/fbgc_math.c":100:50 111 {*movdf_internal}
     (nil))
(debug_insn 288 287 458 24 (debug_marker) "cmodules/fbgc_math.c":101:7 -1
     (nil))
(note 458 288 472 24 NOTE_INSN_DELETED)
(note 472 458 289 24 NOTE_INSN_DELETED)
(insn 289 472 459 24 (set (reg:DF 20 xmm0 [162])
        (mult:DF (reg/v:DF 20 xmm0 [orig:121 r ] [121])
            (mem/c:DF (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])) [10 %sfp+-72 S8 A64]))) "cmodules/fbgc_math.c":27:14 818 {*fop_df_comm}
     (expr_list:REG_EQUIV (mem:DF (plus:DI (plus:DI (reg/f:DI 169 [ pretmp_151 ])
                    (reg:DI 0 ax [157]))
                (const_int 4 [0x4])) [2 *_58+0 S8 A64])
        (nil)))
(insn 459 289 469 24 (set (reg/f:DI 2 cx [orig:169 pretmp_151 ] [169])
        (mem/c:DI (reg/f:DI 7 sp) [10 %sfp+-80 S8 A64])) "cmodules/fbgc_math.c":101:52 66 {*movdi_internal}
     (nil))
(insn 469 459 290 24 (set (reg:DI 0 ax [157])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [10 %sfp+-56 S8 A64])) "cmodules/fbgc_math.c":101:52 66 {*movdi_internal}
     (nil))
(insn 290 469 291 24 (set (mem:DF (plus:DI (plus:DI (reg/f:DI 2 cx [orig:169 pretmp_151 ] [169])
                    (reg:DI 0 ax [157]))
                (const_int 4 [0x4])) [2 *_58+0 S8 A64])
        (reg:DF 20 xmm0 [162])) "cmodules/fbgc_math.c":101:52 111 {*movdf_internal}
     (nil))
(debug_insn 291 290 292 24 (debug_marker) "cmodules/fbgc_math.c":92:36 -1
     (nil))
(insn 292 291 293 24 (parallel [
            (set (reg/v:SI 42 r14 [orig:90 j ] [90])
                (plus:SI (reg/v:SI 42 r14 [orig:90 j ] [90])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":92:36 190 {*addsi_1}
     (nil))
(debug_insn 293 292 294 24 (var_location:SI j (reg/v:SI 42 r14 [orig:90 j ] [90])) -1
     (nil))
(debug_insn 294 293 295 24 (debug_marker) "cmodules/fbgc_math.c":92:23 -1
     (nil))
(insn 295 294 296 24 (set (reg:SI 0 ax [orig:134 _139 ] [134])
        (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:83 _10 ] [83])
                (const_int 14 [0xe])) [5 MEM[(struct fbgc_matrix_object *)_10].column+0 S4 A8])) "cmodules/fbgc_math.c":92:26 67 {*movsi_internal}
     (nil))
(insn 296 295 297 24 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 42 r14 [orig:90 j ] [90])
            (reg:SI 0 ax [orig:134 _139 ] [134]))) "cmodules/fbgc_math.c":92:5 11 {*cmpsi_1}
     (nil))
(jump_insn 297 296 443 24 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 317)
            (pc))) "cmodules/fbgc_math.c":92:5 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 317)
;;  succ:       23 [89.0% (guessed)]  count:1630117415 (estimated locally) (DFS_BACK)
;;              25 [11.0% (guessed)]  count:201475185 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]

;; basic block 25, loop depth 0, count 201475185 (estimated locally), maybe hot
;;  prev block 24, next block 26, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       24 [11.0% (guessed)]  count:201475185 (estimated locally) (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  gen 	
;; live  kill	
(note 443 297 444 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(jump_insn 444 443 445 25 (set (pc)
        (label_ref 320)) 660 {jump}
     (nil)
 -> 320)
;;  succ:       27 [always]  count:201475185 (estimated locally) (LOOP_EXIT)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 43 [r15]

(barrier 445 444 301)
;; basic block 26, loop depth 0, count 3555444471 (estimated locally), maybe hot
;;  prev block 25, next block 27, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       23 [66.0% (guessed)]  count:3555444440 (estimated locally)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 22 [xmm2] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; lr  use 	 3 [bx] 7 [sp] 22 [xmm2] 42 [r14] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 42 [r14] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 22 [xmm2] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  gen 	 0 [ax] 17 [flags] 20 [xmm0] 42 [r14]
;; live  kill	 17 [flags]
(code_label 301 445 302 26 89 (nil) [1 uses])
(note 302 301 303 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(debug_insn 303 302 304 26 (debug_marker) "cmodules/fbgc_math.c":103:11 -1
     (nil))
(insn 304 303 305 26 (set (reg:DF 20 xmm0)
        (reg:DF 22 xmm2 [orig:107 _48 ] [107])) "cmodules/fbgc_math.c":103:57 111 {*movdf_internal}
     (nil))
(call_insn 305 304 306 26 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":103:57 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7f213e482700 exp>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(note 306 305 307 26 NOTE_INSN_DELETED)
(insn 307 306 308 26 (set (mem:DF (reg/f:DI 3 bx [orig:133 _135 ] [133]) [2 MEM[(double *)_135]+0 S8 A64])
        (reg:DF 20 xmm0 [184])) "cmodules/fbgc_math.c":103:54 111 {*movdf_internal}
     (nil))
(debug_insn 308 307 309 26 (debug_marker) "cmodules/fbgc_math.c":92:36 -1
     (nil))
(insn 309 308 310 26 (parallel [
            (set (reg/v:SI 42 r14 [orig:90 j ] [90])
                (plus:SI (reg/v:SI 42 r14 [orig:90 j ] [90])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":92:36 190 {*addsi_1}
     (nil))
(debug_insn 310 309 311 26 (var_location:SI j (reg/v:SI 42 r14 [orig:90 j ] [90])) -1
     (nil))
(debug_insn 311 310 312 26 (debug_marker) "cmodules/fbgc_math.c":92:23 -1
     (nil))
(insn 312 311 313 26 (set (reg:SI 0 ax [orig:134 _139 ] [134])
        (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:83 _10 ] [83])
                (const_int 14 [0xe])) [5 MEM[(struct fbgc_matrix_object *)_10].column+0 S4 A8])) "cmodules/fbgc_math.c":92:26 67 {*movsi_internal}
     (nil))
(insn 313 312 314 26 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:134 _139 ] [134])
            (reg/v:SI 42 r14 [orig:90 j ] [90]))) "cmodules/fbgc_math.c":92:5 11 {*cmpsi_1}
     (nil))
(jump_insn 314 313 320 26 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 317)
            (pc))) "cmodules/fbgc_math.c":92:5 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 317)
;;  succ:       23 [89.0% (guessed)]  count:3164345581 (estimated locally) (DFS_BACK)
;;              27 [11.0% (guessed)]  count:391098890 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]

;; basic block 27, loop depth 0, count 592574075 (estimated locally), maybe hot
;;  prev block 26, next block 28, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       26 [11.0% (guessed)]  count:391098890 (estimated locally) (FALLTHRU,LOOP_EXIT)
;;              25 [always]  count:201475185 (estimated locally) (LOOP_EXIT)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; lr  use 	 7 [sp] 43 [r15]
;; lr  def 	 1 [dx]
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  gen 	 1 [dx]
;; live  kill	
(code_label 320 314 321 27 91 (nil) [1 uses])
(note 321 320 322 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 322 321 345 27 (set (reg:SI 1 dx [orig:82 prephitmp_7 ] [82])
        (mem:SI (plus:DI (reg/f:DI 43 r15 [orig:83 _10 ] [83])
                (const_int 10 [0xa])) [5 MEM[(struct fbgc_matrix_object *)_10].row+0 S4 A8])) 67 {*movsi_internal}
     (nil))
;;  succ:       28 [always]  count:592574075 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]

;; basic block 28, loop depth 0, count 592574078 (estimated locally), maybe hot
;; Invalid sum of incoming counts 657757224 (estimated locally), should be 592574078 (estimated locally)
;;  prev block 27, next block 29, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [always]  count:592574075 (estimated locally) (FALLTHRU)
;;              30 [89.0% (guessed)]  count:65183149 (estimated locally)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 6 [bp] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  gen 	 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(code_label 345 322 323 28 94 (nil) [1 uses])
(note 323 345 324 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(debug_insn 324 323 325 28 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 325 324 326 28 (var_location:SI j (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 326 325 327 28 (debug_marker) "cmodules/fbgc_math.c":91:32 -1
     (nil))
(insn 327 326 328 28 (parallel [
            (set (reg/v:SI 6 bp [orig:87 i ] [87])
                (plus:SI (reg/v:SI 6 bp [orig:87 i ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":91:32 190 {*addsi_1}
     (nil))
(debug_insn 328 327 329 28 (var_location:SI i (reg/v:SI 6 bp [orig:87 i ] [87])) -1
     (nil))
(debug_insn 329 328 330 28 (debug_marker) "cmodules/fbgc_math.c":91:22 -1
     (nil))
(insn 330 329 331 28 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 6 bp [orig:87 i ] [87])
            (reg:SI 1 dx [orig:82 prephitmp_7 ] [82]))) "cmodules/fbgc_math.c":91:4 11 {*cmpsi_1}
     (nil))
(jump_insn 331 330 332 28 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 375)
            (pc))) "cmodules/fbgc_math.c":91:4 659 {*jcc}
     (int_list:REG_BR_PROB 118111604 (nil))
 -> 375)
;;  succ:       29 [89.0% (guessed)]  count:527390930 (estimated locally) (FALLTHRU,DFS_BACK)
;;              31 [11.0% (guessed)]  count:65183148 (estimated locally) (LOOP_EXIT)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]

;; basic block 29, loop depth 0, count 600630427 (estimated locally), maybe hot
;;  prev block 28, next block 30, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       20 [89.0% (guessed)]  count:73239503 (estimated locally)
;;              28 [89.0% (guessed)]  count:527390930 (estimated locally) (FALLTHRU,DFS_BACK)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 332 331 333 29 87 (nil) [1 uses])
(note 333 332 334 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(debug_insn 334 333 335 29 (var_location:SI i (reg/v:SI 6 bp [orig:87 i ] [87])) -1
     (nil))
(debug_insn 335 334 336 29 (var_location:SI j (const_int 0 [0])) -1
     (nil))
(debug_insn 336 335 338 29 (debug_marker) "cmodules/fbgc_math.c":92:23 -1
     (nil))
(insn 338 336 339 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:134 _139 ] [134])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":92:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 339 338 340 29 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 337)
            (pc))) "cmodules/fbgc_math.c":92:5 659 {*jcc}
     (int_list:REG_BR_PROB 1071964724 (nil))
 -> 337)
;;  succ:       22 [99.8% (guessed)]  count:599636349 (estimated locally)
;;              30 [0.2% (guessed)]  count:994078 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]

;; basic block 30, loop depth 0, count 73239493 (estimated locally), maybe hot
;; Invalid sum of incoming counts 994078 (estimated locally), should be 73239493 (estimated locally)
;;  prev block 29, next block 31, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       29 [0.2% (guessed)]  count:994078 (estimated locally) (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 6 [bp] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  gen 	 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(note 340 339 341 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(debug_insn 341 340 342 30 (debug_marker) "cmodules/fbgc_math.c":91:32 -1
     (nil))
(insn 342 341 343 30 (parallel [
            (set (reg/v:SI 6 bp [orig:87 i ] [87])
                (plus:SI (reg/v:SI 6 bp [orig:87 i ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":91:32 190 {*addsi_1}
     (nil))
(debug_insn 343 342 344 30 (var_location:SI i (reg/v:SI 6 bp [orig:87 i ] [87])) -1
     (nil))
(debug_insn 344 343 346 30 (debug_marker) "cmodules/fbgc_math.c":91:22 -1
     (nil))
(insn 346 344 347 30 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:82 prephitmp_7 ] [82])
            (reg/v:SI 6 bp [orig:87 i ] [87]))) "cmodules/fbgc_math.c":91:4 11 {*cmpsi_1}
     (nil))
(jump_insn 347 346 375 30 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 345)
            (pc))) "cmodules/fbgc_math.c":91:4 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 345)
;;  succ:       28 [89.0% (guessed)]  count:65183149 (estimated locally)
;;              31 [11.0% (guessed)]  count:8056344 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 40 [r12] 43 [r15]

;; basic block 31, loop depth 0, count 908893201 (estimated locally), maybe hot
;; Invalid sum of incoming counts 1274633540 (estimated locally), should be 908893201 (estimated locally)
;;  prev block 30, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [61.7% (guessed)]  count:662283960 (estimated locally)
;;              6 [55.6% (adjusted)]  count:228587706 (estimated locally)
;;              30 [11.0% (guessed)]  count:8056344 (estimated locally) (FALLTHRU,LOOP_EXIT)
;;              9 [always]  count:82291578 (estimated locally)
;;              14 [11.0% (guessed)]  count:9052073 (estimated locally)
;;              11 [always]  count:137152624 (estimated locally)
;;              19 [always]  count:72974034 (estimated locally) (LOOP_EXIT)
;;              28 [11.0% (guessed)]  count:65183148 (estimated locally) (LOOP_EXIT)
;;              21 [always]  count:9052073 (estimated locally)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 40 [r12]
;; lr  use 	 7 [sp] 40 [r12]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp] 40 [r12]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 375 347 378 31 77 (nil) [8 uses])
(note 378 375 376 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 376 378 377 31 (set (reg/i:DI 0 ax)
        (reg/v/f:DI 40 r12 [orig:139 <retval> ] [139])) "cmodules/fbgc_math.c":123:1 66 {*movdi_internal}
     (nil))
(insn 377 376 446 31 (use (reg/i:DI 0 ax)) "cmodules/fbgc_math.c":123:1 -1
     (nil))
;;  succ:       EXIT [always]  count:908893201 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 446 377 0 NOTE_INSN_DELETED)

;; Function fbgc_cos (fbgc_cos, funcdef_no=60, decl_uid=5693, cgraph_uid=61, symbol_order=64)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-56, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (1) UBsBz {*sibcall_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (1) UBsBz {*sibcall_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 370:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 137:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 150:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 152:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 153:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 164:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            alt=0: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=2,overall=15,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            alt=0: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=2,overall=15,losers=2,rld_nregs=2
	 Choosing alt 2 in insn 192:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=189 from oldreg=99, assigning class GENERAL_REGS to r189
  192: {r189:SI=r189:SI*r172:SI;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  418: r189:SI=r119:SI
    Inserting insn reload after:
  419: r99:SI=r189:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 419:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=0,overall=15,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=1,overall=15,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=18,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=16,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=16,losers=2 -- refuse
	 Choosing alt 3 in insn 206:  (0) r  (1) r  (2) le {*adddi_1}
      Creating newreg=190 from oldreg=174, assigning class GENERAL_REGS to r190
  206: {r190:DI=r129:DI+0xe;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload after:
  420: r174:DI=r190:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 420:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 205:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
  Commutative operand exchange in insn 210
	 Choosing alt 2 in insn 210:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=191 from oldreg=144, assigning class GENERAL_REGS to r191
  210: {r191:SI=r191:SI*r172:SI;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  421: r191:SI=r118:SI
    Inserting insn reload after:
  422: r144:SI=r191:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 216:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 219:  (0) v  (1) m {*movdf_internal}
      Creating newreg=192 from oldreg=174, assigning class GENERAL_REGS to address r192
	   Change to class INDEX_REGS for r192
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) =r  (1) Ts {*leadi}
  222: r121:DI=r192:DI+r146:DI+0x4
      REG_DEAD r146:DI
    Inserting insn reload before:
  423: r192:DI=r174:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 423:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) qm  (1) qn {*cmpqi_1}
      Creating newreg=193 from oldreg=99, assigning class GENERAL_REGS to address r193
	   Change to class INDEX_REGS for r193
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) Ts {*leadi}
  228: r148:DI=zero_extend(r193:SI+r101:SI)
      REG_DEAD r101:SI
    Inserting insn reload before:
  424: r193:SI=r99:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 229:  (0) r  (1) l  (2) M {*ashldi3_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=616,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=625,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=630,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 239:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 247:  (0) m  (1) v {*movdf_internal}
      Creating newreg=194 from oldreg=174, assigning class GENERAL_REGS to address r194
	   Change to class INDEX_REGS for r194
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 249:  (0) m  (1) v {*movdf_internal}
  249: [r194:DI+r149:DI+0x4]=r187:DF
      REG_DEAD r187:DF
      REG_DEAD r149:DI
    Inserting insn reload before:
  425: r194:DI=r174:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 425:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 252:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 267:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 269:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 287:  (0) rm  (1) 0  (2) re {*addsi_1}
      Creating newreg=195 from oldreg=118, assigning class GENERAL_REGS to r195
      Making reload reg 195 for reg 118 optional
  287: {r195:SI=r195:SI+0x1;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  426: r195:SI=r118:SI
    Inserting insn reload after:
  427: r118:SI=r195:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 427:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) rm  (1) re {*cmpsi_1}
      Creating newreg=196 from oldreg=118, assigning class GENERAL_REGS to r196
      Making reload reg 196 for reg 118 optional
  290: flags:CC=cmp(r196:SI,r119:SI)
    Inserting insn reload before:
  428: r196:SI=r118:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) r {*cmpsi_ccno_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 302:  (0) rm  (1) 0  (2) re {*addsi_1}
      Creating newreg=197 from oldreg=118, assigning class GENERAL_REGS to r197
      Making reload reg 197 for reg 118 optional
  302: {r197:SI=r197:SI+0x1;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  429: r197:SI=r118:SI
    Inserting insn reload after:
  430: r118:SI=r197:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 430:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 429:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 306:  (0) r  (1) rm {*cmpsi_1}
      Creating newreg=198 from oldreg=118, assigning class GENERAL_REGS to r198
      Making reload reg 198 for reg 118 optional
  306: flags:CC=cmp(r119:SI,r198:SI)
    Inserting insn reload before:
  431: r198:SI=r118:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 431:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 17
   Insn 154: point = 0, n_alt = 0
   Insn 153: point = 0, n_alt = 4
   Insn 152: point = 0, n_alt = 4
   Insn 151: point = 0, n_alt = 0
   Insn 150: point = 0, n_alt = 4
  BB 31
   Insn 338: point = 0, n_alt = -1
   Insn 337: point = 0, n_alt = -2
  BB 21
   Insn 412: point = 2, n_alt = -1
  BB 19
   Insn 409: point = 3, n_alt = -1
  BB 18
   Insn 170: point = 4, n_alt = -1
   Insn 169: point = 4, n_alt = 0
   Insn 167: point = 4, n_alt = 0
   Insn 164: point = 5, n_alt = 0
   Insn 162: point = 6, n_alt = 0
   Insn 161: point = 6, n_alt = -2
   Insn 160: point = 6, n_alt = -2
   Insn 159: point = 7, n_alt = -2
  BB 16
   Insn 147: point = 8, n_alt = -1
   Insn 146: point = 8, n_alt = 0
   Insn 143: point = 8, n_alt = -2
   Insn 394: point = 10, n_alt = -2
   Insn 142: point = 11, n_alt = 0
   Insn 141: point = 11, n_alt = -2
   Insn 140: point = 11, n_alt = 0
   Insn 139: point = 11, n_alt = -2
   Insn 380: point = 11, n_alt = -2
  BB 15
   Insn 137: point = 12, n_alt = 4
   Insn 370: point = 13, n_alt = 3
   Insn 5: point = 14, n_alt = 0
   Insn 133: point = 15, n_alt = 0
  BB 11
   Insn 406: point = 18, n_alt = -1
  BB 14
   Insn 131: point = 19, n_alt = -1
   Insn 130: point = 19, n_alt = 0
   Insn 122: point = 19, n_alt = 3
   Insn 120: point = 21, n_alt = 1
   Insn 117: point = 21, n_alt = -2
   Insn 393: point = 23, n_alt = -2
   Insn 116: point = 24, n_alt = 0
   Insn 115: point = 24, n_alt = -2
   Insn 112: point = 24, n_alt = 0
  BB 10
   Insn 61: point = 27, n_alt = -1
   Insn 60: point = 27, n_alt = 0
  BB 9
   Insn 403: point = 29, n_alt = -1
  BB 28
   Insn 291: point = 30, n_alt = -1
   Insn 290: point = 30, n_alt = 0
   Insn 428: point = 31, n_alt = 0
   Insn 427: point = 32, n_alt = 1
   Insn 287: point = 34, n_alt = 1
   Insn 426: point = 35, n_alt = 0
  BB 30
   Insn 307: point = 38, n_alt = -1
   Insn 306: point = 38, n_alt = 1
   Insn 431: point = 39, n_alt = 0
   Insn 430: point = 40, n_alt = 1
   Insn 302: point = 42, n_alt = 1
   Insn 429: point = 43, n_alt = 0
  BB 27
   Insn 282: point = 46, n_alt = 0
  BB 25
   Insn 415: point = 48, n_alt = -1
  BB 26
   Insn 274: point = 49, n_alt = -1
   Insn 273: point = 49, n_alt = 0
   Insn 269: point = 49, n_alt = 0
   Insn 267: point = 50, n_alt = 15
   Insn 398: point = 51, n_alt = -2
   Insn 265: point = 52, n_alt = 0
   Insn 264: point = 52, n_alt = -2
  BB 23
   Insn 224: point = 54, n_alt = -1
   Insn 223: point = 54, n_alt = 0
   Insn 222: point = 54, n_alt = 0
   Insn 423: point = 56, n_alt = 3
   Insn 219: point = 57, n_alt = 14
   Insn 217: point = 58, n_alt = 0
   Insn 216: point = 60, n_alt = 3
   Insn 211: point = 61, n_alt = 0
   Insn 422: point = 63, n_alt = -2
	Hard reg 1 is preferable by r191 with profit 1000
   Insn 210: point = 65, n_alt = 2
   Insn 421: point = 66, n_alt = 0
  BB 24
   Insn 257: point = 68, n_alt = -1
   Insn 256: point = 68, n_alt = 0
   Insn 255: point = 68, n_alt = 0
   Insn 252: point = 69, n_alt = 0
   Insn 249: point = 70, n_alt = 15
   Insn 425: point = 71, n_alt = 3
   Insn 247: point = 72, n_alt = 15
   Insn 397: point = 73, n_alt = -2
   Insn 396: point = 74, n_alt = -2
   Insn 240: point = 75, n_alt = 0
   Insn 239: point = 75, n_alt = 14
   Insn 238: point = 75, n_alt = -2
   Insn 229: point = 76, n_alt = 1
   Insn 228: point = 78, n_alt = 0
   Insn 424: point = 80, n_alt = 0
  BB 22
   Insn 6: point = 82, n_alt = 0
   Insn 205: point = 83, n_alt = 3
  BB 29
   Insn 299: point = 85, n_alt = -1
   Insn 298: point = 85, n_alt = 0
  BB 20
   Insn 200: point = 86, n_alt = -1
   Insn 199: point = 86, n_alt = 0
   Insn 420: point = 86, n_alt = 5
   Insn 206: point = 88, n_alt = 3
   Insn 7: point = 89, n_alt = 1
   Insn 419: point = 90, n_alt = 1
   Insn 192: point = 92, n_alt = 2
   Insn 418: point = 93, n_alt = -2
	Hard reg 0 is preferable by r189 with profit 76
   Insn 191: point = 94, n_alt = 0
   Insn 190: point = 95, n_alt = 0
   Insn 187: point = 96, n_alt = -2
   Insn 395: point = 98, n_alt = -2
   Insn 186: point = 99, n_alt = 0
   Insn 185: point = 99, n_alt = -2
   Insn 184: point = 100, n_alt = -2
   Insn 183: point = 101, n_alt = -2
   Insn 182: point = 102, n_alt = 0
   Insn 181: point = 102, n_alt = 0
   Insn 180: point = 103, n_alt = 0
   Insn 179: point = 104, n_alt = 0
  BB 12
   Insn 77: point = 106, n_alt = 0
   Insn 76: point = 106, n_alt = -2
   Insn 75: point = 107, n_alt = -2
   Insn 388: point = 109, n_alt = -2
   Insn 74: point = 110, n_alt = 0
   Insn 73: point = 110, n_alt = -2
   Insn 70: point = 111, n_alt = -2
   Insn 387: point = 113, n_alt = -2
   Insn 69: point = 114, n_alt = 0
   Insn 68: point = 114, n_alt = -2
  BB 7
   Insn 400: point = 116, n_alt = -1
  BB 6
   Insn 47: point = 117, n_alt = -1
   Insn 46: point = 117, n_alt = 0
  BB 13
   Insn 106: point = 119, n_alt = 0
   Insn 105: point = 119, n_alt = -2
   Insn 104: point = 120, n_alt = -2
   Insn 392: point = 121, n_alt = -2
   Insn 98: point = 122, n_alt = -2
   Insn 391: point = 124, n_alt = -2
   Insn 97: point = 125, n_alt = 0
   Insn 96: point = 125, n_alt = -2
   Insn 95: point = 126, n_alt = -2
   Insn 390: point = 127, n_alt = -2
   Insn 85: point = 128, n_alt = -2
   Insn 389: point = 130, n_alt = -2
   Insn 84: point = 131, n_alt = 0
   Insn 83: point = 131, n_alt = -2
  BB 8
   Insn 54: point = 133, n_alt = -1
   Insn 53: point = 133, n_alt = 0
  BB 5
   Insn 42: point = 135, n_alt = -1
   Insn 41: point = 135, n_alt = 0
  BB 4
   Insn 37: point = 136, n_alt = -1
  BB 3
   Insn 32: point = 137, n_alt = -1
   Insn 31: point = 137, n_alt = 0
   Insn 30: point = 137, n_alt = 4
   Insn 29: point = 138, n_alt = 3
  BB 2
   Insn 16: point = 140, n_alt = -1
   Insn 15: point = 140, n_alt = 0
   Insn 11: point = 141, n_alt = 2
   Insn 386: point = 142, n_alt = -2
   Insn 2: point = 143, n_alt = -2
   Insn 385: point = 145, n_alt = -2
 r82: [131..138] [114..118] [30..105] [25..28]
 r83: [133..137] [117..118] [27..28]
 r84: [110..111]
 r85: [106..107]
 r88: [19..24] [4..17]
 r89: [19..19] [16..17]
 r90: [49..82]
 r92: [6..8]
 r94: [4..14]
 r99: [30..90]
 r101: [79..81] [54..61]
 r107: [75..81] [52..57]
 r118: [44..89] [36..40] [30..32]
 r119: [85..95] [30..46]
 r120: [49..83]
 r121: [72..81] [50..54]
 r124: [4..15]
 r129: [133..141] [117..118] [27..96] [0..21]
 r130: [136..143] [20..28]
 r132: [126..128]
 r138: [119..122]
 r141: [101..104]
 r142: [100..103]
 r143: [99..102]
 r144: [62..63]
 r145: [59..60]
 r146: [55..58]
 r148: [77..78]
 r149: [70..76]
 r171: [4..13]
 r172: [82..94] [30..68]
 r173: [4..12]
 r174: [30..86]
 r175: [144..145]
 r176: [140..142]
 r177: [112..113]
 r178: [108..109]
 r179: [129..130]
 r180: [125..127]
 r181: [123..124]
 r182: [120..121]
 r183: [22..23]
 r184: [9..10]
 r185: [97..98]
 r186: [72..74]
 r187: [70..73]
 r188: [50..51]
 r189: [91..93]
 r190: [87..88]
 r191: [64..66]
 r192: [55..56]
 r193: [79..80]
 r194: [70..71]
 r195: [33..35]
 r196: [30..31]
 r197: [41..43]
 r198: [38..39]
Compressing live ranges: from 146 to 81 - 55%
Ranges after the compression:
 r82: [75..76] [65..66] [11..56]
 r83: [75..76] [65..66] [11..12]
 r84: [61..62]
 r85: [57..58]
 r88: [0..10]
 r89: [4..6]
 r90: [23..45]
 r92: [0..1]
 r94: [0..3]
 r99: [13..50]
 r101: [43..44] [26..30]
 r107: [39..44] [25..28]
 r118: [21..50] [17..18] [13..14]
 r119: [47..52] [13..22]
 r120: [23..46]
 r121: [37..44] [23..26]
 r124: [0..3]
 r129: [75..78] [65..66] [11..52] [0..8]
 r130: [75..78] [7..12]
 r132: [71..72]
 r138: [67..68]
 r141: [55..56]
 r142: [55..56]
 r143: [55..56]
 r144: [31..32]
 r145: [29..30]
 r146: [27..28]
 r148: [41..42]
 r149: [35..40]
 r171: [0..3]
 r172: [45..52] [13..34]
 r173: [0..3]
 r174: [13..48]
 r175: [79..80]
 r176: [77..78]
 r177: [63..64]
 r178: [59..60]
 r179: [73..74]
 r180: [71..72]
 r181: [69..70]
 r182: [67..68]
 r183: [9..10]
 r184: [2..3]
 r185: [53..54]
 r186: [37..38]
 r187: [35..38]
 r188: [23..24]
 r189: [51..52]
 r190: [49..50]
 r191: [33..34]
 r192: [27..28]
 r193: [43..44]
 r194: [35..36]
 r195: [15..16]
 r196: [13..14]
 r197: [19..20]
 r198: [17..18]

********** Inheritance #1: **********

EBB 2
EBB 3 4 5 6 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=199 from oldreg=118, assigning class GENERAL_REGS to inheritance r199
    Original reg change 118->199 (bb28):
  427: r199:SI=r195:SI
      REG_DEAD r195:SI
    Add original<-inheritance after:
  432: r118:SI=r199:SI

    Inheritance reuse change 118->199 (bb28):
  288: debug i => r199:SI
    Inheritance reuse change 118->199 (bb28):
  428: r196:SI=r199:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 29
EBB 30
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=200 from oldreg=118, assigning class GENERAL_REGS to inheritance r200
    Original reg change 118->200 (bb30):
  430: r200:SI=r197:SI
      REG_DEAD r197:SI
    Add original<-inheritance after:
  433: r118:SI=r200:SI

    Inheritance reuse change 118->200 (bb30):
  303: debug i => r200:SI
    Inheritance reuse change 118->200 (bb30):
  431: r198:SI=r200:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 31

********** Pseudo live ranges #2: **********

  BB 17
   Insn 154: point = 0, n_alt = 0
   Insn 153: point = 0, n_alt = 4
   Insn 152: point = 0, n_alt = 4
   Insn 151: point = 0, n_alt = 0
   Insn 150: point = 0, n_alt = 4
  BB 31
   Insn 338: point = 0, n_alt = -1
   Insn 337: point = 0, n_alt = -2
  BB 21
   Insn 412: point = 2, n_alt = -1
  BB 19
   Insn 409: point = 3, n_alt = -1
  BB 18
   Insn 170: point = 4, n_alt = -1
   Insn 169: point = 4, n_alt = 0
   Insn 167: point = 4, n_alt = 0
   Insn 164: point = 5, n_alt = 0
   Insn 162: point = 6, n_alt = 0
   Insn 161: point = 6, n_alt = -2
   Insn 160: point = 6, n_alt = -2
   Insn 159: point = 7, n_alt = -2
  BB 16
   Insn 147: point = 8, n_alt = -1
   Insn 146: point = 8, n_alt = 0
   Insn 143: point = 8, n_alt = -2
   Insn 394: point = 10, n_alt = -2
   Insn 142: point = 11, n_alt = 0
   Insn 141: point = 11, n_alt = -2
   Insn 140: point = 11, n_alt = 0
   Insn 139: point = 11, n_alt = -2
   Insn 380: point = 11, n_alt = -2
  BB 15
   Insn 137: point = 12, n_alt = 4
   Insn 370: point = 13, n_alt = 3
   Insn 5: point = 14, n_alt = 0
   Insn 133: point = 15, n_alt = 0
  BB 11
   Insn 406: point = 18, n_alt = -1
  BB 14
   Insn 131: point = 19, n_alt = -1
   Insn 130: point = 19, n_alt = 0
   Insn 122: point = 19, n_alt = 3
   Insn 120: point = 21, n_alt = 1
   Insn 117: point = 21, n_alt = -2
   Insn 393: point = 23, n_alt = -2
   Insn 116: point = 24, n_alt = 0
   Insn 115: point = 24, n_alt = -2
   Insn 112: point = 24, n_alt = 0
  BB 10
   Insn 61: point = 27, n_alt = -1
   Insn 60: point = 27, n_alt = 0
  BB 9
   Insn 403: point = 29, n_alt = -1
  BB 28
   Insn 291: point = 30, n_alt = -1
   Insn 290: point = 30, n_alt = 0
   Insn 428: point = 31, n_alt = 0
	   Creating copy r196<-r199@551
   Insn 432: point = 33, n_alt = -1
   Insn 427: point = 34, n_alt = 1
	   Creating copy r195->r199@551
   Insn 287: point = 36, n_alt = 1
   Insn 426: point = 37, n_alt = 0
  BB 30
   Insn 307: point = 40, n_alt = -1
   Insn 306: point = 40, n_alt = 1
   Insn 431: point = 41, n_alt = 0
	   Creating copy r198<-r200@68
   Insn 433: point = 43, n_alt = -1
   Insn 430: point = 44, n_alt = 1
	   Creating copy r197->r200@68
   Insn 302: point = 46, n_alt = 1
   Insn 429: point = 47, n_alt = 0
  BB 27
   Insn 282: point = 50, n_alt = 0
  BB 25
   Insn 415: point = 52, n_alt = -1
  BB 26
   Insn 274: point = 53, n_alt = -1
   Insn 273: point = 53, n_alt = 0
   Insn 269: point = 53, n_alt = 0
   Insn 267: point = 54, n_alt = 15
   Insn 398: point = 55, n_alt = -2
   Insn 265: point = 56, n_alt = 0
   Insn 264: point = 56, n_alt = -2
  BB 23
   Insn 224: point = 58, n_alt = -1
   Insn 223: point = 58, n_alt = 0
   Insn 222: point = 58, n_alt = 0
   Insn 423: point = 60, n_alt = 3
   Insn 219: point = 61, n_alt = 14
   Insn 217: point = 62, n_alt = 0
   Insn 216: point = 64, n_alt = 3
   Insn 211: point = 65, n_alt = 0
   Insn 422: point = 67, n_alt = -2
	Hard reg 1 is preferable by r191 with profit 1000
   Insn 210: point = 69, n_alt = 2
   Insn 421: point = 70, n_alt = 0
  BB 24
   Insn 257: point = 72, n_alt = -1
   Insn 256: point = 72, n_alt = 0
   Insn 255: point = 72, n_alt = 0
   Insn 252: point = 73, n_alt = 0
   Insn 249: point = 74, n_alt = 15
   Insn 425: point = 75, n_alt = 3
   Insn 247: point = 76, n_alt = 15
   Insn 397: point = 77, n_alt = -2
   Insn 396: point = 78, n_alt = -2
   Insn 240: point = 79, n_alt = 0
   Insn 239: point = 79, n_alt = 14
   Insn 238: point = 79, n_alt = -2
   Insn 229: point = 80, n_alt = 1
   Insn 228: point = 82, n_alt = 0
   Insn 424: point = 84, n_alt = 0
  BB 22
   Insn 6: point = 86, n_alt = 0
   Insn 205: point = 87, n_alt = 3
  BB 29
   Insn 299: point = 89, n_alt = -1
   Insn 298: point = 89, n_alt = 0
  BB 20
   Insn 200: point = 90, n_alt = -1
   Insn 199: point = 90, n_alt = 0
   Insn 420: point = 90, n_alt = 5
   Insn 206: point = 92, n_alt = 3
   Insn 7: point = 93, n_alt = 1
   Insn 419: point = 94, n_alt = 1
   Insn 192: point = 96, n_alt = 2
   Insn 418: point = 97, n_alt = -2
	Hard reg 0 is preferable by r189 with profit 76
   Insn 191: point = 98, n_alt = 0
   Insn 190: point = 99, n_alt = 0
   Insn 187: point = 100, n_alt = -2
   Insn 395: point = 102, n_alt = -2
   Insn 186: point = 103, n_alt = 0
   Insn 185: point = 103, n_alt = -2
   Insn 184: point = 104, n_alt = -2
   Insn 183: point = 105, n_alt = -2
   Insn 182: point = 106, n_alt = 0
   Insn 181: point = 106, n_alt = 0
   Insn 180: point = 107, n_alt = 0
   Insn 179: point = 108, n_alt = 0
  BB 12
   Insn 77: point = 110, n_alt = 0
   Insn 76: point = 110, n_alt = -2
   Insn 75: point = 111, n_alt = -2
   Insn 388: point = 113, n_alt = -2
   Insn 74: point = 114, n_alt = 0
   Insn 73: point = 114, n_alt = -2
   Insn 70: point = 115, n_alt = -2
   Insn 387: point = 117, n_alt = -2
   Insn 69: point = 118, n_alt = 0
   Insn 68: point = 118, n_alt = -2
  BB 7
   Insn 400: point = 120, n_alt = -1
  BB 6
   Insn 47: point = 121, n_alt = -1
   Insn 46: point = 121, n_alt = 0
  BB 13
   Insn 106: point = 123, n_alt = 0
   Insn 105: point = 123, n_alt = -2
   Insn 104: point = 124, n_alt = -2
   Insn 392: point = 125, n_alt = -2
   Insn 98: point = 126, n_alt = -2
   Insn 391: point = 128, n_alt = -2
   Insn 97: point = 129, n_alt = 0
   Insn 96: point = 129, n_alt = -2
   Insn 95: point = 130, n_alt = -2
   Insn 390: point = 131, n_alt = -2
   Insn 85: point = 132, n_alt = -2
   Insn 389: point = 134, n_alt = -2
   Insn 84: point = 135, n_alt = 0
   Insn 83: point = 135, n_alt = -2
  BB 8
   Insn 54: point = 137, n_alt = -1
   Insn 53: point = 137, n_alt = 0
  BB 5
   Insn 42: point = 139, n_alt = -1
   Insn 41: point = 139, n_alt = 0
  BB 4
   Insn 37: point = 140, n_alt = -1
  BB 3
   Insn 32: point = 141, n_alt = -1
   Insn 31: point = 141, n_alt = 0
   Insn 30: point = 141, n_alt = 4
   Insn 29: point = 142, n_alt = 3
  BB 2
   Insn 16: point = 144, n_alt = -1
   Insn 15: point = 144, n_alt = 0
   Insn 11: point = 145, n_alt = 2
   Insn 386: point = 146, n_alt = -2
   Insn 2: point = 147, n_alt = -2
   Insn 385: point = 149, n_alt = -2
 r82: [135..142] [118..122] [30..109] [25..28]
 r83: [137..141] [121..122] [27..28]
 r84: [114..115]
 r85: [110..111]
 r88: [19..24] [4..17]
 r89: [19..19] [16..17]
 r90: [53..86]
 r92: [6..8]
 r94: [4..14]
 r99: [30..94]
 r101: [83..85] [58..65]
 r107: [79..85] [56..61]
 r118: [48..93] [38..43] [30..33]
 r119: [89..99] [30..50]
 r120: [53..87]
 r121: [76..85] [54..58]
 r124: [4..15]
 r129: [137..145] [121..122] [27..100] [0..21]
 r130: [140..147] [20..28]
 r132: [130..132]
 r138: [123..126]
 r141: [105..108]
 r142: [104..107]
 r143: [103..106]
 r144: [66..67]
 r145: [63..64]
 r146: [59..62]
 r148: [81..82]
 r149: [74..80]
 r171: [4..13]
 r172: [86..98] [30..72]
 r173: [4..12]
 r174: [30..90]
 r175: [148..149]
 r176: [144..146]
 r177: [116..117]
 r178: [112..113]
 r179: [133..134]
 r180: [129..131]
 r181: [127..128]
 r182: [124..125]
 r183: [22..23]
 r184: [9..10]
 r185: [101..102]
 r186: [76..78]
 r187: [74..77]
 r188: [54..55]
 r189: [95..97]
 r190: [91..92]
 r191: [68..70]
 r192: [59..60]
 r193: [83..84]
 r194: [74..75]
 r195: [35..37]
 r196: [30..31]
 r197: [45..47]
 r198: [40..41]
 r199: [32..34]
 r200: [42..44]
Compressing live ranges: from 150 to 85 - 56%
Ranges after the compression:
 r82: [79..80] [69..70] [11..60]
 r83: [79..80] [69..70] [11..12]
 r84: [65..66]
 r85: [61..62]
 r88: [0..10]
 r89: [4..6]
 r90: [27..49]
 r92: [0..1]
 r94: [0..3]
 r99: [13..54]
 r101: [47..48] [30..34]
 r107: [43..48] [29..32]
 r118: [25..54] [19..22] [13..16]
 r119: [51..56] [13..26]
 r120: [27..50]
 r121: [41..48] [27..30]
 r124: [0..3]
 r129: [79..82] [69..70] [11..56] [0..8]
 r130: [79..82] [7..12]
 r132: [75..76]
 r138: [71..72]
 r141: [59..60]
 r142: [59..60]
 r143: [59..60]
 r144: [35..36]
 r145: [33..34]
 r146: [31..32]
 r148: [45..46]
 r149: [39..44]
 r171: [0..3]
 r172: [49..56] [13..38]
 r173: [0..3]
 r174: [13..52]
 r175: [83..84]
 r176: [81..82]
 r177: [67..68]
 r178: [63..64]
 r179: [77..78]
 r180: [75..76]
 r181: [73..74]
 r182: [71..72]
 r183: [9..10]
 r184: [2..3]
 r185: [57..58]
 r186: [41..42]
 r187: [39..42]
 r188: [27..28]
 r189: [55..56]
 r190: [53..54]
 r191: [37..38]
 r192: [31..32]
 r193: [47..48]
 r194: [39..40]
 r195: [17..18]
 r196: [13..14]
 r197: [23..24]
 r198: [19..20]
 r199: [15..16]
 r200: [21..22]

********** Assignment #1: **********

	 Assigning to 191 (cl=GENERAL_REGS, orig=144, freq=3000, tfirst=191, tfreq=3000)...
	   Assign 1 to reload r191 (freq=3000)
	 Assigning to 195 (cl=GENERAL_REGS, orig=118, freq=1653, tfirst=195, tfreq=2204)...
	   Assign 5 to optional reload r195 (freq=1653)
	Hard reg 5 is preferable by r199 with profit 551
	Hard reg 5 is preferable by r196 with profit 275
	 Assigning to 196 (cl=GENERAL_REGS, orig=118, freq=1102, tfirst=195, tfreq=2204)...
	   Assign 5 to optional reload r196 (freq=1102)
	Hard reg 5 is preferable by r199 with profit 1102
	 Assigning to 199 (cl=GENERAL_REGS, orig=118, freq=1653, tfirst=195, tfreq=2204)...
	   Assign 5 to inheritance r199 (freq=1653)
	 Assigning to 192 (cl=INDEX_REGS, orig=174, freq=2000, tfirst=192, tfreq=2000)...
	   Assign 0 to reload r192 (freq=2000)
	 Assigning to 193 (cl=INDEX_REGS, orig=99, freq=2000, tfirst=193, tfreq=2000)...
	   Assign 0 to reload r193 (freq=2000)
	 Assigning to 194 (cl=INDEX_REGS, orig=174, freq=2000, tfirst=194, tfreq=2000)...
	   Assign 0 to reload r194 (freq=2000)
	 Assigning to 197 (cl=GENERAL_REGS, orig=118, freq=204, tfirst=197, tfreq=272)...
	   Assign 2 to optional reload r197 (freq=204)
	Hard reg 2 is preferable by r200 with profit 68
	Hard reg 2 is preferable by r198 with profit 34
	 Assigning to 198 (cl=GENERAL_REGS, orig=118, freq=136, tfirst=197, tfreq=272)...
	   Assign 2 to optional reload r198 (freq=136)
	Hard reg 2 is preferable by r200 with profit 136
	 Assigning to 200 (cl=GENERAL_REGS, orig=118, freq=204, tfirst=197, tfreq=272)...
	   Assign 2 to inheritance r200 (freq=204)
	 Assigning to 189 (cl=GENERAL_REGS, orig=99, freq=228, tfirst=189, tfreq=228)...
	   Assign 3 to reload r189 (freq=228)
	 Assigning to 190 (cl=GENERAL_REGS, orig=174, freq=152, tfirst=190, tfreq=152)...
	   Assign 3 to reload r190 (freq=152)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 2 out of 2 (100.00%)
Keep optional reload reg 196
Keep optional reload reg 198
Remove optional reload reg 195
  Restoring original insn:
  287: {r118:SI=r118:SI+0x1;clobber flags:CC;}
      REG_UNUSED flags:CC
  Deleting move 426
  426: r195:SI=r118:SI
      REG_DEAD r118:SI
deleting insn with uid = 426.
  Restoring original insn:
  427: r199:SI=r118:SI
      REG_DEAD r118:SI
Remove optional reload reg 197
  Restoring original insn:
  302: {r118:SI=r118:SI+0x1;clobber flags:CC;}
      REG_UNUSED flags:CC
  Deleting move 429
  429: r197:SI=r118:SI
      REG_DEAD r118:SI
deleting insn with uid = 429.
  Restoring original insn:
  430: r200:SI=r118:SI
      REG_DEAD r118:SI

********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) rm  (1) re {*cmpsi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 302:  (0) rm  (1) 0  (2) re {*addsi_1}
      Creating newreg=201 from oldreg=118, assigning class GENERAL_REGS to r201
      Making reload reg 201 for reg 118 optional
  302: {r201:SI=r201:SI+0x1;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  434: r201:SI=r118:SI
    Inserting insn reload after:
  435: r118:SI=r201:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 435:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) rm  (1) re {*cmpsi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 287:  (0) rm  (1) 0  (2) re {*addsi_1}
      Creating newreg=202 from oldreg=118, assigning class GENERAL_REGS to r202
      Making reload reg 202 for reg 118 optional
  287: {r202:SI=r202:SI+0x1;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  436: r202:SI=r118:SI
    Inserting insn reload after:
  437: r118:SI=r202:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 437:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 436:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 433:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 432:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #3: **********

  BB 17
   Insn 154: point = 0, n_alt = 0
   Insn 153: point = 0, n_alt = 4
   Insn 152: point = 0, n_alt = 4
   Insn 151: point = 0, n_alt = 0
   Insn 150: point = 0, n_alt = 4
  BB 31
   Insn 338: point = 0, n_alt = -1
   Insn 337: point = 0, n_alt = -2
  BB 21
   Insn 412: point = 2, n_alt = -1
  BB 19
   Insn 409: point = 3, n_alt = -1
  BB 18
   Insn 170: point = 4, n_alt = -1
   Insn 169: point = 4, n_alt = 0
   Insn 167: point = 4, n_alt = 0
   Insn 164: point = 5, n_alt = 0
   Insn 162: point = 6, n_alt = 0
   Insn 161: point = 6, n_alt = -2
   Insn 160: point = 6, n_alt = -2
   Insn 159: point = 7, n_alt = -2
  BB 16
   Insn 147: point = 8, n_alt = -1
   Insn 146: point = 8, n_alt = 0
   Insn 143: point = 8, n_alt = -2
   Insn 394: point = 10, n_alt = -2
   Insn 142: point = 11, n_alt = 0
   Insn 141: point = 11, n_alt = -2
   Insn 140: point = 11, n_alt = 0
   Insn 139: point = 11, n_alt = -2
   Insn 380: point = 11, n_alt = -2
  BB 15
   Insn 137: point = 12, n_alt = 4
   Insn 370: point = 13, n_alt = 3
   Insn 5: point = 14, n_alt = 0
   Insn 133: point = 15, n_alt = 0
  BB 11
   Insn 406: point = 18, n_alt = -1
  BB 14
   Insn 131: point = 19, n_alt = -1
   Insn 130: point = 19, n_alt = 0
   Insn 122: point = 19, n_alt = 3
   Insn 120: point = 21, n_alt = 1
   Insn 117: point = 21, n_alt = -2
   Insn 393: point = 23, n_alt = -2
   Insn 116: point = 24, n_alt = 0
   Insn 115: point = 24, n_alt = -2
   Insn 112: point = 24, n_alt = 0
  BB 10
   Insn 61: point = 27, n_alt = -1
   Insn 60: point = 27, n_alt = 0
  BB 9
   Insn 403: point = 29, n_alt = -1
  BB 28
   Insn 291: point = 30, n_alt = -1
   Insn 290: point = 30, n_alt = 0
   Insn 428: point = 31, n_alt = -2
	   Creating copy r196<-r199@551
   Insn 432: point = 33, n_alt = 1
   Insn 427: point = 34, n_alt = 0
   Insn 437: point = 36, n_alt = 1
   Insn 287: point = 38, n_alt = 1
   Insn 436: point = 39, n_alt = 0
  BB 30
   Insn 307: point = 42, n_alt = -1
   Insn 306: point = 42, n_alt = 0
   Insn 431: point = 43, n_alt = -2
	   Creating copy r198<-r200@68
   Insn 433: point = 45, n_alt = 1
   Insn 430: point = 46, n_alt = 0
   Insn 435: point = 48, n_alt = 1
   Insn 302: point = 50, n_alt = 1
   Insn 434: point = 51, n_alt = 0
  BB 27
   Insn 282: point = 54, n_alt = 0
  BB 25
   Insn 415: point = 56, n_alt = -1
  BB 26
   Insn 274: point = 57, n_alt = -1
   Insn 273: point = 57, n_alt = 0
   Insn 269: point = 57, n_alt = 0
   Insn 267: point = 58, n_alt = 15
   Insn 398: point = 59, n_alt = -2
   Insn 265: point = 60, n_alt = 0
   Insn 264: point = 60, n_alt = -2
  BB 23
   Insn 224: point = 62, n_alt = -1
   Insn 223: point = 62, n_alt = 0
   Insn 222: point = 62, n_alt = 0
   Insn 423: point = 64, n_alt = 3
   Insn 219: point = 65, n_alt = 14
   Insn 217: point = 66, n_alt = 0
   Insn 216: point = 68, n_alt = 3
   Insn 211: point = 69, n_alt = 0
   Insn 422: point = 71, n_alt = -2
	Hard reg 1 is preferable by r191 with profit 1000
   Insn 210: point = 73, n_alt = 2
   Insn 421: point = 74, n_alt = 0
  BB 24
   Insn 257: point = 76, n_alt = -1
   Insn 256: point = 76, n_alt = 0
   Insn 255: point = 76, n_alt = 0
   Insn 252: point = 77, n_alt = 0
   Insn 249: point = 78, n_alt = 15
   Insn 425: point = 79, n_alt = 3
   Insn 247: point = 80, n_alt = 15
   Insn 397: point = 81, n_alt = -2
   Insn 396: point = 82, n_alt = -2
   Insn 240: point = 83, n_alt = 0
   Insn 239: point = 83, n_alt = 14
   Insn 238: point = 83, n_alt = -2
   Insn 229: point = 84, n_alt = 1
   Insn 228: point = 86, n_alt = 0
   Insn 424: point = 88, n_alt = 0
  BB 22
   Insn 6: point = 90, n_alt = 0
   Insn 205: point = 91, n_alt = 3
  BB 29
   Insn 299: point = 93, n_alt = -1
   Insn 298: point = 93, n_alt = 0
  BB 20
   Insn 200: point = 94, n_alt = -1
   Insn 199: point = 94, n_alt = 0
   Insn 420: point = 94, n_alt = 5
   Insn 206: point = 96, n_alt = 3
   Insn 7: point = 97, n_alt = 1
   Insn 419: point = 98, n_alt = 1
   Insn 192: point = 100, n_alt = 2
   Insn 418: point = 101, n_alt = -2
	Hard reg 0 is preferable by r189 with profit 76
   Insn 191: point = 102, n_alt = 0
   Insn 190: point = 103, n_alt = 0
   Insn 187: point = 104, n_alt = -2
   Insn 395: point = 106, n_alt = -2
   Insn 186: point = 107, n_alt = 0
   Insn 185: point = 107, n_alt = -2
   Insn 184: point = 108, n_alt = -2
   Insn 183: point = 109, n_alt = -2
   Insn 182: point = 110, n_alt = 0
   Insn 181: point = 110, n_alt = 0
   Insn 180: point = 111, n_alt = 0
   Insn 179: point = 112, n_alt = 0
  BB 12
   Insn 77: point = 114, n_alt = 0
   Insn 76: point = 114, n_alt = -2
   Insn 75: point = 115, n_alt = -2
   Insn 388: point = 117, n_alt = -2
   Insn 74: point = 118, n_alt = 0
   Insn 73: point = 118, n_alt = -2
   Insn 70: point = 119, n_alt = -2
   Insn 387: point = 121, n_alt = -2
   Insn 69: point = 122, n_alt = 0
   Insn 68: point = 122, n_alt = -2
  BB 7
   Insn 400: point = 124, n_alt = -1
  BB 6
   Insn 47: point = 125, n_alt = -1
   Insn 46: point = 125, n_alt = 0
  BB 13
   Insn 106: point = 127, n_alt = 0
   Insn 105: point = 127, n_alt = -2
   Insn 104: point = 128, n_alt = -2
   Insn 392: point = 129, n_alt = -2
   Insn 98: point = 130, n_alt = -2
   Insn 391: point = 132, n_alt = -2
   Insn 97: point = 133, n_alt = 0
   Insn 96: point = 133, n_alt = -2
   Insn 95: point = 134, n_alt = -2
   Insn 390: point = 135, n_alt = -2
   Insn 85: point = 136, n_alt = -2
   Insn 389: point = 138, n_alt = -2
   Insn 84: point = 139, n_alt = 0
   Insn 83: point = 139, n_alt = -2
  BB 8
   Insn 54: point = 141, n_alt = -1
   Insn 53: point = 141, n_alt = 0
  BB 5
   Insn 42: point = 143, n_alt = -1
   Insn 41: point = 143, n_alt = 0
  BB 4
   Insn 37: point = 144, n_alt = -1
  BB 3
   Insn 32: point = 145, n_alt = -1
   Insn 31: point = 145, n_alt = 0
   Insn 30: point = 145, n_alt = 4
   Insn 29: point = 146, n_alt = 3
  BB 2
   Insn 16: point = 148, n_alt = -1
   Insn 15: point = 148, n_alt = 0
   Insn 11: point = 149, n_alt = 2
   Insn 386: point = 150, n_alt = -2
   Insn 2: point = 151, n_alt = -2
   Insn 385: point = 153, n_alt = -2
 r82: [139..146] [122..126] [30..113] [25..28]
 r83: [141..145] [125..126] [27..28]
 r84: [118..119]
 r85: [114..115]
 r88: [19..24] [4..17]
 r89: [19..19] [16..17]
 r90: [57..90]
 r92: [6..8]
 r94: [4..14]
 r99: [30..98]
 r101: [87..89] [62..69]
 r107: [83..89] [60..65]
 r118: [52..97] [47..48] [40..45] [35..36] [30..33]
 r119: [93..103] [30..54]
 r120: [57..91]
 r121: [80..89] [58..62]
 r124: [4..15]
 r129: [141..149] [125..126] [27..104] [0..21]
 r130: [144..151] [20..28]
 r132: [134..136]
 r138: [127..130]
 r141: [109..112]
 r142: [108..111]
 r143: [107..110]
 r144: [70..71]
 r145: [67..68]
 r146: [63..66]
 r148: [85..86]
 r149: [78..84]
 r171: [4..13]
 r172: [90..102] [30..76]
 r173: [4..12]
 r174: [30..94]
 r175: [152..153]
 r176: [148..150]
 r177: [120..121]
 r178: [116..117]
 r179: [137..138]
 r180: [133..135]
 r181: [131..132]
 r182: [128..129]
 r183: [22..23]
 r184: [9..10]
 r185: [105..106]
 r186: [80..82]
 r187: [78..81]
 r188: [58..59]
 r189: [99..101]
 r190: [95..96]
 r191: [72..74]
 r192: [63..64]
 r193: [87..88]
 r194: [78..79]
 r196: [30..31]
 r198: [42..43]
 r199: [32..34]
 r200: [44..46]
 r201: [49..51]
 r202: [37..39]
Compressing live ranges: from 154 to 89 - 57%
Ranges after the compression:
 r82: [83..84] [73..74] [11..64]
 r83: [83..84] [73..74] [11..12]
 r84: [69..70]
 r85: [65..66]
 r88: [0..10]
 r89: [4..6]
 r90: [31..53]
 r92: [0..1]
 r94: [0..3]
 r99: [13..58]
 r101: [51..52] [34..38]
 r107: [47..52] [33..36]
 r118: [29..58] [21..26] [13..18]
 r119: [55..60] [13..30]
 r120: [31..54]
 r121: [45..52] [31..34]
 r124: [0..3]
 r129: [83..86] [73..74] [11..60] [0..8]
 r130: [83..86] [7..12]
 r132: [79..80]
 r138: [75..76]
 r141: [63..64]
 r142: [63..64]
 r143: [63..64]
 r144: [39..40]
 r145: [37..38]
 r146: [35..36]
 r148: [49..50]
 r149: [43..48]
 r171: [0..3]
 r172: [53..60] [13..42]
 r173: [0..3]
 r174: [13..56]
 r175: [87..88]
 r176: [85..86]
 r177: [71..72]
 r178: [67..68]
 r179: [81..82]
 r180: [79..80]
 r181: [77..78]
 r182: [75..76]
 r183: [9..10]
 r184: [2..3]
 r185: [61..62]
 r186: [45..46]
 r187: [43..46]
 r188: [31..32]
 r189: [59..60]
 r190: [57..58]
 r191: [41..42]
 r192: [35..36]
 r193: [51..52]
 r194: [43..44]
 r196: [13..14]
 r198: [21..22]
 r199: [15..16]
 r200: [23..24]
 r201: [27..28]
 r202: [19..20]

********** Inheritance #2: **********

EBB 2
EBB 3 4 5 6 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=203 from oldreg=118, assigning class GENERAL_REGS to inheritance r203
    Original reg change 118->203 (bb28):
  437: r203:SI=r202:SI
      REG_DEAD r202:SI
    Add original<-inheritance after:
  438: r118:SI=r203:SI

    Inheritance reuse change 118->203 (bb28):
  427: r199:SI=r203:SI
      REG_DEAD r203:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   438: r118:SI=r203:SI
deleting insn with uid = 438.
EBB 29
EBB 30
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=204 from oldreg=118, assigning class GENERAL_REGS to inheritance r204
    Original reg change 118->204 (bb30):
  435: r204:SI=r201:SI
      REG_DEAD r201:SI
    Add original<-inheritance after:
  439: r118:SI=r204:SI

    Inheritance reuse change 118->204 (bb30):
  430: r200:SI=r204:SI
      REG_DEAD r204:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   439: r118:SI=r204:SI
deleting insn with uid = 439.
EBB 31

********** Pseudo live ranges #4: **********

  BB 17
   Insn 154: point = 0, n_alt = 0
   Insn 153: point = 0, n_alt = 4
   Insn 152: point = 0, n_alt = 4
   Insn 151: point = 0, n_alt = 0
   Insn 150: point = 0, n_alt = 4
  BB 31
   Insn 338: point = 0, n_alt = -1
   Insn 337: point = 0, n_alt = -2
  BB 21
   Insn 412: point = 2, n_alt = -1
  BB 19
   Insn 409: point = 3, n_alt = -1
  BB 18
   Insn 170: point = 4, n_alt = -1
   Insn 169: point = 4, n_alt = 0
   Insn 167: point = 4, n_alt = 0
   Insn 164: point = 5, n_alt = 0
   Insn 162: point = 6, n_alt = 0
   Insn 161: point = 6, n_alt = -2
   Insn 160: point = 6, n_alt = -2
   Insn 159: point = 7, n_alt = -2
  BB 16
   Insn 147: point = 8, n_alt = -1
   Insn 146: point = 8, n_alt = 0
   Insn 143: point = 8, n_alt = -2
   Insn 394: point = 10, n_alt = -2
   Insn 142: point = 11, n_alt = 0
   Insn 141: point = 11, n_alt = -2
   Insn 140: point = 11, n_alt = 0
   Insn 139: point = 11, n_alt = -2
   Insn 380: point = 11, n_alt = -2
  BB 15
   Insn 137: point = 12, n_alt = 4
   Insn 370: point = 13, n_alt = 3
   Insn 5: point = 14, n_alt = 0
   Insn 133: point = 15, n_alt = 0
  BB 11
   Insn 406: point = 18, n_alt = -1
  BB 14
   Insn 131: point = 19, n_alt = -1
   Insn 130: point = 19, n_alt = 0
   Insn 122: point = 19, n_alt = 3
   Insn 120: point = 21, n_alt = 1
   Insn 117: point = 21, n_alt = -2
   Insn 393: point = 23, n_alt = -2
   Insn 116: point = 24, n_alt = 0
   Insn 115: point = 24, n_alt = -2
   Insn 112: point = 24, n_alt = 0
  BB 10
   Insn 61: point = 27, n_alt = -1
   Insn 60: point = 27, n_alt = 0
  BB 9
   Insn 403: point = 29, n_alt = -1
  BB 28
   Insn 291: point = 30, n_alt = -1
   Insn 290: point = 30, n_alt = 0
   Insn 428: point = 31, n_alt = -2
	   Creating copy r196<-r199@551
   Insn 432: point = 33, n_alt = 1
   Insn 427: point = 34, n_alt = 0
	   Creating copy r199<-r203@551
   Insn 437: point = 36, n_alt = 1
	   Creating copy r202->r203@551
   Insn 287: point = 38, n_alt = 1
   Insn 436: point = 39, n_alt = 0
  BB 30
   Insn 307: point = 42, n_alt = -1
   Insn 306: point = 42, n_alt = 0
   Insn 431: point = 43, n_alt = -2
	   Creating copy r198<-r200@68
   Insn 433: point = 45, n_alt = 1
   Insn 430: point = 46, n_alt = 0
	   Creating copy r200<-r204@68
   Insn 435: point = 48, n_alt = 1
	   Creating copy r201->r204@68
   Insn 302: point = 50, n_alt = 1
   Insn 434: point = 51, n_alt = 0
  BB 27
   Insn 282: point = 54, n_alt = 0
  BB 25
   Insn 415: point = 56, n_alt = -1
  BB 26
   Insn 274: point = 57, n_alt = -1
   Insn 273: point = 57, n_alt = 0
   Insn 269: point = 57, n_alt = 0
   Insn 267: point = 58, n_alt = 15
   Insn 398: point = 59, n_alt = -2
   Insn 265: point = 60, n_alt = 0
   Insn 264: point = 60, n_alt = -2
  BB 23
   Insn 224: point = 62, n_alt = -1
   Insn 223: point = 62, n_alt = 0
   Insn 222: point = 62, n_alt = 0
   Insn 423: point = 64, n_alt = 3
   Insn 219: point = 65, n_alt = 14
   Insn 217: point = 66, n_alt = 0
   Insn 216: point = 68, n_alt = 3
   Insn 211: point = 69, n_alt = 0
   Insn 422: point = 71, n_alt = -2
	Hard reg 1 is preferable by r191 with profit 1000
   Insn 210: point = 73, n_alt = 2
   Insn 421: point = 74, n_alt = 0
  BB 24
   Insn 257: point = 76, n_alt = -1
   Insn 256: point = 76, n_alt = 0
   Insn 255: point = 76, n_alt = 0
   Insn 252: point = 77, n_alt = 0
   Insn 249: point = 78, n_alt = 15
   Insn 425: point = 79, n_alt = 3
   Insn 247: point = 80, n_alt = 15
   Insn 397: point = 81, n_alt = -2
   Insn 396: point = 82, n_alt = -2
   Insn 240: point = 83, n_alt = 0
   Insn 239: point = 83, n_alt = 14
   Insn 238: point = 83, n_alt = -2
   Insn 229: point = 84, n_alt = 1
   Insn 228: point = 86, n_alt = 0
   Insn 424: point = 88, n_alt = 0
  BB 22
   Insn 6: point = 90, n_alt = 0
   Insn 205: point = 91, n_alt = 3
  BB 29
   Insn 299: point = 93, n_alt = -1
   Insn 298: point = 93, n_alt = 0
  BB 20
   Insn 200: point = 94, n_alt = -1
   Insn 199: point = 94, n_alt = 0
   Insn 420: point = 94, n_alt = 5
   Insn 206: point = 96, n_alt = 3
   Insn 7: point = 97, n_alt = 1
   Insn 419: point = 98, n_alt = 1
   Insn 192: point = 100, n_alt = 2
   Insn 418: point = 101, n_alt = -2
	Hard reg 0 is preferable by r189 with profit 76
   Insn 191: point = 102, n_alt = 0
   Insn 190: point = 103, n_alt = 0
   Insn 187: point = 104, n_alt = -2
   Insn 395: point = 106, n_alt = -2
   Insn 186: point = 107, n_alt = 0
   Insn 185: point = 107, n_alt = -2
   Insn 184: point = 108, n_alt = -2
   Insn 183: point = 109, n_alt = -2
   Insn 182: point = 110, n_alt = 0
   Insn 181: point = 110, n_alt = 0
   Insn 180: point = 111, n_alt = 0
   Insn 179: point = 112, n_alt = 0
  BB 12
   Insn 77: point = 114, n_alt = 0
   Insn 76: point = 114, n_alt = -2
   Insn 75: point = 115, n_alt = -2
   Insn 388: point = 117, n_alt = -2
   Insn 74: point = 118, n_alt = 0
   Insn 73: point = 118, n_alt = -2
   Insn 70: point = 119, n_alt = -2
   Insn 387: point = 121, n_alt = -2
   Insn 69: point = 122, n_alt = 0
   Insn 68: point = 122, n_alt = -2
  BB 7
   Insn 400: point = 124, n_alt = -1
  BB 6
   Insn 47: point = 125, n_alt = -1
   Insn 46: point = 125, n_alt = 0
  BB 13
   Insn 106: point = 127, n_alt = 0
   Insn 105: point = 127, n_alt = -2
   Insn 104: point = 128, n_alt = -2
   Insn 392: point = 129, n_alt = -2
   Insn 98: point = 130, n_alt = -2
   Insn 391: point = 132, n_alt = -2
   Insn 97: point = 133, n_alt = 0
   Insn 96: point = 133, n_alt = -2
   Insn 95: point = 134, n_alt = -2
   Insn 390: point = 135, n_alt = -2
   Insn 85: point = 136, n_alt = -2
   Insn 389: point = 138, n_alt = -2
   Insn 84: point = 139, n_alt = 0
   Insn 83: point = 139, n_alt = -2
  BB 8
   Insn 54: point = 141, n_alt = -1
   Insn 53: point = 141, n_alt = 0
  BB 5
   Insn 42: point = 143, n_alt = -1
   Insn 41: point = 143, n_alt = 0
  BB 4
   Insn 37: point = 144, n_alt = -1
  BB 3
   Insn 32: point = 145, n_alt = -1
   Insn 31: point = 145, n_alt = 0
   Insn 30: point = 145, n_alt = 4
   Insn 29: point = 146, n_alt = 3
  BB 2
   Insn 16: point = 148, n_alt = -1
   Insn 15: point = 148, n_alt = 0
   Insn 11: point = 149, n_alt = 2
   Insn 386: point = 150, n_alt = -2
   Insn 2: point = 151, n_alt = -2
   Insn 385: point = 153, n_alt = -2
 r82: [139..146] [122..126] [30..113] [25..28]
 r83: [141..145] [125..126] [27..28]
 r84: [118..119]
 r85: [114..115]
 r88: [19..24] [4..17]
 r89: [19..19] [16..17]
 r90: [57..90]
 r92: [6..8]
 r94: [4..14]
 r99: [30..98]
 r101: [87..89] [62..69]
 r107: [83..89] [60..65]
 r118: [52..97] [40..45] [30..33]
 r119: [93..103] [30..54]
 r120: [57..91]
 r121: [80..89] [58..62]
 r124: [4..15]
 r129: [141..149] [125..126] [27..104] [0..21]
 r130: [144..151] [20..28]
 r132: [134..136]
 r138: [127..130]
 r141: [109..112]
 r142: [108..111]
 r143: [107..110]
 r144: [70..71]
 r145: [67..68]
 r146: [63..66]
 r148: [85..86]
 r149: [78..84]
 r171: [4..13]
 r172: [90..102] [30..76]
 r173: [4..12]
 r174: [30..94]
 r175: [152..153]
 r176: [148..150]
 r177: [120..121]
 r178: [116..117]
 r179: [137..138]
 r180: [133..135]
 r181: [131..132]
 r182: [128..129]
 r183: [22..23]
 r184: [9..10]
 r185: [105..106]
 r186: [80..82]
 r187: [78..81]
 r188: [58..59]
 r189: [99..101]
 r190: [95..96]
 r191: [72..74]
 r192: [63..64]
 r193: [87..88]
 r194: [78..79]
 r196: [30..31]
 r198: [42..43]
 r199: [32..34]
 r200: [44..46]
 r201: [49..51]
 r202: [37..39]
 r203: [35..36]
 r204: [47..48]
Compressing live ranges: from 154 to 89 - 57%
Ranges after the compression:
 r82: [83..84] [73..74] [11..64]
 r83: [83..84] [73..74] [11..12]
 r84: [69..70]
 r85: [65..66]
 r88: [0..10]
 r89: [4..6]
 r90: [31..53]
 r92: [0..1]
 r94: [0..3]
 r99: [13..58]
 r101: [51..52] [34..38]
 r107: [47..52] [33..36]
 r118: [29..58] [21..24] [13..16]
 r119: [55..60] [13..30]
 r120: [31..54]
 r121: [45..52] [31..34]
 r124: [0..3]
 r129: [83..86] [73..74] [11..60] [0..8]
 r130: [83..86] [7..12]
 r132: [79..80]
 r138: [75..76]
 r141: [63..64]
 r142: [63..64]
 r143: [63..64]
 r144: [39..40]
 r145: [37..38]
 r146: [35..36]
 r148: [49..50]
 r149: [43..48]
 r171: [0..3]
 r172: [53..60] [13..42]
 r173: [0..3]
 r174: [13..56]
 r175: [87..88]
 r176: [85..86]
 r177: [71..72]
 r178: [67..68]
 r179: [81..82]
 r180: [79..80]
 r181: [77..78]
 r182: [75..76]
 r183: [9..10]
 r184: [2..3]
 r185: [61..62]
 r186: [45..46]
 r187: [43..46]
 r188: [31..32]
 r189: [59..60]
 r190: [57..58]
 r191: [41..42]
 r192: [35..36]
 r193: [51..52]
 r194: [43..44]
 r196: [13..14]
 r198: [21..22]
 r199: [15..16]
 r200: [23..24]
 r201: [27..28]
 r202: [19..20]
 r203: [17..18]
 r204: [25..26]

********** Assignment #2: **********

	 Assigning to 202 (cl=GENERAL_REGS, orig=118, freq=1653, tfirst=202, tfreq=1653)...
	   Assign 2 to optional reload r202 (freq=1653)
	Hard reg 2 is preferable by r203 with profit 551
	 Assigning to 203 (cl=GENERAL_REGS, orig=118, freq=1102, tfirst=202, tfreq=1653)...
	   Assign 2 to inheritance r203 (freq=1102)
	 Assigning to 201 (cl=GENERAL_REGS, orig=118, freq=204, tfirst=201, tfreq=204)...
	   Assign 3 to optional reload r201 (freq=204)
	Hard reg 3 is preferable by r204 with profit 68
	 Assigning to 204 (cl=GENERAL_REGS, orig=118, freq=136, tfirst=201, tfreq=204)...
	   Assign 3 to inheritance r204 (freq=136)
	Improving inheritance for 199(5) and 203(2)...
	   Assign 5 to inheritance r203 (freq=1102)
	Improving inheritance for 200(2) and 204(3)...
	   Assign 2 to inheritance r204 (freq=136)
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 2 out of 2 (100.00%)
Keep optional reload reg 195
Keep optional reload reg 196
Keep optional reload reg 197
Keep optional reload reg 198
Remove optional reload reg 201
  Restoring original insn:
  302: {r118:SI=r118:SI+0x1;clobber flags:CC;}
      REG_UNUSED flags:CC
  Deleting move 434
  434: r201:SI=r118:SI
      REG_DEAD r118:SI
deleting insn with uid = 434.
  Restoring original insn:
  435: r204:SI=r118:SI
      REG_DEAD r118:SI
Remove optional reload reg 202
  Restoring original insn:
  287: {r118:SI=r118:SI+0x1;clobber flags:CC;}
      REG_UNUSED flags:CC
  Deleting move 436
  436: r202:SI=r118:SI
      REG_DEAD r118:SI
deleting insn with uid = 436.
  Restoring original insn:
  437: r203:SI=r118:SI
      REG_DEAD r118:SI

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 302:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 287:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #5: **********

  BB 17
   Insn 154: point = 0, n_alt = 0
   Insn 153: point = 0, n_alt = 4
   Insn 152: point = 0, n_alt = 4
   Insn 151: point = 0, n_alt = 0
   Insn 150: point = 0, n_alt = 4
  BB 31
   Insn 338: point = 0, n_alt = -1
   Insn 337: point = 0, n_alt = -2
  BB 21
   Insn 412: point = 2, n_alt = -1
  BB 19
   Insn 409: point = 3, n_alt = -1
  BB 18
   Insn 170: point = 4, n_alt = -1
   Insn 169: point = 4, n_alt = 0
   Insn 167: point = 4, n_alt = 0
   Insn 164: point = 5, n_alt = 0
   Insn 162: point = 6, n_alt = 0
   Insn 161: point = 6, n_alt = -2
   Insn 160: point = 6, n_alt = -2
   Insn 159: point = 7, n_alt = -2
  BB 16
   Insn 147: point = 8, n_alt = -1
   Insn 146: point = 8, n_alt = 0
   Insn 143: point = 8, n_alt = -2
   Insn 394: point = 10, n_alt = -2
   Insn 142: point = 11, n_alt = 0
   Insn 141: point = 11, n_alt = -2
   Insn 140: point = 11, n_alt = 0
   Insn 139: point = 11, n_alt = -2
   Insn 380: point = 11, n_alt = -2
  BB 15
   Insn 137: point = 12, n_alt = 4
   Insn 370: point = 13, n_alt = 3
   Insn 5: point = 14, n_alt = 0
   Insn 133: point = 15, n_alt = 0
  BB 11
   Insn 406: point = 18, n_alt = -1
  BB 14
   Insn 131: point = 19, n_alt = -1
   Insn 130: point = 19, n_alt = 0
   Insn 122: point = 19, n_alt = 3
   Insn 120: point = 21, n_alt = 1
   Insn 117: point = 21, n_alt = -2
   Insn 393: point = 23, n_alt = -2
   Insn 116: point = 24, n_alt = 0
   Insn 115: point = 24, n_alt = -2
   Insn 112: point = 24, n_alt = 0
  BB 10
   Insn 61: point = 27, n_alt = -1
   Insn 60: point = 27, n_alt = 0
  BB 9
   Insn 403: point = 29, n_alt = -1
  BB 28
   Insn 291: point = 30, n_alt = -1
   Insn 290: point = 30, n_alt = 0
   Insn 428: point = 31, n_alt = -2
   Insn 432: point = 33, n_alt = 1
   Insn 427: point = 34, n_alt = -2
   Insn 437: point = 36, n_alt = 0
   Insn 287: point = 38, n_alt = 1
  BB 30
   Insn 307: point = 40, n_alt = -1
   Insn 306: point = 40, n_alt = 0
   Insn 431: point = 41, n_alt = -2
   Insn 433: point = 43, n_alt = 1
   Insn 430: point = 44, n_alt = -2
   Insn 435: point = 46, n_alt = 0
   Insn 302: point = 48, n_alt = 1
  BB 27
   Insn 282: point = 50, n_alt = 0
  BB 25
   Insn 415: point = 52, n_alt = -1
  BB 26
   Insn 274: point = 53, n_alt = -1
   Insn 273: point = 53, n_alt = 0
   Insn 269: point = 53, n_alt = 0
   Insn 267: point = 54, n_alt = 15
   Insn 398: point = 55, n_alt = -2
   Insn 265: point = 56, n_alt = 0
   Insn 264: point = 56, n_alt = -2
  BB 23
   Insn 224: point = 58, n_alt = -1
   Insn 223: point = 58, n_alt = 0
   Insn 222: point = 58, n_alt = 0
   Insn 423: point = 60, n_alt = 3
   Insn 219: point = 61, n_alt = 14
   Insn 217: point = 62, n_alt = 0
   Insn 216: point = 64, n_alt = 3
   Insn 211: point = 65, n_alt = 0
   Insn 422: point = 67, n_alt = -2
   Insn 210: point = 69, n_alt = 2
   Insn 421: point = 70, n_alt = 0
  BB 24
   Insn 257: point = 72, n_alt = -1
   Insn 256: point = 72, n_alt = 0
   Insn 255: point = 72, n_alt = 0
   Insn 252: point = 73, n_alt = 0
   Insn 249: point = 74, n_alt = 15
   Insn 425: point = 75, n_alt = 3
   Insn 247: point = 76, n_alt = 15
   Insn 397: point = 77, n_alt = -2
   Insn 396: point = 78, n_alt = -2
   Insn 240: point = 79, n_alt = 0
   Insn 239: point = 79, n_alt = 14
   Insn 238: point = 79, n_alt = -2
   Insn 229: point = 80, n_alt = 1
   Insn 228: point = 82, n_alt = 0
   Insn 424: point = 84, n_alt = 0
  BB 22
   Insn 6: point = 86, n_alt = 0
   Insn 205: point = 87, n_alt = 3
  BB 29
   Insn 299: point = 89, n_alt = -1
   Insn 298: point = 89, n_alt = 0
  BB 20
   Insn 200: point = 90, n_alt = -1
   Insn 199: point = 90, n_alt = 0
   Insn 420: point = 90, n_alt = 5
   Insn 206: point = 92, n_alt = 3
   Insn 7: point = 93, n_alt = 1
   Insn 419: point = 94, n_alt = 1
   Insn 192: point = 96, n_alt = 2
   Insn 418: point = 97, n_alt = -2
   Insn 191: point = 98, n_alt = 0
   Insn 190: point = 99, n_alt = 0
   Insn 187: point = 100, n_alt = -2
   Insn 395: point = 102, n_alt = -2
   Insn 186: point = 103, n_alt = 0
   Insn 185: point = 103, n_alt = -2
   Insn 184: point = 104, n_alt = -2
   Insn 183: point = 105, n_alt = -2
   Insn 182: point = 106, n_alt = 0
   Insn 181: point = 106, n_alt = 0
   Insn 180: point = 107, n_alt = 0
   Insn 179: point = 108, n_alt = 0
  BB 12
   Insn 77: point = 110, n_alt = 0
   Insn 76: point = 110, n_alt = -2
   Insn 75: point = 111, n_alt = -2
   Insn 388: point = 113, n_alt = -2
   Insn 74: point = 114, n_alt = 0
   Insn 73: point = 114, n_alt = -2
   Insn 70: point = 115, n_alt = -2
   Insn 387: point = 117, n_alt = -2
   Insn 69: point = 118, n_alt = 0
   Insn 68: point = 118, n_alt = -2
  BB 7
   Insn 400: point = 120, n_alt = -1
  BB 6
   Insn 47: point = 121, n_alt = -1
   Insn 46: point = 121, n_alt = 0
  BB 13
   Insn 106: point = 123, n_alt = 0
   Insn 105: point = 123, n_alt = -2
   Insn 104: point = 124, n_alt = -2
   Insn 392: point = 125, n_alt = -2
   Insn 98: point = 126, n_alt = -2
   Insn 391: point = 128, n_alt = -2
   Insn 97: point = 129, n_alt = 0
   Insn 96: point = 129, n_alt = -2
   Insn 95: point = 130, n_alt = -2
   Insn 390: point = 131, n_alt = -2
   Insn 85: point = 132, n_alt = -2
   Insn 389: point = 134, n_alt = -2
   Insn 84: point = 135, n_alt = 0
   Insn 83: point = 135, n_alt = -2
  BB 8
   Insn 54: point = 137, n_alt = -1
   Insn 53: point = 137, n_alt = 0
  BB 5
   Insn 42: point = 139, n_alt = -1
   Insn 41: point = 139, n_alt = 0
  BB 4
   Insn 37: point = 140, n_alt = -1
  BB 3
   Insn 32: point = 141, n_alt = -1
   Insn 31: point = 141, n_alt = 0
   Insn 30: point = 141, n_alt = 4
   Insn 29: point = 142, n_alt = 3
  BB 2
   Insn 16: point = 144, n_alt = -1
   Insn 15: point = 144, n_alt = 0
   Insn 11: point = 145, n_alt = 2
   Insn 386: point = 146, n_alt = -2
   Insn 2: point = 147, n_alt = -2
   Insn 385: point = 149, n_alt = -2
 r99: [30..94]
 r118: [47..93] [37..43] [30..33]
 r174: [30..90]
Compressing live ranges: from 150 to 6 - 4%
Ranges after the compression:
 r99: [0..5]
 r118: [0..5]
 r174: [0..5]

******** Rematerialization #1: ********

df_worklist_dataflow_doublequeue: n_basic_blocks 32 n_edges 47 count 37 (  1.2)
df_worklist_dataflow_doublequeue: n_basic_blocks 32 n_edges 47 count 32 (    1)

Cands:
0 (nop=0, remat_regno=118, reload_regno=-1):
(insn 7 198 206 20 (set (reg/v:SI 118 [ i ])
                    (const_int 0 [0])) "cmodules/fbgc_math.c":91:15 67 {*movsi_internal}
                 (expr_list:REG_EQUAL (const_int 0 [0])
                    (nil)))
1 (nop=0, remat_regno=174, reload_regno=190):
(insn 206 7 420 20 (parallel [
                        (set (reg/f:DI 190 [orig:174 pretmp_137 ] [174])
                            (plus:DI (reg/v/f:DI 129 [ <retval> ])
                                (const_int 14 [0xe])))
                        (clobber (reg:CC 17 flags))
                    ]) 191 {*adddi_1}
                 (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil)))
2 (nop=0, remat_regno=118, reload_regno=-1):
(insn 432 427 288 28 (set (reg/v:SI 118 [ i ])
                    (reg/v:SI 199 [orig:118 i ] [118])) "cmodules/fbgc_math.c":91:32 67 {*movsi_internal}
                 (nil))
3 (nop=0, remat_regno=118, reload_regno=-1):
(insn 433 430 303 30 (set (reg/v:SI 118 [ i ])
                    (reg/v:SI 200 [orig:118 i ] [118])) "cmodules/fbgc_math.c":91:32 67 {*movsi_internal}
                 (nil))

BB 2:
  register live in: 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129 130
  changed regs: 129 130 175 176
  dead regs: 4 [si] 5 [di] 17 [flags] 175 176
  livein cands in BB 2:

        0

BB 3:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129 130
  register live out: 6 [bp] 7 [sp] 16 [argp] 17 [flags] 19 [frame] 82 83 129 130
  changed regs: 82 83
  dead regs:
  livein cands in BB 3:

        0    1

BB 4:
  register live in: 6 [bp] 7 [sp] 16 [argp] 17 [flags] 19 [frame] 82 83 129 130
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 129 130
  changed regs:
  dead regs: 17 [flags]
  livein cands in BB 4:

        0    1

BB 5:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 129
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 129
  changed regs:
  dead regs: 17 [flags]
  livein cands in BB 5:

        0    1

BB 6:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 129
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 129
  changed regs:
  dead regs: 17 [flags] 83
  livein cands in BB 6:

        0    1

BB 7:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
  changed regs:
  dead regs:
  livein cands in BB 7:

        0

BB 8:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 129
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 129
  changed regs:
  dead regs: 17 [flags] 83
  livein cands in BB 8:

        0    1

BB 9:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
  changed regs:
  dead regs:
  livein cands in BB 9:

        0    1

BB 10:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 83 129 130
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 129 130
  changed regs:
  dead regs: 17 [flags] 83
  livein cands in BB 10:

        0    1

BB 11:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
  changed regs:
  dead regs:
  livein cands in BB 11:

        0    1

BB 12:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  changed regs: 0 [ax] 5 [di] 20 [xmm0] 84 85 177 178
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 82 84 85 177 178
  livein cands in BB 12:

        0

BB 13:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  changed regs: 0 [ax] 5 [di] 20 [xmm0] 21 [xmm1] 132 138 179 180 181 182
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 82 132 138 179 180 181 182
  livein cands in BB 13:

        0

BB 14:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 130
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 89 129
  changed regs: 0 [ax] 5 [di] 88 89 129 183
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 82 130 183
  livein cands in BB 14:

        0

BB 15:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 89 129
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 94 124 129 171 173
  changed regs: 94 124 171 173
  dead regs: 89
  livein cands in BB 15:

        0    1

BB 16:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 94 124 129 171 173
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 92 94 124 129 171 173
  changed regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 92 184
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 184
  livein cands in BB 16:

        0    1

BB 17:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  register live out: 7 [sp] 16 [argp] 19 [frame]
  changed regs: 1 [dx] 2 [cx] 4 [si] 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
  livein cands in BB 17:

        0

BB 18:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 92 94 124 129 171 173
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 94 124 129 171 173
  changed regs: 1 [dx] 4 [si] 5 [di] 94 124
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 92
  livein cands in BB 18:

        0    1

BB 19:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
  changed regs:
  dead regs:
  livein cands in BB 19:

        0    1

BB 20:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 99 118 119 129 172 174
  changed regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 99 118 119 129 141 142 143 172 174 185 189 190
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 141 142 143 185 189 190
  cands generated in BB 20:

        0    1
  livein cands in BB 20:

        0
  pavout cands in BB 20:

        0    1
  avout cands in BB 20:

        0    1

BB 21:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
  changed regs:
  dead regs:
  livein cands in BB 21:

        0    1
  pavin cands in BB 21:

        0    1
  pavout cands in BB 21:

        0    1
  avin cands in BB 21:

        0    1
  avout cands in BB 21:

        0    1

BB 22:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 99 118 129 172 174
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 90 99 118 120 129 172 174
  changed regs: 90 120
  dead regs:
  livein cands in BB 22:

        0    1
  pavin cands in BB 22:

        0    1
  pavout cands in BB 22:

        0    1

BB 23:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 90 99 118 120 129 172 174
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 90 99 101 107 118 120 121 129 172 174
  changed regs: 101 107 121 144 145 146 191 192
  dead regs: 17 [flags] 144 145 146 191 192
  livein cands in BB 23:

        0    1
  pavin cands in BB 23:

        0    1
  pavout cands in BB 23:

        0    1

BB 24:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 90 99 101 107 118 120 121 129 174
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 90 99 118 120 129 172 174
  changed regs: 20 [xmm0] 21 [xmm1] 90 148 149 172 186 187 193 194
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 101 107 121 148 149 186 187 193 194
  livein cands in BB 24:

        0    1
  pavin cands in BB 24:

        0    1
  pavout cands in BB 24:

        0    1

BB 25:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 99 118 129 172 174
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 99 118 129 172 174
  changed regs:
  dead regs:
  livein cands in BB 25:

        0    1
  pavin cands in BB 25:

        0    1
  pavout cands in BB 25:

        0    1

BB 26:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 90 99 107 118 120 121 129 172 174
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 90 99 118 120 129 172 174
  changed regs: 20 [xmm0] 90 188
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 107 121 188
  livein cands in BB 26:

        0    1
  pavin cands in BB 26:

        0    1
  pavout cands in BB 26:

        0    1

BB 27:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 99 118 129 172 174
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 99 118 119 129 172 174
  changed regs: 119
  dead regs:
  livein cands in BB 27:

        0    1
  pavin cands in BB 27:

        0    1
  pavout cands in BB 27:

        0    1

BB 28:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 99 118 119 129 172 174
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 99 118 119 129 172 174
  changed regs: 118 196 199 203
  dead regs: 17 [flags] 118 196 199 203
  livein cands in BB 28:

        0    1
  pavin cands in BB 28:

        0    1
  pavout cands in BB 28:

        1

BB 29:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 99 118 119 129 172 174
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 99 118 119 129 172 174
  changed regs:
  dead regs: 17 [flags]
  livein cands in BB 29:

        0    1
  pavin cands in BB 29:

        0    1
  pavout cands in BB 29:

        0    1

BB 30:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 99 118 119 129 172 174
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 99 118 119 129 172 174
  changed regs: 118 198 200 204
  dead regs: 17 [flags] 118 198 200 204
  livein cands in BB 30:

        0    1
  pavin cands in BB 30:

        0    1
  pavout cands in BB 30:

        1

BB 31:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  changed regs: 0 [ax]
  dead regs: 129
  livein cands in BB 31:

        0    1
  pavin cands in BB 31:

        0    1
  pavout cands in BB 31:

        0
subreg regs:
  Slot 0 regnos (width = 0):	 118
  Slot 1 regnos (width = 0):	 174
  Slot 2 regnos (width = 0):	 99
Changing spilled pseudos to memory in insn #419
Changing spilled pseudos to memory in insn #193
Changing spilled pseudos to memory in insn #7
Changing spilled pseudos to memory in insn #420
Changing spilled pseudos to memory in insn #421
Changing spilled pseudos to memory in insn #214
Changing spilled pseudos to memory in insn #423
Changing spilled pseudos to memory in insn #424
Changing spilled pseudos to memory in insn #425
Changing spilled pseudos to memory in insn #287
Changing spilled pseudos to memory in insn #437
Changing spilled pseudos to memory in insn #432
Changing spilled pseudos to memory in insn #294
Changing spilled pseudos to memory in insn #302
Changing spilled pseudos to memory in insn #435
Changing spilled pseudos to memory in insn #433
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=80, prev_offset=64)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-56, prev_offset=0)

********** Local #4: **********

	   Spilling non-eliminable hard regs: 7
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 433:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 302:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 432:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 287:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 425:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 423:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 420:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 419:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=80, prev_offset=80)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-56, prev_offset=0)
changing reg in insn 29
changing reg in insn 191
changing reg in insn 255
changing reg in insn 282
changing reg in insn 223
changing reg in insn 205
changing reg in insn 190
changing reg in insn 181
changing reg in insn 180
changing reg in insn 179
changing reg in insn 177
changing reg in insn 112
changing reg in insn 83
changing reg in insn 68
changing reg in insn 30
changing reg in insn 180
changing reg in insn 179
changing reg in insn 30
changing reg in insn 60
changing reg in insn 53
changing reg in insn 46
changing reg in insn 41
changing reg in insn 31
changing reg in insn 70
changing reg in insn 73
changing reg in insn 71
changing reg in insn 75
changing reg in insn 76
changing reg in insn 112
changing reg in insn 169
changing reg in insn 130
changing reg in insn 120
changing reg in insn 115
changing reg in insn 113
changing reg in insn 122
changing reg in insn 133
changing reg in insn 123
changing reg in insn 269
changing reg in insn 252
changing reg in insn 6
changing reg in insn 273
changing reg in insn 256
changing reg in insn 270
changing reg in insn 269
changing reg in insn 253
changing reg in insn 252
changing reg in insn 211
changing reg in insn 208
changing reg in insn 143
changing reg in insn 160
changing reg in insn 146
changing reg in insn 144
changing reg in insn 164
changing reg in insn 5
changing reg in insn 169
changing reg in insn 165
changing reg in insn 164
changing reg in insn 159
changing reg in insn 135
changing reg in insn 211
changing reg in insn 228
changing reg in insn 216
changing reg in insn 214
changing reg in insn 212
changing reg in insn 219
changing reg in insn 238
changing reg in insn 264
changing reg in insn 220
changing reg in insn 282
changing reg in insn 190
changing reg in insn 306
changing reg in insn 290
changing reg in insn 199
changing reg in insn 205
changing reg in insn 239
changing reg in insn 219
changing reg in insn 222
changing reg in insn 267
changing reg in insn 247
changing reg in insn 398
changing reg in insn 396
changing reg in insn 167
changing reg in insn 133
changing reg in insn 167
changing reg in insn 141
changing reg in insn 187
changing reg in insn 117
changing reg in insn 11
changing reg in insn 206
changing reg in insn 337
changing reg in insn 188
changing reg in insn 161
changing reg in insn 120
changing reg in insn 118
changing reg in insn 2
changing reg in insn 122
changing reg in insn 29
changing reg in insn 23
changing reg in insn 19
changing reg in insn 85
changing reg in insn 95
changing reg in insn 98
changing reg in insn 105
changing reg in insn 179
changing reg in insn 183
changing reg in insn 180
changing reg in insn 184
changing reg in insn 181
changing reg in insn 185
changing reg in insn 211
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 222
changing reg in insn 219
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 249
changing reg in insn 239
changing reg in insn 370
changing reg in insn 139
changing reg in insn 191
changing reg in insn 255
changing reg in insn 298
changing reg in insn 273
changing reg in insn 256
changing reg in insn 192
changing reg in insn 137
changing reg in insn 380
changing reg in insn 385
changing reg in insn 2
changing reg in insn 386
changing reg in insn 15
changing reg in insn 387
changing reg in insn 70
changing reg in insn 388
changing reg in insn 75
changing reg in insn 389
changing reg in insn 85
changing reg in insn 390
changing reg in insn 96
changing reg in insn 391
changing reg in insn 98
changing reg in insn 392
changing reg in insn 104
changing reg in insn 393
changing reg in insn 117
changing reg in insn 394
changing reg in insn 143
changing reg in insn 395
changing reg in insn 187
changing reg in insn 396
changing reg in insn 247
changing reg in insn 397
changing reg in insn 249
changing reg in insn 398
changing reg in insn 267
deleting insn with uid = 385.
deleting insn with uid = 386.
deleting insn with uid = 387.
deleting insn with uid = 70.
deleting insn with uid = 73.
deleting insn with uid = 388.
deleting insn with uid = 75.
deleting insn with uid = 76.
deleting insn with uid = 389.
deleting insn with uid = 85.
deleting insn with uid = 390.
deleting insn with uid = 95.
deleting insn with uid = 96.
deleting insn with uid = 391.
deleting insn with uid = 98.
deleting insn with uid = 392.
deleting insn with uid = 104.
deleting insn with uid = 105.
deleting insn with uid = 393.
deleting insn with uid = 394.
deleting insn with uid = 160.
deleting insn with uid = 183.
deleting insn with uid = 184.
deleting insn with uid = 185.
deleting insn with uid = 395.
deleting insn with uid = 422.
deleting insn with uid = 238.
deleting insn with uid = 396.
deleting insn with uid = 397.
deleting insn with uid = 264.
deleting insn with uid = 398.
deleting insn with uid = 427.
deleting insn with uid = 428.
deleting insn with uid = 430.
deleting insn with uid = 431.


try_optimize_cfg iteration 1

Forwarding edge 6->7 to 12 failed.
Forwarding edge 8->9 to 31 failed.
Forwarding edge 10->11 to 31 failed.
Forwarding edge 18->19 to 31 failed.
Forwarding edge 20->21 to 31 failed.
Forwarding edge 24->25 to 27 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 74.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 97.
verify found no changes in insn with uid = 106.
verify found no changes in insn with uid = 116.
verify found no changes in insn with uid = 142.
verify found no changes in insn with uid = 154.
verify found no changes in insn with uid = 162.
verify found no changes in insn with uid = 186.
verify found no changes in insn with uid = 240.
verify found no changes in insn with uid = 265.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 32 n_edges 47 count 39 (  1.2)
df_worklist_dataflow_doublequeue: n_basic_blocks 32 n_edges 47 count 38 (  1.2)


fbgc_cos

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0] 21 [xmm1] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;;  ref usage 	r0={21d,17u} r1={22d,11u} r2={20d,9u} r3={8d,13u} r4={18d,7u} r5={22d,11u} r6={4d,13u} r7={1d,62u} r8={13d} r9={13d} r10={13d} r11={13d} r12={13d} r13={13d} r14={13d} r15={13d} r17={43d,17u} r18={13d} r20={15d,10u} r21={15d,4u} r22={14d} r23={14d} r24={14d} r25={14d} r26={14d} r27={14d} r28={13d} r29={13d} r30={13d} r31={13d} r32={13d} r33={13d} r34={13d} r35={13d} r36={14d} r37={14d} r38={13d} r39={13d} r40={3d,6u} r41={2d,3u} r42={2d,15u,2e} r43={5d,12u} r44={13d} r45={13d} r46={13d} r47={13d} r48={13d} r49={13d} r50={13d} r51={13d} r52={13d} r53={13d} r54={13d} r55={13d} r56={13d} r57={13d} r58={13d} r59={13d} r60={13d} r61={13d} r62={13d} r63={13d} r64={13d} r65={13d} r66={13d} r67={13d} r68={13d} r69={13d} r70={13d} r71={13d} r72={13d} r73={13d} r74={13d} r75={13d} 
;;    total ref usage 1188{976d,210u,2e} in 204{191 regular + 13 call} insns.
(note 1 0 12 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 1073741824 (estimated locally), maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [always]  count:1073741824 (estimated locally) (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags] 40 [r12]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 3 [bx] 17 [flags] 40 [r12]
;; live  kill	
(note 12 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 12 3 2 (set (reg/v/f:DI 3 bx [orig:130 arg ] [130])
        (reg:DI 5 di [175])) "cmodules/fbgc_math.c":121:1 66 {*movdi_internal}
     (nil))
(note 3 2 4 2 NOTE_INSN_DELETED)
(note 4 3 14 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 14 4 11 2 (debug_marker) "cmodules/fbgc_math.c":121:1 -1
     (nil))
(insn 11 14 15 2 (set (reg/v/f:DI 40 r12 [orig:129 <retval> ] [129])
        (const_int 0 [0])) "cmodules/fbgc_math.c":121:1 66 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 15 11 16 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 4 si [176])
            (const_int 1 [0x1]))) "cmodules/fbgc_math.c":121:1 11 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 336)
            (pc))) "cmodules/fbgc_math.c":121:1 659 {*jcc}
     (int_list:REG_BR_PROB 662283964 (nil))
 -> 336)
;;  succ:       3 [38.3% (guessed)]  count:411457864 (estimated locally) (FALLTHRU)
;;              31 [61.7% (guessed)]  count:662283960 (estimated locally)
;; lr  out 	 3 [bx] 7 [sp] 40 [r12]
;; live  out 	 3 [bx] 7 [sp] 40 [r12]

;; basic block 3, loop depth 0, count 411457868 (estimated locally), maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [38.3% (guessed)]  count:411457864 (estimated locally) (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 40 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 42 [r14]
;; live  in  	 3 [bx] 7 [sp] 40 [r12]
;; live  gen 	 0 [ax] 17 [flags] 42 [r14]
;; live  kill	
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 18 17 19 3 (var_location:SI D#14 (const_int 1 [0x1])) -1
     (nil))
(debug_insn 19 18 20 3 (var_location:DI arg (reg/v/f:DI 3 bx [orig:130 arg ] [130])) -1
     (nil))
(debug_insn 20 19 21 3 (debug_marker:BLK) "cmodules/fbgc_math.c":121:1 -1
     (nil))
(debug_insn 21 20 22 3 (var_location:SI D#15 (debug_expr:SI D#14)) -1
     (nil))
(debug_insn 22 21 23 3 (var_location:SI argc (debug_expr:SI D#15)) -1
     (nil))
(debug_insn 23 22 24 3 (var_location:DI arg (reg/v/f:DI 3 bx [orig:130 arg ] [130])) -1
     (nil))
(debug_insn 24 23 25 3 (var_location:SI argc (const_int 1 [0x1])) -1
     (nil))
(debug_insn 25 24 26 3 (var_location:DI fun (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7f213e47d900 cos>)) -1
     (nil))
(debug_insn 26 25 27 3 (var_location:DI zfun (symbol_ref:DI ("c_cos") [flags 0x3]  <function_decl 0x7f213dfa5e00 c_cos>)) -1
     (nil))
(debug_insn 27 26 28 3 (debug_marker:BLK) "cmodules/fbgc_math.c":50:22 -1
     (nil))
(debug_insn 28 27 29 3 (debug_marker) "cmodules/fbgc_math.c":53:2 -1
     (nil))
(insn 29 28 30 3 (set (reg/f:DI 42 r14 [orig:82 _10 ] [82])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:130 arg ] [130]) [3 *arg_5(D)+0 S8 A64])) "cmodules/fbgc_math.c":53:12 66 {*movdi_internal}
     (nil))
(insn 30 29 31 3 (set (reg:QI 0 ax [orig:83 _11 ] [83])
        (mem:QI (reg/f:DI 42 r14 [orig:82 _10 ] [82]) [0 _10->type+0 S1 A8])) "cmodules/fbgc_math.c":53:15 69 {*movqi_internal}
     (nil))
(insn 31 30 32 3 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 0 ax [orig:83 _11 ] [83])
            (const_int 7 [0x7]))) "cmodules/fbgc_math.c":53:2 9 {*cmpqi_1}
     (nil))
(jump_insn 32 31 33 3 (set (pc)
        (if_then_else (eq (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 174)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 214748374 (nil))
 -> 174)
;;  succ:       4 [80.0% (adjusted)]  count:329166293 (estimated locally) (FALLTHRU)
;;              20 [20.0% (adjusted)]  count:82291575 (estimated locally)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 17 [flags] 40 [r12] 42 [r14]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 17 [flags] 40 [r12] 42 [r14]

;; basic block 4, loop depth 0, count 411457868 (estimated locally), maybe hot
;; Invalid sum of incoming counts 329166293 (estimated locally), should be 411457868 (estimated locally)
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [80.0% (adjusted)]  count:329166293 (estimated locally) (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 17 [flags] 40 [r12] 42 [r14]
;; lr  use 	 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 17 [flags] 40 [r12] 42 [r14]
;; live  gen 	
;; live  kill	
(note 33 32 37 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 37 33 38 4 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 402653190 (nil))
 -> 58)
;;  succ:       5 [62.5% (adjusted)]  count:257161168 (estimated locally) (FALLTHRU)
;;              10 [37.5% (adjusted)]  count:154296701 (estimated locally)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 40 [r12] 42 [r14]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 40 [r12] 42 [r14]

;; basic block 5, loop depth 0, count 411457868 (estimated locally), maybe hot
;; Invalid sum of incoming counts 257161168 (estimated locally), should be 411457868 (estimated locally)
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [62.5% (adjusted)]  count:257161168 (estimated locally) (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 40 [r12] 42 [r14]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 40 [r12] 42 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
(note 38 37 41 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 41 38 42 5 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 0 ax [orig:83 _11 ] [83])
            (const_int 4 [0x4]))) "cmodules/fbgc_math.c":53:2 9 {*cmpqi_1}
     (nil))
(jump_insn 42 41 43 5 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 536870926 (nil))
 -> 51)
;;  succ:       6 [50.0% (adjusted)]  count:205728931 (estimated locally) (FALLTHRU)
;;              8 [50.0% (adjusted)]  count:205728937 (estimated locally)
;; lr  out 	 0 [ax] 7 [sp] 40 [r12] 42 [r14]
;; live  out 	 0 [ax] 7 [sp] 40 [r12] 42 [r14]

;; basic block 6, loop depth 0, count 411457868 (estimated locally), maybe hot
;; Invalid sum of incoming counts 205728931 (estimated locally), should be 411457868 (estimated locally)
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [50.0% (adjusted)]  count:205728931 (estimated locally) (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 40 [r12] 42 [r14]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 40 [r12] 42 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
(note 43 42 46 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 46 43 47 6 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 0 ax [orig:83 _11 ] [83])
            (const_int 2 [0x2]))) "cmodules/fbgc_math.c":53:2 9 {*cmpqi_1}
     (nil))
(jump_insn 47 46 399 6 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 336)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 596523246 (nil))
 -> 336)
;;  succ:       31 [55.6% (adjusted)]  count:228587706 (estimated locally)
;;              7 [44.4% (adjusted)]  count:182870162 (estimated locally) (FALLTHRU)
;; lr  out 	 7 [sp] 40 [r12] 42 [r14]
;; live  out 	 7 [sp] 40 [r12] 42 [r14]

;; basic block 7, loop depth 0, count 182870162 (estimated locally), maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [44.4% (adjusted)]  count:182870162 (estimated locally) (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp] 42 [r14]
;; live  gen 	
;; live  kill	
(note 399 47 400 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 400 399 401 7 (set (pc)
        (label_ref 65)) 660 {jump}
     (nil)
 -> 65)
;;  succ:       12 [always]  count:182870162 (estimated locally)
;; lr  out 	 7 [sp] 42 [r14]
;; live  out 	 7 [sp] 42 [r14]

(barrier 401 400 51)
;; basic block 8, loop depth 0, count 411457868 (estimated locally), maybe hot
;; Invalid sum of incoming counts 205728937 (estimated locally), should be 411457868 (estimated locally)
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [50.0% (adjusted)]  count:205728937 (estimated locally)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 40 [r12] 42 [r14]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 40 [r12] 42 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 51 401 52 8 111 (nil) [1 uses])
(note 52 51 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:83 _11 ] [83])
            (const_int 5 [0x5]))) "cmodules/fbgc_math.c":53:2 9 {*cmpqi_1}
     (nil))
(jump_insn 54 53 402 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 80)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 858993454 (nil))
 -> 80)
;;  succ:       9 [20.0% (adjusted)]  count:82291578 (estimated locally) (FALLTHRU)
;;              13 [80.0% (adjusted)]  count:329166290 (estimated locally)
;; lr  out 	 7 [sp] 40 [r12] 42 [r14]
;; live  out 	 7 [sp] 40 [r12] 42 [r14]

;; basic block 9, loop depth 0, count 82291578 (estimated locally), maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [20.0% (adjusted)]  count:82291578 (estimated locally) (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 40 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp] 40 [r12]
;; live  gen 	
;; live  kill	
(note 402 54 403 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(jump_insn 403 402 404 9 (set (pc)
        (label_ref 336)) 660 {jump}
     (nil)
 -> 336)
;;  succ:       31 [always]  count:82291578 (estimated locally)
;; lr  out 	 7 [sp] 40 [r12]
;; live  out 	 7 [sp] 40 [r12]

(barrier 404 403 58)
;; basic block 10, loop depth 0, count 411457868 (estimated locally), maybe hot
;; Invalid sum of incoming counts 154296701 (estimated locally), should be 411457868 (estimated locally)
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [37.5% (adjusted)]  count:154296701 (estimated locally)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 40 [r12] 42 [r14]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 40 [r12] 42 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 58 404 59 10 110 (nil) [1 uses])
(note 59 58 60 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:83 _11 ] [83])
            (const_int 8 [0x8]))) "cmodules/fbgc_math.c":53:2 9 {*cmpqi_1}
     (nil))
(jump_insn 61 60 405 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 109)
            (pc))) "cmodules/fbgc_math.c":53:2 659 {*jcc}
     (int_list:REG_BR_PROB 715827886 (nil))
 -> 109)
;;  succ:       11 [33.3% (adjusted)]  count:137152624 (estimated locally) (FALLTHRU)
;;              14 [66.7% (adjusted)]  count:274305244 (estimated locally)
;; lr  out 	 3 [bx] 7 [sp] 40 [r12] 42 [r14]
;; live  out 	 3 [bx] 7 [sp] 40 [r12] 42 [r14]

;; basic block 11, loop depth 0, count 137152624 (estimated locally), maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [33.3% (adjusted)]  count:137152624 (estimated locally) (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 40 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp] 40 [r12]
;; live  gen 	
;; live  kill	
(note 405 61 406 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(jump_insn 406 405 407 11 (set (pc)
        (label_ref 336)) 660 {jump}
     (nil)
 -> 336)
;;  succ:       31 [always]  count:137152624 (estimated locally)
;; lr  out 	 7 [sp] 40 [r12]
;; live  out 	 7 [sp] 40 [r12]

(barrier 407 406 65)
;; basic block 12, loop depth 0, count 82291576 (estimated locally), maybe hot
;; Invalid sum of incoming counts 182870162 (estimated locally), should be 82291576 (estimated locally)
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [always]  count:182870162 (estimated locally)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r14]
;; lr  use 	 7 [sp] 42 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 7 [sp] 42 [r14]
;; live  gen 	 0 [ax] 5 [di] 20 [xmm0]
;; live  kill	
(code_label 65 407 66 12 112 (nil) [1 uses])
(note 66 65 67 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(debug_insn 67 66 68 12 (debug_marker) "cmodules/fbgc_math.c":58:4 -1
     (nil))
(insn 68 67 69 12 (set (reg:DI 5 di)
        (reg/f:DI 42 r14 [orig:82 _10 ] [82])) "cmodules/fbgc_math.c":58:19 66 {*movdi_internal}
     (nil))
(call_insn 69 68 71 12 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_double") [flags 0x41]  <function_decl 0x7f213e3db700 convert_fbgc_object_to_double>) [0 convert_fbgc_object_to_double S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":58:19 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_double") [flags 0x41]  <function_decl 0x7f213e3db700 convert_fbgc_object_to_double>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(debug_insn 71 69 72 12 (var_location:DF dbarg (reg/v:DF 20 xmm0 [orig:84 dbarg ] [84])) "cmodules/fbgc_math.c":58:19 -1
     (nil))
(debug_insn 72 71 74 12 (debug_marker) "cmodules/fbgc_math.c":59:4 -1
     (nil))
(call_insn/u 74 72 77 12 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7f213e47d900 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":59:11 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7f213e47d900 cos>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(call_insn/j 77 74 78 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_double_object") [flags 0x41]  <function_decl 0x7f213e3e6d00 new_fbgc_double_object>) [0 new_fbgc_double_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":59:11 681 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_double_object") [flags 0x41]  <function_decl 0x7f213e3e6d00 new_fbgc_double_object>)
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
;;  succ:       EXIT [always]  count:82291576 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 78 77 80)
;; basic block 13, loop depth 0, count 82291576 (estimated locally), maybe hot
;; Invalid sum of incoming counts 329166290 (estimated locally), should be 82291576 (estimated locally)
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [80.0% (adjusted)]  count:329166290 (estimated locally)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r14]
;; lr  use 	 7 [sp] 42 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 7 [sp] 42 [r14]
;; live  gen 	 0 [ax] 5 [di] 20 [xmm0] 21 [xmm1]
;; live  kill	
(code_label 80 78 81 13 113 (nil) [1 uses])
(note 81 80 82 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(debug_insn 82 81 83 13 (debug_marker) "cmodules/fbgc_math.c":63:4 -1
     (nil))
(insn 83 82 84 13 (set (reg:DI 5 di)
        (reg/f:DI 42 r14 [orig:82 _10 ] [82])) "cmodules/fbgc_math.c":63:27 66 {*movdi_internal}
     (nil))
(call_insn 84 83 86 13 (set (parallel:TI [
                (expr_list:REG_DEP_TRUE (reg:DF 20 xmm0)
                    (const_int 0 [0]))
                (expr_list:REG_DEP_TRUE (reg:DF 21 xmm1)
                    (const_int 8 [0x8]))
            ])
        (call (mem:QI (symbol_ref:DI ("convert_fbgc_object_to_complex") [flags 0x41]  <function_decl 0x7f213e3db800 convert_fbgc_object_to_complex>) [0 convert_fbgc_object_to_complex S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":63:27 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("convert_fbgc_object_to_complex") [flags 0x41]  <function_decl 0x7f213e3db800 convert_fbgc_object_to_complex>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(note 86 84 90 13 NOTE_INSN_DELETED)
(debug_insn 90 86 97 13 (debug_marker) "cmodules/fbgc_math.c":64:4 -1
     (nil))
(call_insn 97 90 99 13 (set (parallel:TI [
                (expr_list:REG_DEP_TRUE (reg:DF 20 xmm0)
                    (const_int 0 [0]))
                (expr_list:REG_DEP_TRUE (reg:DF 21 xmm1)
                    (const_int 8 [0x8]))
            ])
        (call (mem:QI (symbol_ref:DI ("c_cos") [flags 0x3]  <function_decl 0x7f213dfa5e00 c_cos>) [0 c_cos S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":64:9 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("c_cos") [flags 0x3]  <function_decl 0x7f213dfa5e00 c_cos>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (use (reg:DF 21 xmm1))
        (expr_list (use (reg:DF 20 xmm0))
            (nil))))
(note 99 97 103 13 NOTE_INSN_DELETED)
(debug_insn 103 99 106 13 (debug_marker) "cmodules/fbgc_math.c":65:4 -1
     (nil))
(call_insn/j 106 103 107 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_complex_object") [flags 0x41]  <function_decl 0x7f213e3f0300 new_fbgc_complex_object>) [0 new_fbgc_complex_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":65:11 681 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_complex_object") [flags 0x41]  <function_decl 0x7f213e3f0300 new_fbgc_complex_object>)
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (expr_list:DF (use (reg:DF 21 xmm1))
            (nil))))
;;  succ:       EXIT [always]  count:82291576 (estimated locally) (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 107 106 109)
;; basic block 14, loop depth 0, count 82291576 (estimated locally), maybe hot
;; Invalid sum of incoming counts 274305244 (estimated locally), should be 82291576 (estimated locally)
;;  prev block 13, next block 15, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [66.7% (adjusted)]  count:274305244 (estimated locally)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 42 [r14]
;; lr  use 	 3 [bx] 7 [sp] 42 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 3 [bx] 7 [sp] 42 [r14]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags] 40 [r12]
;; live  kill	
(code_label 109 107 110 14 114 (nil) [1 uses])
(note 110 109 111 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(debug_insn 111 110 112 14 (debug_marker) "cmodules/fbgc_math.c":69:4 -1
     (nil))
(insn 112 111 113 14 (set (reg/v:SI 6 bp [orig:88 sz ] [88])
        (mem:SI (plus:DI (reg/f:DI 42 r14 [orig:82 _10 ] [82])
                (const_int 13 [0xd])) [5 MEM[(struct fbgc_tuple_object *)_10].size+0 S4 A8])) "cmodules/fbgc_math.c":69:11 67 {*movsi_internal}
     (nil))
(debug_insn 113 112 114 14 (var_location:SI sz (reg/v:SI 6 bp [orig:88 sz ] [88])) "cmodules/fbgc_math.c":69:11 -1
     (nil))
(debug_insn 114 113 115 14 (debug_marker) "cmodules/fbgc_math.c":70:4 -1
     (nil))
(insn 115 114 116 14 (set (reg:SI 5 di)
        (reg/v:SI 6 bp [orig:88 sz ] [88])) "cmodules/fbgc_math.c":70:34 67 {*movsi_internal}
     (nil))
(call_insn 116 115 117 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f213e3fec00 new_fbgc_tuple_object>) [0 new_fbgc_tuple_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":70:34 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f213e3fec00 new_fbgc_tuple_object>)
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 117 116 118 14 (set (reg/v/f:DI 40 r12 [orig:129 <retval> ] [129])
        (reg:DI 0 ax [183])) "cmodules/fbgc_math.c":70:34 66 {*movdi_internal}
     (nil))
(debug_insn 118 117 119 14 (var_location:DI res_tp (reg/v/f:DI 40 r12 [orig:129 <retval> ] [129])) "cmodules/fbgc_math.c":70:34 -1
     (nil))
(debug_insn 119 118 120 14 (debug_marker) "cmodules/fbgc_math.c":71:4 -1
     (nil))
(insn 120 119 121 14 (set (mem:SI (plus:DI (reg/v/f:DI 40 r12 [orig:129 <retval> ] [129])
                (const_int 13 [0xd])) [5 MEM[(struct fbgc_tuple_object *)res_tp_19].size+0 S4 A8])
        (reg/v:SI 6 bp [orig:88 sz ] [88])) "cmodules/fbgc_math.c":71:35 67 {*movsi_internal}
     (nil))
(debug_insn 121 120 122 14 (debug_marker) "cmodules/fbgc_math.c":72:4 -1
     (nil))
(insn 122 121 123 14 (set (reg/f:DI 3 bx [orig:89 _20 ] [89])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:130 arg ] [130]) [3 *arg_5(D)+0 S8 A64])) "cmodules/fbgc_math.c":72:39 66 {*movdi_internal}
     (nil))
(debug_insn 123 122 124 14 (var_location:DI D#38 (plus:DI (reg/f:DI 3 bx [orig:89 _20 ] [89])
        (const_int 17 [0x11]))) "cmodules/fbgc_math.c":72:26 -1
     (nil))
(debug_insn 124 123 125 14 (var_location:DI tp_content (debug_expr:DI D#38)) "cmodules/fbgc_math.c":72:26 -1
     (nil))
(debug_insn 125 124 126 14 (debug_marker) "cmodules/fbgc_math.c":72:67 -1
     (nil))
(debug_insn 126 125 127 14 (debug_marker) "cmodules/fbgc_math.c":74:4 -1
     (nil))
(debug_insn 127 126 128 14 (debug_marker) "cmodules/fbgc_math.c":74:8 -1
     (nil))
(debug_insn 128 127 129 14 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(debug_insn 129 128 130 14 (debug_marker) "cmodules/fbgc_math.c":74:22 -1
     (nil))
(insn 130 129 131 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 6 bp [orig:88 sz ] [88])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":74:4 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 131 130 132 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 336)
            (pc))) "cmodules/fbgc_math.c":74:4 659 {*jcc}
     (int_list:REG_BR_PROB 118111604 (nil))
 -> 336)
;;  succ:       15 [89.0% (guessed)]  count:73239503 (estimated locally) (FALLTHRU)
;;              31 [11.0% (guessed)]  count:9052073 (estimated locally)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12]

;; basic block 15, loop depth 0, count 73239503 (estimated locally), maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       14 [89.0% (guessed)]  count:73239503 (estimated locally) (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags] 41 [r13] 42 [r14] 43 [r15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12]
;; live  gen 	 3 [bx] 41 [r13] 42 [r14] 43 [r15]
;; live  kill	 17 [flags]
(note 132 131 133 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 5 15 (parallel [
            (set (reg:DI 3 bx [orig:124 ivtmp.110 ] [124])
                (plus:DI (reg/f:DI 3 bx [orig:89 _20 ] [89])
                    (const_int 17 [0x11])))
            (clobber (reg:CC 17 flags))
        ]) 191 {*adddi_1}
     (nil))
(insn 5 133 370 15 (set (reg/v:SI 43 r15 [orig:94 i ] [94])
        (const_int 0 [0])) "cmodules/fbgc_math.c":74:15 67 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 370 5 137 15 (set (reg:DI 42 r14 [171])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7f213e47d900 cos>)
                    ] UNSPEC_GOTPCREL)) [11  S8 A8])) 66 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7f213e47d900 cos>)
                    ] UNSPEC_GOTPCREL)) [11  S8 A8])
        (nil)))
(insn 137 370 168 15 (set (reg/f:DI 41 r13 [173])
        (symbol_ref:DI ("c_cos") [flags 0x3]  <function_decl 0x7f213dfa5e00 c_cos>)) "cmodules/fbgc_math.c":76:35 66 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref:DI ("c_cos") [flags 0x3]  <function_decl 0x7f213dfa5e00 c_cos>)
        (nil)))
;;  succ:       16 [always]  count:73239503 (estimated locally) (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]

;; basic block 16, loop depth 0, count 663665780 (estimated locally), maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [always]  count:73239503 (estimated locally) (FALLTHRU)
;;              18 [89.0% (guessed)]  count:590426281 (estimated locally) (DFS_BACK)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; lr  use 	 3 [bx] 7 [sp] 41 [r13] 42 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  kill	
(code_label 168 137 134 16 116 (nil) [1 uses])
(note 134 168 135 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(debug_insn 135 134 136 16 (var_location:SI i (reg/v:SI 43 r15 [orig:94 i ] [94])) -1
     (nil))
(debug_insn 136 135 380 16 (debug_marker) "cmodules/fbgc_math.c":76:5 -1
     (nil))
(insn 380 136 139 16 (set (reg:DI 2 cx)
        (reg/f:DI 41 r13 [173])) "cmodules/fbgc_math.c":76:35 66 {*movdi_internal}
     (nil))
(insn 139 380 140 16 (set (reg:DI 1 dx)
        (reg:DI 42 r14 [171])) "cmodules/fbgc_math.c":76:35 66 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7f213e47d900 cos>)
        (nil)))
(insn 140 139 141 16 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "cmodules/fbgc_math.c":76:35 67 {*movsi_internal}
     (nil))
(insn 141 140 142 16 (set (reg:DI 5 di)
        (reg:DI 3 bx [orig:124 ivtmp.110 ] [124])) "cmodules/fbgc_math.c":76:35 66 {*movdi_internal}
     (nil))
(call_insn 142 141 143 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("one_arg_math") [flags 0x3]  <function_decl 0x7f213dfac000 one_arg_math>) [0 one_arg_math S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":76:35 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("one_arg_math") [flags 0x3]  <function_decl 0x7f213dfac000 one_arg_math>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 143 142 144 16 (set (reg/v/f:DI 4 si [orig:92 result ] [92])
        (reg:DI 0 ax [184])) "cmodules/fbgc_math.c":76:35 66 {*movdi_internal}
     (nil))
(debug_insn 144 143 145 16 (var_location:DI result (reg/v/f:DI 4 si [orig:92 result ] [92])) "cmodules/fbgc_math.c":76:35 -1
     (nil))
(debug_insn 145 144 146 16 (debug_marker) "cmodules/fbgc_math.c":77:5 -1
     (nil))
(insn 146 145 147 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 4 si [orig:92 result ] [92])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":77:5 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 147 146 148 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 156)
            (pc))) "cmodules/fbgc_math.c":77:5 659 {*jcc}
     (int_list:REG_BR_PROB 1073312332 (nil))
 -> 156)
;;  succ:       18 [100.0% (guessed)]  count:663400314 (estimated locally)
;;              17 [0.0% (guessed)]  count:265466 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]

;; basic block 17, loop depth 0, count 265465 (estimated locally)
;;  prev block 16, next block 18, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       16 [0.0% (guessed)]  count:265466 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 7 [sp]
;; live  gen 	 1 [dx] 2 [cx] 4 [si] 5 [di]
;; live  kill	
(note 148 147 149 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(debug_insn 149 148 150 17 (debug_marker) "cmodules/fbgc_math.c":77:5 -1
     (nil))
(insn 150 149 151 17 (set (reg:DI 2 cx)
        (symbol_ref:DI ("__PRETTY_FUNCTION__.5776") [flags 0x2]  <var_decl 0x7f213dfa6990 __PRETTY_FUNCTION__>)) "cmodules/fbgc_math.c":77:5 66 {*movdi_internal}
     (nil))
(insn 151 150 152 17 (set (reg:SI 1 dx)
        (const_int 77 [0x4d])) "cmodules/fbgc_math.c":77:5 67 {*movsi_internal}
     (nil))
(insn 152 151 153 17 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f213e0b5900 *.LC9>)) "cmodules/fbgc_math.c":77:5 66 {*movdi_internal}
     (nil))
(insn 153 152 154 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f213e0b5990 *.LC10>)) "cmodules/fbgc_math.c":77:5 66 {*movdi_internal}
     (nil))
(call_insn 154 153 155 17 (call (mem:QI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f213e2a1c00 __assert_fail>) [0 __assert_fail S1 A8])
        (const_int 0 [0])) "cmodules/fbgc_math.c":77:5 666 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f213e2a1c00 __assert_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 155 154 156)
;; basic block 18, loop depth 0, count 663400315 (estimated locally), maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       16 [100.0% (guessed)]  count:663400314 (estimated locally)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; lr  use 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 40 [r12] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  gen 	 1 [dx] 3 [bx] 5 [di] 17 [flags] 43 [r15]
;; live  kill	 17 [flags]
(code_label 156 155 157 18 115 (nil) [1 uses])
(note 157 156 158 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(debug_insn 158 157 159 18 (debug_marker) "cmodules/fbgc_math.c":78:5 -1
     (nil))
(insn 159 158 161 18 (set (reg:SI 1 dx)
        (reg/v:SI 43 r15 [orig:94 i ] [94])) "cmodules/fbgc_math.c":78:5 67 {*movsi_internal}
     (nil))
(insn 161 159 162 18 (set (reg:DI 5 di)
        (reg/v/f:DI 40 r12 [orig:129 <retval> ] [129])) "cmodules/fbgc_math.c":78:5 66 {*movdi_internal}
     (nil))
(call_insn 162 161 163 18 (call (mem:QI (symbol_ref:DI ("set_object_in_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f213e3fee00 set_object_in_fbgc_tuple_object>) [0 set_object_in_fbgc_tuple_object S1 A8])
        (const_int 0 [0])) "cmodules/fbgc_math.c":78:5 666 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("set_object_in_fbgc_tuple_object") [flags 0x41]  <function_decl 0x7f213e3fee00 set_object_in_fbgc_tuple_object>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(debug_insn 163 162 164 18 (debug_marker) "cmodules/fbgc_math.c":74:31 -1
     (nil))
(insn 164 163 165 18 (parallel [
            (set (reg/v:SI 43 r15 [orig:94 i ] [94])
                (plus:SI (reg/v:SI 43 r15 [orig:94 i ] [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":74:31 190 {*addsi_1}
     (nil))
(debug_insn 165 164 166 18 (var_location:SI i (reg/v:SI 43 r15 [orig:94 i ] [94])) -1
     (nil))
(debug_insn 166 165 167 18 (debug_marker) "cmodules/fbgc_math.c":74:22 -1
     (nil))
(insn 167 166 169 18 (parallel [
            (set (reg:DI 3 bx [orig:124 ivtmp.110 ] [124])
                (plus:DI (reg:DI 3 bx [orig:124 ivtmp.110 ] [124])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) 191 {*adddi_1}
     (nil))
(insn 169 167 170 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 6 bp [orig:88 sz ] [88])
            (reg/v:SI 43 r15 [orig:94 i ] [94]))) "cmodules/fbgc_math.c":74:4 11 {*cmpsi_1}
     (nil))
(jump_insn 170 169 408 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 168)
            (pc))) "cmodules/fbgc_math.c":74:4 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 168)
;;  succ:       16 [89.0% (guessed)]  count:590426281 (estimated locally) (DFS_BACK)
;;              19 [11.0% (guessed)]  count:72974034 (estimated locally) (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]

;; basic block 19, loop depth 0, count 72974034 (estimated locally), maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       18 [11.0% (guessed)]  count:72974034 (estimated locally) (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 40 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp] 40 [r12]
;; live  gen 	
;; live  kill	
(note 408 170 409 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(jump_insn 409 408 410 19 (set (pc)
        (label_ref 336)) 660 {jump}
     (nil)
 -> 336)
;;  succ:       31 [always]  count:72974034 (estimated locally) (LOOP_EXIT)
;; lr  out 	 7 [sp] 40 [r12]
;; live  out 	 7 [sp] 40 [r12]

(barrier 410 409 174)
;; basic block 20, loop depth 0, count 82291576 (estimated locally), maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [20.0% (adjusted)]  count:82291575 (estimated locally)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r14]
;; lr  use 	 7 [sp] 42 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 7 [sp] 42 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 17 [flags] 40 [r12] 43 [r15]
;; live  kill	 17 [flags]
(code_label 174 410 175 20 109 (nil) [1 uses])
(note 175 174 176 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(debug_insn 176 175 177 20 (debug_marker) "cmodules/fbgc_math.c":84:4 -1
     (nil))
(debug_insn 177 176 178 20 (var_location:DI m (reg/f:DI 42 r14 [orig:82 _10 ] [82])) "cmodules/fbgc_math.c":84:32 -1
     (nil))
(debug_insn 178 177 179 20 (debug_marker) "cmodules/fbgc_math.c":85:4 -1
     (nil))
(insn 179 178 180 20 (set (reg:SI 1 dx [orig:141 MEM[(struct fbgc_matrix_object *)_10].column ] [141])
        (mem:SI (plus:DI (reg/f:DI 42 r14 [orig:82 _10 ] [82])
                (const_int 14 [0xe])) [5 MEM[(struct fbgc_matrix_object *)_10].column+0 S4 A8])) "cmodules/fbgc_math.c":85:33 67 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 42 r14 [orig:82 _10 ] [82])
                (const_int 14 [0xe])) [5 MEM[(struct fbgc_matrix_object *)_10].column+0 S4 A8])
        (nil)))
(insn 180 179 181 20 (set (reg:SI 4 si [orig:142 MEM[(struct fbgc_matrix_object *)_10].row ] [142])
        (mem:SI (plus:DI (reg/f:DI 42 r14 [orig:82 _10 ] [82])
                (const_int 10 [0xa])) [5 MEM[(struct fbgc_matrix_object *)_10].row+0 S4 A8])) "cmodules/fbgc_math.c":85:33 67 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 42 r14 [orig:82 _10 ] [82])
                (const_int 10 [0xa])) [5 MEM[(struct fbgc_matrix_object *)_10].row+0 S4 A8])
        (nil)))
(insn 181 180 182 20 (set (reg:SI 5 di [orig:143 MEM[(struct fbgc_matrix_object *)_10].sub_type ] [143])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 42 r14 [orig:82 _10 ] [82])
                    (const_int 9 [0x9])) [0 MEM[(struct fbgc_matrix_object *)_10].sub_type+0 S1 A8]))) "cmodules/fbgc_math.c":85:33 119 {*zero_extendqisi2}
     (nil))
(insn 182 181 186 20 (set (reg:SI 2 cx)
        (const_int 10 [0xa])) "cmodules/fbgc_math.c":85:33 67 {*movsi_internal}
     (nil))
(call_insn 186 182 187 20 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("new_fbgc_matrix_object") [flags 0x41]  <function_decl 0x7f213e3fe100 new_fbgc_matrix_object>) [0 new_fbgc_matrix_object S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":85:33 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("new_fbgc_matrix_object") [flags 0x41]  <function_decl 0x7f213e3fe100 new_fbgc_matrix_object>)
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
(insn 187 186 188 20 (set (reg/v/f:DI 40 r12 [orig:129 <retval> ] [129])
        (reg:DI 0 ax [185])) "cmodules/fbgc_math.c":85:33 66 {*movdi_internal}
     (nil))
(debug_insn 188 187 189 20 (var_location:DI res_m (reg/v/f:DI 40 r12 [orig:129 <retval> ] [129])) "cmodules/fbgc_math.c":85:33 -1
     (nil))
(debug_insn 189 188 190 20 (debug_marker) "cmodules/fbgc_math.c":87:4 -1
     (nil))
(insn 190 189 191 20 (set (reg:SI 0 ax [orig:119 prephitmp_106 ] [119])
        (mem:SI (plus:DI (reg/f:DI 42 r14 [orig:82 _10 ] [82])
                (const_int 10 [0xa])) [5 MEM[(struct fbgc_matrix_object *)_10].row+0 S4 A8])) "cmodules/fbgc_math.c":87:17 67 {*movsi_internal}
     (nil))
(insn 191 190 418 20 (set (reg:SI 43 r15 [orig:172 _125 ] [172])
        (mem:SI (plus:DI (reg/f:DI 42 r14 [orig:82 _10 ] [82])
                (const_int 14 [0xe])) [5 MEM[(struct fbgc_matrix_object *)_10].column+0 S4 A8])) "cmodules/fbgc_math.c":87:24 67 {*movsi_internal}
     (nil))
(insn 418 191 192 20 (set (reg/v:SI 3 bx [orig:99 rc ] [99])
        (reg:SI 0 ax [orig:119 prephitmp_106 ] [119])) "cmodules/fbgc_math.c":87:11 67 {*movsi_internal}
     (nil))
(insn 192 418 419 20 (parallel [
            (set (reg/v:SI 3 bx [orig:99 rc ] [99])
                (mult:SI (reg/v:SI 3 bx [orig:99 rc ] [99])
                    (reg:SI 43 r15 [orig:172 _125 ] [172])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":87:11 317 {*mulsi3_1}
     (nil))
(insn 419 192 193 20 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [10 %sfp+-4 S4 A32])
        (reg/v:SI 3 bx [orig:99 rc ] [99])) "cmodules/fbgc_math.c":87:11 67 {*movsi_internal}
     (nil))
(debug_insn 193 419 194 20 (var_location:SI rc (mem/c:SI (plus:DI (reg/f:DI 7 sp)
            (const_int 12 [0xc])) [10 %sfp+-4 S4 A32])) "cmodules/fbgc_math.c":87:11 -1
     (nil))
(debug_insn 194 193 195 20 (debug_marker) "cmodules/fbgc_math.c":89:4 -1
     (nil))
(debug_insn 195 194 196 20 (debug_marker) "cmodules/fbgc_math.c":91:4 -1
     (nil))
(debug_insn 196 195 197 20 (debug_marker) "cmodules/fbgc_math.c":91:8 -1
     (nil))
(debug_insn 197 196 198 20 (var_location:SI i (const_int 0 [0])) -1
     (nil))
(debug_insn 198 197 7 20 (debug_marker) "cmodules/fbgc_math.c":91:22 -1
     (nil))
(insn 7 198 206 20 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-8 S4 A32])
        (const_int 0 [0])) "cmodules/fbgc_math.c":91:15 67 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 206 7 420 20 (parallel [
            (set (reg/f:DI 3 bx [orig:174 pretmp_137 ] [174])
                (plus:DI (reg/v/f:DI 40 r12 [orig:129 <retval> ] [129])
                    (const_int 14 [0xe])))
            (clobber (reg:CC 17 flags))
        ]) 191 {*adddi_1}
     (nil))
(insn 420 206 199 20 (set (mem/c:DI (reg/f:DI 7 sp) [10 %sfp+-16 S8 A64])
        (reg/f:DI 3 bx [orig:174 pretmp_137 ] [174])) 66 {*movdi_internal}
     (nil))
(insn 199 420 200 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:119 prephitmp_106 ] [119])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":91:4 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 200 199 411 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 292)
            (pc))) "cmodules/fbgc_math.c":91:4 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 292)
;;  succ:       29 [89.0% (guessed)]  count:73239503 (estimated locally)
;;              21 [11.0% (guessed)]  count:9052073 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; live  out 	 0 [ax] 7 [sp] 40 [r12] 42 [r14] 43 [r15]

;; basic block 21, loop depth 0, count 9052073 (estimated locally), maybe hot
;;  prev block 20, next block 22, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       20 [11.0% (guessed)]  count:9052073 (estimated locally) (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 40 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp] 40 [r12]
;; live  gen 	
;; live  kill	
(note 411 200 412 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(jump_insn 412 411 413 21 (set (pc)
        (label_ref 336)) 660 {jump}
     (nil)
 -> 336)
;;  succ:       31 [always]  count:9052073 (estimated locally)
;; lr  out 	 7 [sp] 40 [r12]
;; live  out 	 7 [sp] 40 [r12]

(barrier 413 412 297)
;; basic block 22, loop depth 0, count 592574083 (estimated locally), maybe hot
;;  prev block 21, next block 23, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       29 [99.8% (guessed)]  count:599636349 (estimated locally)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; lr  use 	 7 [sp] 42 [r14]
;; lr  def 	 6 [bp] 17 [flags] 41 [r13]
;; live  in  	 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; live  gen 	 6 [bp] 41 [r13]
;; live  kill	 17 [flags]
(code_label 297 413 204 22 123 (nil) [1 uses])
(note 204 297 205 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 205 204 6 22 (parallel [
            (set (reg/f:DI 41 r13 [orig:120 pretmp_111 ] [120])
                (plus:DI (reg/f:DI 42 r14 [orig:82 _10 ] [82])
                    (const_int 14 [0xe])))
            (clobber (reg:CC 17 flags))
        ]) 191 {*adddi_1}
     (nil))
(insn 6 205 277 22 (set (reg/v:SI 6 bp [orig:90 j ] [90])
        (const_int 0 [0])) "cmodules/fbgc_math.c":92:16 67 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       23 [always]  count:592574083 (estimated locally) (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  out 	 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]

;; basic block 23, loop depth 0, count 5387037060 (estimated locally), maybe hot
;;  prev block 22, next block 24, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       22 [always]  count:592574083 (estimated locally) (FALLTHRU)
;;              26 [89.0% (guessed)]  count:3164345581 (estimated locally) (DFS_BACK)
;;              24 [89.0% (guessed)]  count:1630117415 (estimated locally) (DFS_BACK)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; lr  use 	 6 [bp] 7 [sp] 41 [r13] 42 [r14] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags] 20 [xmm0]
;; live  in  	 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags] 20 [xmm0]
;; live  kill	 17 [flags]
(code_label 277 6 207 23 122 (nil) [2 uses])
(note 207 277 208 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(debug_insn 208 207 209 23 (var_location:SI j (reg/v:SI 6 bp [orig:90 j ] [90])) -1
     (nil))
(debug_insn 209 208 421 23 (debug_marker) "cmodules/fbgc_math.c":93:6 -1
     (nil))
(insn 421 209 210 23 (set (reg:SI 1 dx [144])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-8 S4 A32])) "cmodules/fbgc_math.c":93:23 67 {*movsi_internal}
     (nil))
(insn 210 421 211 23 (parallel [
            (set (reg:SI 1 dx [144])
                (mult:SI (reg:SI 1 dx [144])
                    (reg:SI 43 r15 [orig:172 _125 ] [172])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":93:23 317 {*mulsi3_1}
     (nil))
(insn 211 210 212 23 (parallel [
            (set (reg/v:SI 1 dx [orig:101 index ] [101])
                (plus:SI (reg:SI 1 dx [144])
                    (reg/v:SI 6 bp [orig:90 j ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":93:13 190 {*addsi_1}
     (nil))
(debug_insn 212 211 213 23 (var_location:SI index (reg/v:SI 1 dx [orig:101 index ] [101])) "cmodules/fbgc_math.c":93:13 -1
     (nil))
(debug_insn 213 212 214 23 (debug_marker) "cmodules/fbgc_math.c":94:6 -1
     (nil))
(debug_insn 214 213 215 23 (var_location:SI c_index (plus:SI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [10 %sfp+-4 S4 A32])
        (reg/v:SI 1 dx [orig:101 index ] [101]))) "cmodules/fbgc_math.c":94:13 -1
     (nil))
(debug_insn 215 214 216 23 (debug_marker) "cmodules/fbgc_math.c":96:6 -1
     (nil))
(insn 216 215 217 23 (set (reg:DI 2 cx [orig:145 index ] [145])
        (zero_extend:DI (reg/v:SI 1 dx [orig:101 index ] [101]))) "cmodules/fbgc_math.c":96:46 114 {*zero_extendsidi2}
     (nil))
(insn 217 216 218 23 (parallel [
            (set (reg:DI 2 cx [146])
                (ashift:DI (reg:DI 2 cx [orig:145 index ] [145])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":96:46 520 {*ashldi3_1}
     (nil))
(note 218 217 219 23 NOTE_INSN_DELETED)
(insn 219 218 220 23 (set (reg:DF 20 xmm0 [orig:107 _48 ] [107])
        (mem:DF (plus:DI (plus:DI (reg/f:DI 41 r13 [orig:120 pretmp_111 ] [120])
                    (reg:DI 2 cx [146]))
                (const_int 4 [0x4])) [2 *_47+0 S8 A64])) "cmodules/fbgc_math.c":96:15 111 {*movdf_internal}
     (nil))
(debug_insn 220 219 221 23 (var_location:DF z$real (reg:DF 20 xmm0 [orig:107 _48 ] [107])) "cmodules/fbgc_math.c":96:13 -1
     (nil))
(debug_insn 221 220 423 23 (debug_marker) "cmodules/fbgc_math.c":97:6 -1
     (nil))
(insn 423 221 222 23 (set (reg/f:DI 0 ax [orig:174 pretmp_137 ] [174])
        (mem/c:DI (reg/f:DI 7 sp) [10 %sfp+-16 S8 A64])) 66 {*movdi_internal}
     (nil))
(insn 222 423 223 23 (set (reg/f:DI 3 bx [orig:121 _121 ] [121])
        (plus:DI (plus:DI (reg/f:DI 0 ax [orig:174 pretmp_137 ] [174])
                (reg:DI 2 cx [146]))
            (const_int 4 [0x4]))) 187 {*leadi}
     (nil))
(insn 223 222 224 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (plus:DI (reg/f:DI 42 r14 [orig:82 _10 ] [82])
                    (const_int 9 [0x9])) [0 MEM[(struct fbgc_matrix_object *)_10].sub_type+0 S1 A8])
            (const_int 5 [0x5]))) "cmodules/fbgc_math.c":97:8 9 {*cmpqi_1}
     (nil))
(jump_insn 224 223 225 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 261)
            (pc))) "cmodules/fbgc_math.c":97:8 659 {*jcc}
     (int_list:REG_BR_PROB 708669604 (nil))
 -> 261)
;;  succ:       24 [34.0% (guessed)]  count:1831592620 (estimated locally) (FALLTHRU)
;;              26 [66.0% (guessed)]  count:3555444440 (estimated locally)
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [xmm0] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [xmm0] 40 [r12] 41 [r13] 42 [r14] 43 [r15]

;; basic block 24, loop depth 0, count 1831592600 (estimated locally), maybe hot
;;  prev block 23, next block 25, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       23 [34.0% (guessed)]  count:1831592620 (estimated locally) (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [xmm0] 40 [r12] 41 [r13] 42 [r14]
;; lr  use 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [xmm0] 41 [r13] 42 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [xmm0] 40 [r12] 41 [r13] 42 [r14]
;; live  gen 	 0 [ax] 1 [dx] 6 [bp] 17 [flags] 20 [xmm0] 21 [xmm1] 43 [r15]
;; live  kill	 17 [flags]
(note 225 224 226 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(debug_insn 226 225 227 24 (debug_marker) "cmodules/fbgc_math.c":98:7 -1
     (nil))
(note 227 226 424 24 NOTE_INSN_DELETED)
(insn 424 227 228 24 (set (reg/v:SI 0 ax [orig:99 rc ] [99])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [10 %sfp+-4 S4 A32])) "cmodules/fbgc_math.c":98:47 67 {*movsi_internal}
     (nil))
(insn 228 424 229 24 (set (reg:DI 1 dx [orig:148 c_index ] [148])
        (zero_extend:DI (plus:SI (reg/v:SI 0 ax [orig:99 rc ] [99])
                (reg/v:SI 1 dx [orig:101 index ] [101])))) "cmodules/fbgc_math.c":98:47 187 {*leadi}
     (nil))
(insn 229 228 232 24 (parallel [
            (set (reg:DI 43 r15 [149])
                (ashift:DI (reg:DI 1 dx [orig:148 c_index ] [148])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":98:47 520 {*ashldi3_1}
     (nil))
(debug_insn 232 229 237 24 (debug_marker) "cmodules/fbgc_math.c":99:7 -1
     (nil))
(note 237 232 239 24 NOTE_INSN_DELETED)
(insn 239 237 240 24 (set (reg:DF 21 xmm1)
        (mem:DF (plus:DI (plus:DI (reg/f:DI 41 r13 [orig:120 pretmp_111 ] [120])
                    (reg:DI 43 r15 [149]))
                (const_int 4 [0x4])) [2 *_53+0 S8 A64])) "cmodules/fbgc_math.c":99:36 111 {*movdf_internal}
     (nil))
(call_insn 240 239 241 24 (set (parallel:TI [
                (expr_list:REG_DEP_TRUE (reg:DF 20 xmm0)
                    (const_int 0 [0]))
                (expr_list:REG_DEP_TRUE (reg:DF 21 xmm1)
                    (const_int 8 [0x8]))
            ])
        (call (mem:QI (symbol_ref:DI ("c_cos") [flags 0x3]  <function_decl 0x7f213dfa5e00 c_cos>) [0 c_cos S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":99:36 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("c_cos") [flags 0x3]  <function_decl 0x7f213dfa5e00 c_cos>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (use (reg:DF 21 xmm1))
        (expr_list (use (reg:DF 20 xmm0))
            (nil))))
(note 241 240 242 24 NOTE_INSN_DELETED)
(note 242 241 246 24 NOTE_INSN_DELETED)
(debug_insn 246 242 247 24 (debug_marker) "cmodules/fbgc_math.c":100:7 -1
     (nil))
(insn 247 246 248 24 (set (mem:DF (reg/f:DI 3 bx [orig:121 _121 ] [121]) [2 MEM[(double *)_121]+0 S8 A64])
        (reg:DF 20 xmm0 [186])) "cmodules/fbgc_math.c":100:50 111 {*movdf_internal}
     (nil))
(debug_insn 248 247 425 24 (debug_marker) "cmodules/fbgc_math.c":101:7 -1
     (nil))
(insn 425 248 249 24 (set (reg/f:DI 0 ax [orig:174 pretmp_137 ] [174])
        (mem/c:DI (reg/f:DI 7 sp) [10 %sfp+-16 S8 A64])) "cmodules/fbgc_math.c":101:52 66 {*movdi_internal}
     (nil))
(insn 249 425 251 24 (set (mem:DF (plus:DI (plus:DI (reg/f:DI 0 ax [orig:174 pretmp_137 ] [174])
                    (reg:DI 43 r15 [149]))
                (const_int 4 [0x4])) [2 *_58+0 S8 A64])
        (reg:DF 21 xmm1 [187])) "cmodules/fbgc_math.c":101:52 111 {*movdf_internal}
     (nil))
(debug_insn 251 249 252 24 (debug_marker) "cmodules/fbgc_math.c":92:36 -1
     (nil))
(insn 252 251 253 24 (parallel [
            (set (reg/v:SI 6 bp [orig:90 j ] [90])
                (plus:SI (reg/v:SI 6 bp [orig:90 j ] [90])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":92:36 190 {*addsi_1}
     (nil))
(debug_insn 253 252 254 24 (var_location:SI j (reg/v:SI 6 bp [orig:90 j ] [90])) -1
     (nil))
(debug_insn 254 253 255 24 (debug_marker) "cmodules/fbgc_math.c":92:23 -1
     (nil))
(insn 255 254 256 24 (set (reg:SI 43 r15 [orig:172 _125 ] [172])
        (mem:SI (plus:DI (reg/f:DI 42 r14 [orig:82 _10 ] [82])
                (const_int 14 [0xe])) [5 MEM[(struct fbgc_matrix_object *)_10].column+0 S4 A8])) "cmodules/fbgc_math.c":92:26 67 {*movsi_internal}
     (nil))
(insn 256 255 257 24 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 6 bp [orig:90 j ] [90])
            (reg:SI 43 r15 [orig:172 _125 ] [172]))) "cmodules/fbgc_math.c":92:5 11 {*cmpsi_1}
     (nil))
(jump_insn 257 256 414 24 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 277)
            (pc))) "cmodules/fbgc_math.c":92:5 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 277)
;;  succ:       23 [89.0% (guessed)]  count:1630117415 (estimated locally) (DFS_BACK)
;;              25 [11.0% (guessed)]  count:201475185 (estimated locally) (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  out 	 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]

;; basic block 25, loop depth 0, count 201475185 (estimated locally), maybe hot
;;  prev block 24, next block 26, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       24 [11.0% (guessed)]  count:201475185 (estimated locally) (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; live  gen 	
;; live  kill	
(note 414 257 415 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(jump_insn 415 414 416 25 (set (pc)
        (label_ref 280)) 660 {jump}
     (nil)
 -> 280)
;;  succ:       27 [always]  count:201475185 (estimated locally) (LOOP_EXIT)
;; lr  out 	 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; live  out 	 7 [sp] 40 [r12] 42 [r14] 43 [r15]

(barrier 416 415 261)
;; basic block 26, loop depth 0, count 3555444471 (estimated locally), maybe hot
;;  prev block 25, next block 27, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       23 [66.0% (guessed)]  count:3555444440 (estimated locally)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 20 [xmm0] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 20 [xmm0] 43 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 20 [xmm0] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  gen 	 6 [bp] 17 [flags] 20 [xmm0]
;; live  kill	 17 [flags]
(code_label 261 416 262 26 119 (nil) [1 uses])
(note 262 261 263 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(debug_insn 263 262 265 26 (debug_marker) "cmodules/fbgc_math.c":103:11 -1
     (nil))
(call_insn/u 265 263 266 26 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7f213e47d900 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":103:57 677 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7f213e47d900 cos>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(note 266 265 267 26 NOTE_INSN_DELETED)
(insn 267 266 268 26 (set (mem:DF (reg/f:DI 3 bx [orig:121 _121 ] [121]) [2 MEM[(double *)_121]+0 S8 A64])
        (reg:DF 20 xmm0 [188])) "cmodules/fbgc_math.c":103:54 111 {*movdf_internal}
     (nil))
(debug_insn 268 267 269 26 (debug_marker) "cmodules/fbgc_math.c":92:36 -1
     (nil))
(insn 269 268 270 26 (parallel [
            (set (reg/v:SI 6 bp [orig:90 j ] [90])
                (plus:SI (reg/v:SI 6 bp [orig:90 j ] [90])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":92:36 190 {*addsi_1}
     (nil))
(debug_insn 270 269 271 26 (var_location:SI j (reg/v:SI 6 bp [orig:90 j ] [90])) -1
     (nil))
(debug_insn 271 270 273 26 (debug_marker) "cmodules/fbgc_math.c":92:23 -1
     (nil))
(insn 273 271 274 26 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 43 r15 [orig:172 _125 ] [172])
            (reg/v:SI 6 bp [orig:90 j ] [90]))) "cmodules/fbgc_math.c":92:5 11 {*cmpsi_1}
     (nil))
(jump_insn 274 273 280 26 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 277)
            (pc))) "cmodules/fbgc_math.c":92:5 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 277)
;;  succ:       23 [89.0% (guessed)]  count:3164345581 (estimated locally) (DFS_BACK)
;;              27 [11.0% (guessed)]  count:391098890 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;; live  out 	 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14] 43 [r15]

;; basic block 27, loop depth 0, count 592574075 (estimated locally), maybe hot
;;  prev block 26, next block 28, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       26 [11.0% (guessed)]  count:391098890 (estimated locally) (FALLTHRU,LOOP_EXIT)
;;              25 [always]  count:201475185 (estimated locally) (LOOP_EXIT)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; lr  use 	 7 [sp] 42 [r14]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 280 274 281 27 121 (nil) [1 uses])
(note 281 280 282 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 282 281 305 27 (set (reg:SI 0 ax [orig:119 prephitmp_106 ] [119])
        (mem:SI (plus:DI (reg/f:DI 42 r14 [orig:82 _10 ] [82])
                (const_int 10 [0xa])) [5 MEM[(struct fbgc_matrix_object *)_10].row+0 S4 A8])) 67 {*movsi_internal}
     (nil))
;;  succ:       28 [always]  count:592574075 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; live  out 	 0 [ax] 7 [sp] 40 [r12] 42 [r14] 43 [r15]

;; basic block 28, loop depth 0, count 592574078 (estimated locally), maybe hot
;; Invalid sum of incoming counts 657757224 (estimated locally), should be 592574078 (estimated locally)
;;  prev block 27, next block 29, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [always]  count:592574075 (estimated locally) (FALLTHRU)
;;              30 [89.0% (guessed)]  count:65183149 (estimated locally)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 305 282 283 28 124 (nil) [1 uses])
(note 283 305 284 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(debug_insn 284 283 285 28 (var_location:SI i (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 285 284 286 28 (var_location:SI j (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 286 285 426 28 (debug_marker) "cmodules/fbgc_math.c":91:32 -1
     (nil))
(note 426 286 436 28 NOTE_INSN_DELETED)
(note 436 426 287 28 NOTE_INSN_DELETED)
(insn 287 436 437 28 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                        (const_int 8 [0x8])) [10 %sfp+-8 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 8 [0x8])) [10 %sfp+-8 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":91:32 190 {*addsi_1}
     (nil))
(insn 437 287 438 28 (set (reg/v:SI 5 di [orig:118 i ] [118])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-8 S4 A32])) "cmodules/fbgc_math.c":91:32 67 {*movsi_internal}
     (nil))
(note 438 437 432 28 NOTE_INSN_DELETED)
(insn 432 438 288 28 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-8 S4 A32])
        (reg/v:SI 5 di [orig:118 i ] [118])) "cmodules/fbgc_math.c":91:32 67 {*movsi_internal}
     (nil))
(debug_insn 288 432 289 28 (var_location:SI i (reg/v:SI 5 di [orig:118 i ] [118])) -1
     (nil))
(debug_insn 289 288 290 28 (debug_marker) "cmodules/fbgc_math.c":91:22 -1
     (nil))
(insn 290 289 291 28 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 5 di [orig:118 i ] [118])
            (reg:SI 0 ax [orig:119 prephitmp_106 ] [119]))) "cmodules/fbgc_math.c":91:4 11 {*cmpsi_1}
     (nil))
(jump_insn 291 290 292 28 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 336)
            (pc))) "cmodules/fbgc_math.c":91:4 659 {*jcc}
     (int_list:REG_BR_PROB 118111604 (nil))
 -> 336)
;;  succ:       29 [89.0% (guessed)]  count:527390930 (estimated locally) (FALLTHRU,DFS_BACK)
;;              31 [11.0% (guessed)]  count:65183148 (estimated locally) (LOOP_EXIT)
;; lr  out 	 0 [ax] 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; live  out 	 0 [ax] 7 [sp] 40 [r12] 42 [r14] 43 [r15]

;; basic block 29, loop depth 0, count 600630427 (estimated locally), maybe hot
;;  prev block 28, next block 30, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       20 [89.0% (guessed)]  count:73239503 (estimated locally)
;;              28 [89.0% (guessed)]  count:527390930 (estimated locally) (FALLTHRU,DFS_BACK)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; lr  use 	 7 [sp] 43 [r15]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 292 291 293 29 117 (nil) [1 uses])
(note 293 292 294 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(debug_insn 294 293 295 29 (var_location:SI i (mem/c:SI (plus:DI (reg/f:DI 7 sp)
            (const_int 8 [0x8])) [10 %sfp+-8 S4 A32])) -1
     (nil))
(debug_insn 295 294 296 29 (var_location:SI j (const_int 0 [0])) -1
     (nil))
(debug_insn 296 295 298 29 (debug_marker) "cmodules/fbgc_math.c":92:23 -1
     (nil))
(insn 298 296 299 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 43 r15 [orig:172 _125 ] [172])
            (const_int 0 [0]))) "cmodules/fbgc_math.c":92:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 299 298 300 29 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 297)
            (pc))) "cmodules/fbgc_math.c":92:5 659 {*jcc}
     (int_list:REG_BR_PROB 1071964724 (nil))
 -> 297)
;;  succ:       22 [99.8% (guessed)]  count:599636349 (estimated locally)
;;              30 [0.2% (guessed)]  count:994078 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; live  out 	 0 [ax] 7 [sp] 40 [r12] 42 [r14] 43 [r15]

;; basic block 30, loop depth 0, count 73239493 (estimated locally), maybe hot
;; Invalid sum of incoming counts 994078 (estimated locally), should be 73239493 (estimated locally)
;;  prev block 29, next block 31, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       29 [0.2% (guessed)]  count:994078 (estimated locally) (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; live  gen 	 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
(note 300 299 301 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(debug_insn 301 300 429 30 (debug_marker) "cmodules/fbgc_math.c":91:32 -1
     (nil))
(note 429 301 434 30 NOTE_INSN_DELETED)
(note 434 429 302 30 NOTE_INSN_DELETED)
(insn 302 434 435 30 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                        (const_int 8 [0x8])) [10 %sfp+-8 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 8 [0x8])) [10 %sfp+-8 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cmodules/fbgc_math.c":91:32 190 {*addsi_1}
     (nil))
(insn 435 302 439 30 (set (reg/v:SI 2 cx [orig:118 i ] [118])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-8 S4 A32])) "cmodules/fbgc_math.c":91:32 67 {*movsi_internal}
     (nil))
(note 439 435 433 30 NOTE_INSN_DELETED)
(insn 433 439 303 30 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [10 %sfp+-8 S4 A32])
        (reg/v:SI 2 cx [orig:118 i ] [118])) "cmodules/fbgc_math.c":91:32 67 {*movsi_internal}
     (nil))
(debug_insn 303 433 304 30 (var_location:SI i (reg/v:SI 2 cx [orig:118 i ] [118])) -1
     (nil))
(debug_insn 304 303 306 30 (debug_marker) "cmodules/fbgc_math.c":91:22 -1
     (nil))
(insn 306 304 307 30 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:119 prephitmp_106 ] [119])
            (reg/v:SI 2 cx [orig:118 i ] [118]))) "cmodules/fbgc_math.c":91:4 11 {*cmpsi_1}
     (nil))
(jump_insn 307 306 336 30 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 305)
            (pc))) "cmodules/fbgc_math.c":91:4 659 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 305)
;;  succ:       28 [89.0% (guessed)]  count:65183149 (estimated locally)
;;              31 [11.0% (guessed)]  count:8056344 (estimated locally) (FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 7 [sp] 40 [r12] 42 [r14] 43 [r15]
;; live  out 	 0 [ax] 7 [sp] 40 [r12] 42 [r14] 43 [r15]

;; basic block 31, loop depth 0, count 908893201 (estimated locally), maybe hot
;; Invalid sum of incoming counts 1274633540 (estimated locally), should be 908893201 (estimated locally)
;;  prev block 30, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [61.7% (guessed)]  count:662283960 (estimated locally)
;;              6 [55.6% (adjusted)]  count:228587706 (estimated locally)
;;              28 [11.0% (guessed)]  count:65183148 (estimated locally) (LOOP_EXIT)
;;              9 [always]  count:82291578 (estimated locally)
;;              14 [11.0% (guessed)]  count:9052073 (estimated locally)
;;              11 [always]  count:137152624 (estimated locally)
;;              30 [11.0% (guessed)]  count:8056344 (estimated locally) (FALLTHRU,LOOP_EXIT)
;;              19 [always]  count:72974034 (estimated locally) (LOOP_EXIT)
;;              21 [always]  count:9052073 (estimated locally)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 40 [r12]
;; lr  use 	 7 [sp] 40 [r12]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp] 40 [r12]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 336 307 339 31 107 (nil) [8 uses])
(note 339 336 337 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 337 339 338 31 (set (reg/i:DI 0 ax)
        (reg/v/f:DI 40 r12 [orig:129 <retval> ] [129])) "cmodules/fbgc_math.c":121:1 66 {*movdi_internal}
     (nil))
(insn 338 337 417 31 (use (reg/i:DI 0 ax)) "cmodules/fbgc_math.c":121:1 -1
     (nil))
;;  succ:       EXIT [always]  count:908893201 (estimated locally) (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 417 338 0 NOTE_INSN_DELETED)
