UNKNOWN $ Begin with unknown
NIL $ null or none
LOGIC $ logical true or false
INT $ int class
DOUBLE $ double class
COMPLEX $ complex class
STRING $ string class
MATRIX $ matrix class
TUPLE $ tuple class
CSTRING $ raw c strings without length
CFUN $ c function
FUN $ builtin fbgc function
CSTRUCT $ 
IDENTIFIER $ identifiers
RANGE $ range obj
MONATRIX
NUPLE
MONUPLE
ARRAY
LINKED_LIST
CMODULE
GARBAGE
FIELD
END $ end
FUN_MAKE
ELIF
ELSE
WHILE
FOR
BREAK
CONT
LOAD
IF
RETURN
NEWLINE
LPARA $ (
RPARA $ )
LBRACK $ [
RBRACK $ ]
LBRACE $ {
RBRACE $ }
COMMA $ , -- set1 start
DOT $ .
SEMICOLON $ ; 
COLON $ : set1 finish
R_SHIFT $ >> assignment and binary operators start from here
L_SHIFT $ <<
STARSTAR $ **
SLASHSLASH $ //
PLUS $ +
MINUS $ -
STAR $ *
SLASH $ /
CARET $ ^
PERCENT $ % assignment finish
LO_EQ $ <=
GR_EQ $ >=
EQ_EQ $ ==
NOT_EQ $ !=
LOWER $ <
GREATER $ >
PIPE $ |
AMPERSAND $ & binary finish
EXCLAMATION $ !
TILDE $ ~
UPLUS $ +
UMINUS $ -
ASSIGN $ = assignment ops start from here
R_SHIFT_ASSIGN $ >>=
L_SHIFT_ASSIGN $ <<=
STARSTAR_ASSIGN $ **=
SLASHSLASH_ASSIGN $ //=
PLUS_ASSIGN $ +=
MINUS_ASSIGN $ -=
STAR_ASSIGN $ *=
SLASH_ASSIGN $ /=
CARET_ASSIGN $ ^=
PERCENT_ASSIGN $ %=
LEN
JUMP
IF_BEGIN
ELIF_BEGIN
WHILE_BEGIN
FOR_BEGIN
FUN_CALL
METHOD_CALL
BUILD_TUPLE
BUILD_MATRIX
POP_TOP
ROW
AND
OR
NOT
START
EXPRESSION
ASSIGNMENT
STATEMENT
ASSIGNMENT_EXPRESSION
UNARY_EXPRESSION
BINARY_EXPRESSION
BALANCED_EXPRESSION_LIST
UNBALANCED_EXPRESSION_LIST
ASSIGN_SUBSCRIPT
LOAD_SUBSCRIPT