#grammar and token definition file
# ! is a special keyword character
# In order to define grammar tokens : !grammar_tokens
# tokens : !tokens


!grammar_tokens
	GM_NEWLINE
	GM_ATOM
	GM_IDENTIFIER
	GM_BINOP
	GM_UNOP
	GM_ASSIGNOP	
	GM_STATEMENT
	GM_ASSIGNMENT_EXPRESSION
	GM_EXPRESSION
	GM_UNBALANCED_LIST
	GM_BALANCED_LIST
	GM_LPARA
	GM_LBRACK
	GM_SEMICOLON
	GM_COMMA


!tokens
	UNKNOWN # Begin with unknown
	NIL # null or none
	LOGIC # logical true or false
	INT # int class
	DOUBLE # double class
	COMPLEX # complex class
	STRING # string class
	MATRIX # matrix class
	TUPLE # tuple class
	CSTRING # raw c strings without length
	CFUN # c function
	FUN # builtin fbgc function
	CSTRUCT # 
	IDENTIFIER# identifiers
	RANGE # range obj
	MONATRIX
	NUPLE
	MONUPLE
	ARRAY
	LINKED_LIST
	CMODULE
	GARBAGE
	FIELD
	END # end
	FUN_MAKE
	ELIF
	ELSE
	WHILE
	FOR
	BREAK
	CONT
	LOAD
	IF
	RETURN
	NEWLINE
	LPARA # (
	RPARA # )
	LBRACK # [
	RBRACK # ]
	LBRACE # {
	RBRACE # }
	COMMA # , -- set1 start
	DOT # .
	SEMICOLON # ; 
	COLON # : set1 finish
	R_SHIFT # >> assignment and binary operators start from here
	L_SHIFT # <<
	STARSTAR # **
	SLASHSLASH # //
	PLUS # +
	MINUS # -
	STAR # *
	SLASH # /
	CARET # ^
	PERCENT # % assignment finish
	LO_EQ # <=
	GR_EQ # >=
	EQ_EQ # ==
	NOT_EQ # !=
	LOWER # <
	GREATER # >
	PIPE # |
	AMPERSAND # & binary finish
	EXCLAMATION # !
	TILDE # ~
	UPLUS # +
	UMINUS # -
	ASSIGN # = assignment ops start from here
	R_SHIFT_ASSIGN # >>=
	L_SHIFT_ASSIGN # <<=
	STARSTAR_ASSIGN # **=
	SLASHSLASH_ASSIGN # //=
	PLUS_ASSIGN # +=
	MINUS_ASSIGN # -=
	STAR_ASSIGN # *=
	SLASH_ASSIGN # /=
	CARET_ASSIGN # ^=
	PERCENT_ASSIGN # %=
	LEN
	JUMP
	IF_BEGIN
	ELIF_BEGIN
	WHILE_BEGIN
	FOR_BEGIN
	FUN_CALL
	METHOD_CALL
	BUILD_TUPLE
	BUILD_MATRIX
	POP_TOP
	ROW
	AND
	OR
	NOT


.ATOM = LOGIC | INT | DOUBLE | COMPLEX | STRING


.EXPRESSION = ATOM | IDENTIFIER | SEMICOLON

#tanimlar bu sekilde de yapilabilir
#.x = ATOM | UNOPSTATEMENT


.BINOP = COLON |
	R_SHIFT |
	L_SHIFT |
	STARSTAR |
	SLASHSLASH |
	PLUS |
	MINUS |
	STAR |
	SLASH |
	CARET |
	PERCENT |
	LO_EQ |
	GR_EQ |
	EQ_EQ |
	NOT_EQ |
	LOWER |
	GREATER |
	PIPE |
	AMPERSAND


.ASSIGNOP = ASSIGN |
	R_SHIFT_ASSIGN |
	L_SHIFT_ASSIGN |
	STARSTAR_ASSIGN |
	SLASHSLASH_ASSIGN |
	PLUS_ASSIGN |
	MINUS_ASSIGN |
	STAR_ASSIGN |
	SLASH_ASSIGN |
	CARET_ASSIGN |
	PERCENT_ASSIGN


.UNOP = EXCLAMATION | TILDE | UPLUS | UMINUS


!left


GM_ATOM:
	(GM_NEWLINE) (ATOM)
	(GM_BINOP | GM_ASSIGNOP | GM_UNOP) (ATOM)
	(GM_UNBALANCED_LIST | GM_LPARA | GM_LBRACK ) (ATOM)
	(GM_SEMICOLON | GM_COMMA) (ATOM)


GM_IDENTIFIER:
	(GM_NEWLINE) (IDENTIFIER)
	(GM_BINOP | GM_ASSIGNOP | GM_UNOP) (IDENTIFIER)
	(GM_UNBALANCED_LIST | GM_LPARA | GM_LBRACK ) (IDENTIFIER)
	(GM_SEMICOLON | GM_COMMA) (IDENTIFIER)

GM_IDENTIFIER:
	(GM_NEWLINE) (CFUN)
	(GM_BINOP | GM_ASSIGNOP | GM_UNOP) (CFUN)
	(GM_UNBALANCED_LIST | GM_LPARA | GM_LBRACK ) (CFUN)
	(GM_SEMICOLON | GM_COMMA) (CFUN)

GM_LPARA:
	(GM_NEWLINE) (LPARA)
	(GM_BINOP | GM_UNOP | GM_ASSIGNOP) (LPARA)
	(GM_LPARA | GM_LBRACK) (LPARA)
	(GM_SEMICOLON | GM_COMMA | GM_UNBALANCED_LIST | GM_IDENTIFIER) (LPARA)


GM_EXPRESSION:
	(GM_IDENTIFIER | GM_ATOM | GM_EXPRESSION | GM_LPARA | GM_BALANCED_LIST) (RPARA) 


GM_LBRACK:
	(GM_NEWLINE) (LBRACK)
	(GM_BINOP | GM_UNOP | GM_ASSIGNOP) (LBRACK)
	(GM_LPARA | GM_LBRACK) (LBRACK)
	(GM_SEMICOLON | GM_COMMA | GM_UNBALANCED_LIST | GM_IDENTIFIER) (LBRACK)

#LEN VS BUNLARI GEC

GM_BINOP:
	(GM_IDENTIFIER | GM_ATOM | GM_EXPRESSION | GM_EXPRESSION) (BINOP)


GM_ASSIGNOP:
	(GM_IDENTIFIER) (ASSIGNOP)


GM_UNOP:
	(GM_NEWLINE | GM_BINOP | GM_UNOP) (UNOP)


GM_UNOP:
	(GM_NEWLINE | GM_BINOP | GM_UNOP) (PLUS)
	?PLUS -> UPLUS

GM_UNOP:
	(GM_NEWLINE | GM_BINOP | GM_UNOP) (MINUS)
	?MINUS -> UMINUS


GM_UNBALANCED_LIST:
	(GM_IDENTIFIER | GM_ATOM | GM_EXPRESSION) (COMMA)

GM_EXPRESSION:
	(GM_IDENTIFIER | GM_ATOM | GM_EXPRESSION | GM_BALANCED_LIST) (NEWLINE)

GM_NEWLINE:
	(GM_NEWLINE) (NEWLINE)

GM_NEWLINE:
	(GM_IDENTIFIER | GM_ATOM | GM_EXPRESSION | GM_BALANCED_LIST) (SEMICOLON)

GM_NEWLINE:
	(GM_NEWLINE) (SEMICOLON)


#test icin yaziyoruz, not parser'da kullanilmiyor
GM_ATOM:
	(GM_NEWLINE) (NOT)


!right

GM_EXPRESSION:
	(BINOP) (GM_IDENTIFIER | GM_ATOM | GM_EXPRESSION)

GM_EXPRESSION:
	(ASSIGNOP) (GM_IDENTIFIER | GM_ATOM | GM_EXPRESSION)

GM_EXPRESSION:
	(UNOP) (GM_IDENTIFIER | GM_ATOM | GM_EXPRESSION)

GM_EXPRESSION:
	(ATOM) (GM_NEWLINE)

GM_BALANCED_LIST:
	(COMMA) (GM_IDENTIFIER | GM_ATOM | GM_EXPRESSION)






#x = y gibi durumlarda newline soluna bakip y gordugunde gm_exp yaptigi icin id saginda bunu kontrol etmeye calisiyor
#gm_pass gibi bir durum konulup halledilebilir
#BURAYI DUZELT! identifier sagina bakmamali ama id op stack icine atildigi icin bakiyor bu yuzden pass atilip her duruma gitmeli 
$:
	(IDENTIFIER) ($)

GM_EXPRESSION:
	(CFUN) (GM_EXPRESSION)