	:>-------------------[fbgc_GRAMMAR]-------------------------
	:>Syntax:
	:>	left -> return-token: left-side-token operator
	:>	right-> return-token: operator right-side-token
	:>	&binary_operator means '+' is a binary operator and it returns plus, * returns star, - return minus etc. 


	ATOM: 
		(START | &BINARY_OPERATOR | UNBALANCED_EXPR_LIST) ('INT' | 'STRING' | 'DOUBLE' | 'ID')	
	LPARA: 
		(START| &BINARY_OPERATOR | &UNARY_OPERATOR | &ASSIGNMENT_OP| UNBALANCED_EXPR_LIST) '('

	&UNARY_OPERATOR: 
		(&BINARY_OPERATOR | LPARA | START )* ( + | - | ! | ++ | -- )
		:> FOR EXAMPLE IF ! COMES, IT LOOKS ITS LEFT AND IF IT SEE SOMETHING LIKE X+!Y, (!X), !X IT RETURNS NOT_OP
	UNARY_EXPRESSION: 
		UNARY_OP EXPRESSION :> !(X+Y) OR !X SITUATION IT RETURNS UNARY_EXPRESSION 
	
	&BINARY_OPERATOR: 
		EXPRESSION ('+' | '-' | '*' | '/' | '&' | '|' | '==') 
	BINARY_EXPRESSION: 
		('+' | '-' | '*' | '/' | '&' | '|' | '==' | '>' | '<' | '>=' | '<=' | '&' | '|') EXPRESSION
	
	&ASSIGNMENT_OPERATOR: 
		ID ('=' | '+=' | '-=' | '*=' | '/=' | '<<=' | '>>=') 
	ASSIGNMENT_EXPRESSION: 
		&ASSIGNMENT_OPERATOR STATEMENT
	

	UNBALANCED_IDENTIFIER_LIST: 
		ID ','
	BALANCED_IDENTIFIER_LIST: 
		UNBALANCED_IDENTIFIER_LIST 'ID' 

	UNBALANCED_EXPR_LIST: 
		EXPRESSION ','
	BALANCED_EXPR_LIST: 
		',' EXPRESSION		

	PARA_EMPTY:
		LPARA ')' 
	PARA_EXPRESSION:
		LPARA EXPRESSION ')'
	PARA_ASSIGNMENT_EXPRESSION: 
		LPARA ASSIGNMENT_EXPRESSION ')'
	PARA_BALANCED_EXPR_LIST:
		LPARA (BALANCED_EXPR_LIST | EXPRESSION) ')'
	PARA_IDENTIFIER_LIST: 
		LPARA BALANCED_IDENTIFIER_LIST ')'

	LBRACK:
		(START| &BINARY_OPERATOR | &UNARY_OPERATOR | &ASSIGNMENT_OP| UNBALANCED_EXPR_LIST) '['
	
	MATRIX: 
		LBRACK BALANCED_EXPR_LIST ']'
	
	LBRACE:
		(START| &BINARY_OPERATOR | &UNARY_OPERATOR | &ASSIGNMENT_OP| UNBALANCED_EXPR_LIST) '{'
	
	LIST:
		LBRACE BALANCED_EXPR_LIST '}'
	
	FUN_CALL: 
		'FUN_ID' (PARA_BALANCED_EXPR_LIST | PARA_EMPTY)
	
	EXPRESSION
		:ATOM
	 	|UNARY_EXPRESSION
	 	|BINARY_EXPRESSION
	 	|PARA_EXPRESSION
	 	|BALANCED_EXPRESSION_LIST
	 	|MATRIX
	 	|LIST

	ASSIGNMENT
		:ASSIGNMENT_EXPRESSION
		|PARA_ASSIGNMENT_EXPRESSION

	STATEMENT
		:EXPRESSION
		|ASSIGNMENT
		
	IF:	
		'IF' PARA_EXPRESSION 
	ELIF:
		IF STATEMENT 'ELIF'
	ELIF:
		ELIF PARA_EXPRESSION    
	ELSE: 
		(IF | ELIF) STATEMENT 'ELSE'
	WHILE: 
		'WHILE' PARA_EXPRESSION
	UNTIL:
		'UNTIL' PARA_EXPRESSION
 	END:
 		(IF | ELIF | ELSE | WHILE | UNTIL) (STATEMENT) 'END'



	:>-------------------[fbgc_GRAMMAR]-------------------------
	:>Syntax:
	:>	left -> return-token: left-side-token operator
	:>	right-> return-token: operator right-side-token
	:>	&binary_operator means '+' is a binary operator and it returns plus, * returns star, - return minus etc. 
	
	LEFT TABLE

	ATOM: 
		(START | &BINARY_OPERATOR | UNBALANCED_EXPR_LIST) ('INT' | 'STRING' | 'DOUBLE' | 'ID')	
	LPARA: 
		(START| &BINARY_OPERATOR | &UNARY_OPERATOR | &ASSIGNMENT_OP| UNBALANCED_EXPR_LIST) '('

	&UNARY_OPERATOR: 
		(&BINARY_OPERATOR | LPARA | START ) ( + | - | ! | ++ | -- )
		:> FOR EXAMPLE IF ! COMES, IT LOOKS ITS LEFT AND IF IT SEE SOMETHING LIKE X+!Y, (!X), !X IT RETURNS NOT_OP

	&BINARY_OPERATOR:
		EXPRESSION ('+' | '-' | '*' | '/' | '&' | '|' | '==') 
	
	&ASSIGNMENT_OPERATOR:
		ID ('=' | '+=' | '-=' | '*=' | '/=' | '<<=' | '>>=') 
	
	
	UNBALANCED_EXPR_LIST:
		EXPRESSION ',' 
	UNBALANCED_IDENTIFIER_LIST: 
		ID ','	

	PARA_EMPTY:
		LPARA ')' 
	PARA_EXPRESSION:
		LPARA EXPRESSION ')'
	PARA_ASSIGNMENT_EXPRESSION: 
		LPARA ASSIGNMENT_EXPRESSION ')'
	PARA_BALANCED_EXPR_LIST:
		LPARA (BALANCED_EXPR_LIST | EXPRESSION) ')'
	PARA_IDENTIFIER_LIST: 
		LPARA BALANCED_IDENTIFIER_LIST ')'

	LBRACK:
		(START| &BINARY_OPERATOR | &UNARY_OPERATOR | &ASSIGNMENT_OP| UNBALANCED_EXPR_LIST) '['
	
	MATRIX: 
		LBRACK BALANCED_EXPR_LIST ']'
	
	LBRACE:
		(START| &BINARY_OPERATOR | &UNARY_OPERATOR | &ASSIGNMENT_OP| UNBALANCED_EXPR_LIST) '{'
	
	LIST:
		LBRACE BALANCED_EXPR_LIST '}'
	

	
	EXPRESSION
		:ATOM
	 	|UNARY_EXPRESSION
	 	|BINARY_EXPRESSION
	 	|PARA_EXPRESSION
	 	|BALANCED_EXPRESSION_LIST
	 	|MATRIX
	 	|LIST

	ASSIGNMENT
		:ASSIGNMENT_EXPRESSION
		|PARA_ASSIGNMENT_EXPRESSION

	STATEMENT
		:EXPRESSION
		|ASSIGNMENT
		

	ELIF:
		IF STATEMENT 'ELIF'
   
	ELSE: 
		(IF | ELIF) STATEMENT 'ELSE'

 	END:
 		(IF | ELIF | ELSE | WHILE | UNTIL) (STATEMENT) 'END'
	
	:>---------------------------------------[RIGHT_TABLE]-----------------------------------------------
	

 	UNARY_EXPRESSION: 
		'UNARY_OP' EXPRESSION
		:> !(X+Y) OR !X SITUATION IT RETURNS UNARY_EXPRESSION 	

	BINARY_EXPRESSION: 
		('+' | '-' | '*' | '/' | '&' | '|' | '==' | '>' | '<' | '>=' | '<=' | '&' | '|') EXPRESSION		

	ASSIGNMENT_EXPRESSION: 
		&ASSIGNMENT_OPERATOR STATEMENT		
	IF:	
		'IF' PARA_EXPRESSION
	ELIF:
		ELIF PARA_EXPRESSION 


	
	BALANCED_EXPR_LIST: 
		',' EXPRESSION	
	BALANCED_IDENTIFIER_LIST:
		',' ID

	FUN_CALL: 
		'FUN_ID' (PARA_BALANCED_EXPR_LIST | PARA_EMPTY)		
	WHILE: 
		'WHILE' PARA_EXPRESSION
	UNTIL:
		'UNTIL' PARA_EXPRESSION
