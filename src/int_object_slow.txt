#include "fbgc.h"


struct
fbgc_object * new_fbgc_int_object(int int_content){
	struct fbgc_int_object *into =  (struct fbgc_int_object*) fbgc_malloc(sizeof_fbgc_int_object());
	into->base.type = INT;
	//into->base.next = NULL;
	into->content = int_content; 
	return (struct fbgc_object*) into;
}

struct
fbgc_object * derive_from_new_int_object(fbgc_token type, int int_content){
	struct fbgc_int_object *into =  (struct fbgc_int_object*) fbgc_malloc(sizeof_fbgc_int_object());
	into->base.type = type;
	into->content = int_content; 
	return (struct fbgc_object*) into;
}


struct
fbgc_object * new_fbgc_int_object_from_str(const char * int_str){

	return new_fbgc_int_object(strtol(int_str,NULL,10));
}


struct fbgc_object * new_fbgc_int_object_from_substr(const char * int_str_begin,const char * int_str_end,uint8_t base){
	//now we don't wanna check inf or overflow issue but later we are going to check them
	return new_fbgc_int_object(strtol(int_str_begin, NULL,base));
}

struct fbgc_object * operator_fbgc_int_object2(struct fbgc_object * a,struct fbgc_object * b,fbgc_token op){
	//you have to check before calling this function, a and b must be int type 
	int b1 = convert_fbgc_object_to_int(b);
	
	int * c =  &cast_fbgc_object_as_int(a)->content;
	
switch(op)
{
	case R_SHIFT:
	{
		*c >>= b1;
		break;
	}
	case L_SHIFT:
	{
		*c <<= b1;
		break;
	}
	case STARSTAR:
	{
		*c = pow(*c,b1);
		break;
	}
	case SLASHSLASH:
	{
		// a1//b1 = (a1*b1)/(a1+b1)
		return new_fbgc_double_object(*c*b1/(*c+b1+0.0)); 
	}
	case PLUS:
	{
		*c += b1;
		break;
	}
	case MINUS:
	{
		*c -= b1;
		break;
	}
	case STAR:
	{
		*c *= b1;
		break;
	}
	case SLASH:
	{
		return new_fbgc_double_object(((double)*c)/b1);
	} 
	case CARET:
	{
		*c = pow(*c,b1);
		break;
	}
	case PERCENT:
	{
		*c %= b1;
		break;
	}                         
}

	return a;
	//new_fbgc_int_object(c);
}


struct fbgc_object * operator_fbgc_int_object(struct fbgc_object * a,struct fbgc_object * b,fbgc_token op){
    //you have to check before calling this function, a and b must be int type 

	//either int-int or logic-int combination can call this function
	int a1 = (a->type != LOGIC) ? cast_fbgc_object_as_int(a)->content:(int)(cast_fbgc_object_as_logic(a)->content);	
	int b1 = (b->type != LOGIC) ? cast_fbgc_object_as_int(b)->content:(int)(cast_fbgc_object_as_logic(b)->content);
	
	struct fbgc_object * cdb = NULL;
	//we are not gonna use a1 but make compiler happy..
	cast_fbgc_object_as_int(a)->content = operator_method_int(a1,b1,op,NULL);
	
	return cdb;

	/*uint8_t operation_type = 1;
	if(operation_type){
		cast_fbgc_object_as_int(a)->content = c;
		return a;
	}
    else return new_fbgc_int_object(c);*/
}

int operator_method_int(int a1, int b1,fbgc_token op, struct fbgc_object ** result){
	int c = 0;
	fbgc_token result_type = (op<=LO_EQ || op>=EXCLAMATION) ? INT: LOGIC;

switch(op)
{
    case R_SHIFT:
    {
        c = a1>>b1;
        break;
    }
    case L_SHIFT:
    {
        c = a1<<b1;
        break;
    }
    case STARSTAR:
    {
        c = pow(a1,b1);
        break;
    }
    case SLASHSLASH:
    {
        // a1//b1 = (a1*b1)/(a1+b1)
        *result = new_fbgc_double_object((double)a1*b1/(a1+b1));
        c = a1/b1;
        //break;
        return c; 
    }
    case PLUS:
    {
        c = a1+b1;
        break;
    }
    case MINUS:
    {
        c = a1-b1;
        break;
    }
    case STAR:
    {
        c = a1*b1;
        break;
    }
    case SLASH:
    {
        *result = new_fbgc_double_object(((double)a1)/b1);
        return a1/b1;
        //break;
    } 
    case CARET:
    {
        c = pow(a1,b1);
        break;
    }
    case PERCENT:
    {
        c = a1%b1;
        break;
    }                         
    case LO_EQ:
    {
        c = (a1<=b1);
        break;
    }
    case GR_EQ:
    {
        c = (a1 >= b1);
        break;
    }
    case EQ_EQ:
    {
        c = (a1 == b1);
        break;
    }
    case NOT_EQ:
    {
        c = (a1 != b1);
        break;
    }
    case LOWER:
    {
        c = (a1<b1);
        break;
    }        
    case GREATER:
    {
        c = (a1>b1);
        break;
    }        
    case PIPE:
    {
        c = (a1 || b1);
        break;
    } 
    case AMPERSAND:
    {
        c = (a1 && b1);
        break;
    } 
    case EXCLAMATION:
    {
        c = (!a1);   
        break;
    }
    case TILDE:
    {
        c = ~a1;
        break;
    }
    case UPLUS:
    {
        c = a1;
        break;
    }
    case UMINUS:
    {
        c = -a1;
        break;
    }
}	

	if(result != NULL){
		switch(result_type){
			case LOGIC:
			{
				*result = new_fbgc_logic_object(c);
				break;
			}
			case INT:
			{
				*result = new_fbgc_int_object(c);
				break;
			}
		}
	}
	return c;   


}


inline int operator_R_SHIFT_fbgc_int(int a1,int b1){
	return a1 >> b1;
}
inline int operator_L_SHIFT_fbgc_int(int a1,int b1){
	return (a1<<b1); 
}
int operator_STARSTAR_fbgc_int(int a1,int b1){
	return (pow(a1,b1));  
}
inline double operator_SLASHSLASH_fbgc_int(int a1,int b1){
	return ((double)a1*b1/(a1+b1)); 
}
inline int operator_PLUS_fbgc_int(int a1,int b1){
	return (a1+b1);	
}
inline int operator_MINUS_fbgc_int(int a1,int b1){
	return (a1-b1);       
}
inline int operator_STAR_fbgc_int(int a1,int b1){
	return (a1*b1);       
}
inline double operator_SLASH_fbgc_int(int a1,int b1){
	return (double)a1/b1;      
}
inline int operator_CARET_fbgc_int(int a1,int b1){
	 return (pow(a1,b1));      
}
inline int operator_PERCENT_fbgc_int(int a1,int b1){
	return (a1%b1);      
}
inline int operator_LO_EQ_fbgc_int(int a1,int b1){
	return (a1<=b1);
}
inline int operator_GR_EQ_fbgc_int(int a1,int b1){
	return (a1>=b1);
}
inline int operator_EQ_EQ_fbgc_int(int a1,int b1){
	return (a1==b1);
}
inline int operator_NOT_EQ_fbgc_int(int a1,int b1){
	return (a1!=b1);
}
inline int operator_LOWER_fbgc_int(int a1,int b1){
	return (a1<b1);
}
inline int operator_GREATER_fbgc_int(int a1,int b1){
	return (a1>b1);
}
inline int operator_PIPE_fbgc_int(int a1,int b1){
	return (a1||b1); 
}
inline int operator_AMPERSAND_fbgc_int(int a1,int b1){
	return (a1&&b1);
}
inline int operator_EXCLAMATION_fbgc_int(int a1,int b1){	
	return !a1;
}
inline int operator_TILDE_fbgc_int(int a1,int b1){
	return (~a1); 
}
inline int operator_UPLUS_fbgc_int(int a1,int b1){
	return a1;  
}
inline int operator_UMINUS_fbgc_int(int a1,int b1){
	return -a1; 
}



struct fbgc_object * return_fbgc_object_operator_helper(fbgc_token return_type, void * c, struct fbgc_object * result){
	if(result == NULL)
	{
		switch(return_type){
			case LOGIC:{
				int *q = c;
				return new_fbgc_logic_object(*q);
			}
			case INT:{
				int * q = c;
				return new_fbgc_int_object(*q);
			} 
			case DOUBLE:{
				double *q = c;
				return new_fbgc_double_object(*q);
			}
		}
	} 
	else{
		switch(get_fbgc_object_type(result)){
			case LOGIC:{
				int *q = c;
				cast_fbgc_object_as_logic(result)->content = *q;
				break;
			}
			case INT: {
				int *q = c;
				cast_fbgc_object_as_int(result)->content = *q;
				break;
			}
			case DOUBLE:{
				double *q = c;
				cast_fbgc_object_as_double(result)->content = *q;
				break;
			}
		}		
		
		return result;
	}	
}


struct fbgc_object * operator_R_SHIFT_fbgc_int_object(int a1, int b1,struct fbgc_object * result){
	int c = operator_R_SHIFT_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(INT,&c,result);
}
struct fbgc_object * operator_L_SHIFT_fbgc_int_object(int a1, int b1, struct fbgc_object * result){
	int c = operator_L_SHIFT_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(INT,&c,result);
}
struct fbgc_object * operator_STARSTAR_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_STARSTAR_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(INT,&c,result);
}
struct fbgc_object * operator_SLASHSLASH_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	double c = operator_R_SHIFT_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(DOUBLE,&c,result);
}
struct fbgc_object * operator_PLUS_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_PLUS_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(INT,&c,result);	
}
struct fbgc_object * operator_MINUS_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_MINUS_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(INT,&c,result);
}
struct fbgc_object * operator_STAR_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_STAR_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(INT,&c,result);
}
struct fbgc_object * operator_SLASH_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	double c = operator_SLASH_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(DOUBLE,&c,result);
}
struct fbgc_object * operator_CARET_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_CARET_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(INT,&c,result);
}
struct fbgc_object * operator_PERCENT_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_PERCENT_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(INT,&c,result);
}
struct fbgc_object * operator_LO_EQ_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_LO_EQ_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(LOGIC,&c,result);
}
struct fbgc_object * operator_GR_EQ_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_GR_EQ_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(LOGIC,&c,result);
}
struct fbgc_object * operator_EQ_EQ_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_EQ_EQ_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(LOGIC,&c,result);
}
struct fbgc_object * operator_NOT_EQ_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_NOT_EQ_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(LOGIC,&c,result);
}
struct fbgc_object * operator_LOWER_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_LOWER_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(LOGIC,&c,result);
}
struct fbgc_object * operator_GREATER_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_GREATER_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(LOGIC,&c,result);
}
struct fbgc_object * operator_PIPE_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_PIPE_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(LOGIC,&c,result);	
}
struct fbgc_object * operator_AMPERSAND_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_AMPERSAND_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(LOGIC,&c,result);		
}
struct fbgc_object * operator_EXCLAMATION_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_EXCLAMATION_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(LOGIC,&c,result);	
}
struct fbgc_object * operator_TILDE_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_TILDE_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(INT,&c,result);	
}
struct fbgc_object * operator_UPLUS_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_UPLUS_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(INT,&c,result);	
}
struct fbgc_object * operator_UMINUS_fbgc_int_object(int a1,int b1, struct fbgc_object * result){
	int c = operator_UMINUS_fbgc_int(a1,b1);
	return return_fbgc_object_operator_helper(INT,&c,result);	
}


struct fbgc_object * operator_any_fbgc_object(struct fbgc_object * a,struct fbgc_object * b,fbgc_token fun_type, struct fbgc_object * result){
	fbgc_token obj_type = MAX(a->type,b->type);

	switch(obj_type){
		case INT:{
			int a1 = convert_fbgc_object_to_int(a);	
			int b1 = convert_fbgc_object_to_int(b);
			//cprintf(111,"a1 %d, b1 %d\n",a1,b1);
			//int b1 = (b->type != LOGIC) ? cast_fbgc_object_as_int(b)->content:(int)(cast_fbgc_object_as_logic(b)->content);		
			struct fbgc_object * c = fbgc_INT_operators[fun_type](a1,b1,result);
			//print_fbgc_object(c);printf("\n");
			return c;
		}
		case DOUBLE: return NULL;
		case COMPLEX: return NULL;
		case STRING: return NULL;
		case MATRIX: return NULL;
		case TUPLE: return NULL;
	}

}



struct fbgc_object * (*fbgc_INT_operators[22]) (int ,int, struct fbgc_object *) =
{   
	operator_R_SHIFT_fbgc_int_object,
	operator_L_SHIFT_fbgc_int_object,
	operator_STARSTAR_fbgc_int_object,
	operator_SLASHSLASH_fbgc_int_object,
	operator_PLUS_fbgc_int_object,
	operator_MINUS_fbgc_int_object,
	operator_STAR_fbgc_int_object,
	operator_SLASH_fbgc_int_object,
	operator_CARET_fbgc_int_object,
	operator_PERCENT_fbgc_int_object,
	operator_LO_EQ_fbgc_int_object,
	operator_GR_EQ_fbgc_int_object,
	operator_EQ_EQ_fbgc_int_object,
	operator_NOT_EQ_fbgc_int_object,
	operator_LOWER_fbgc_int_object,
	operator_GREATER_fbgc_int_object,
	operator_PIPE_fbgc_int_object,
	operator_AMPERSAND_fbgc_int_object,
	operator_EXCLAMATION_fbgc_int_object,
	operator_TILDE_fbgc_int_object,
	operator_UPLUS_fbgc_int_object,
	operator_UMINUS_fbgc_int_object,
};



void print_fbgc_int_object(struct fbgc_object * obj){
	cprintf(011,"%d",cast_fbgc_object_as_int(obj)->content);  
}

void free_fbgc_int_object(struct fbgc_object * obj){
	//   free(obj);
}
