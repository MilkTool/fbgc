#ifndef TOKENS_H
#define TOKENS_H

#ifdef __cplusplus
extern "C" {
#endif

typedef uint8_t fbgc_token;

typedef struct {
	fbgc_token tokencode;
	const char * name;
}token_struct;


//TOKENS_BEGIN
//Autogenerated by helper/token_creator.py
#define UNKNOWN 0
#define NIL 1
#define INT 2
#define DOUBLE 3
#define COMPLEX 4
#define STRING 5
#define NAME 6
#define IDENTIFIER 7
#define CFUN 8
#define FUN 9
#define REFERENCE 10
#define LIST 11
#define MONATRIX 12
#define MATRIX 13
#define NUPLE 14
#define MONUPLE 15
#define TUPLE 16
#define ARRAY 17
#define LINKED_LIST 18
#define LINKED_LIST_TAIL 19
#define STACK 20
#define CMODULE 21
#define GARBAGE 22
#define FIELD 23
#define CSTRING 24
#define THREE_DOT 25
#define STARSTAR 26
#define PLUSPLUS 27
#define MINUSMINUS 28
#define SLASHSLASH 29
#define LO_EQ 30
#define GR_EQ 31
#define EQ_EQ 32
#define NOT_EQ 33
#define PLUS_ASSIGN 34
#define MINUS_ASSIGN 35
#define STAR_ASSIGN 36
#define SLASH_ASSIGN 37
#define CONST_ASSIGN 38
#define IF_THEN 39
#define R_SHIFT 40
#define L_SHIFT 41
#define R_ARROW 42
#define L_ARROW 43
#define RW_ARROW 44
#define LW_ARROW 45
#define TWO_COLON 46
#define ASSIGN 47
#define SEMICOLON 48
#define COMMA 49
#define DOT 50
#define COLON 51
#define CARET 52
#define TILDE 53
#define PERCENT 54
#define EXCLAMATION 55
#define LOWER 56
#define GREATER 57
#define PIPE 58
#define AMPERSAND 59
#define SLASH 60
#define STAR 61
#define MINUS 62
#define PLUS 63
#define UMINUS 64
#define UPLUS 65
#define LPARA 66
#define RPARA 67
#define LBRACK 68
#define RBRACK 69
#define LBRACE 70
#define RBRACE 71
#define END 72
#define FUN_MAKE 73
#define IF 74
#define ELIF 75
#define ELSE 76
#define FOR 77
#define WHILE 78
#define BREAK 79
#define CONT 80
#define RETURN 81
#define LOAD 82
#define TRUE 83
#define FALSE 84
#define START 85
#define JUMP 86
#define AND 87
#define OR 88
#define NOT 89
#define NEWLINE 90
#define ROW 91
#define EXPRESSION 92
#define ASSIGNMENT 93
#define STATEMENT 94
#define ASSIGNMENT_EXPRESSION 95
#define UNARY_EXPRESSION 96
#define BINARY_EXPRESSION 97
#define BALANCED_EXPRESSION_LIST 98
#define UNBALANCED_EXPRESSION_LIST 99
#define IF_BEGIN 100
#define ELIF_BEGIN 101
#define WHILE_BEGIN 102
#define FOR_BEGIN 103
#define FUN_CALL 104
#define BUILD_TUPLE 105
#define BUILD_MATRIX 106
#define TOKEN_LIST_AS_STRINGS()\
"UNKNOWN",\
"NIL",\
"INT",\
"DOUBLE",\
"COMPLEX",\
"STRING",\
"NAME",\
"IDENTIFIER",\
"CFUN",\
"FUN",\
"REFERENCE",\
"LIST",\
"MONATRIX",\
"MATRIX",\
"NUPLE",\
"MONUPLE",\
"TUPLE",\
"ARRAY",\
"LINKED_LIST",\
"LINKED_LIST_TAIL",\
"STACK",\
"CMODULE",\
"GARBAGE",\
"FIELD",\
"CSTRING",\
"THREE_DOT",\
"STARSTAR",\
"PLUSPLUS",\
"MINUSMINUS",\
"SLASHSLASH",\
"LO_EQ",\
"GR_EQ",\
"EQ_EQ",\
"NOT_EQ",\
"PLUS_ASSIGN",\
"MINUS_ASSIGN",\
"STAR_ASSIGN",\
"SLASH_ASSIGN",\
"CONST_ASSIGN",\
"IF_THEN",\
"R_SHIFT",\
"L_SHIFT",\
"R_ARROW",\
"L_ARROW",\
"RW_ARROW",\
"LW_ARROW",\
"TWO_COLON",\
"ASSIGN",\
"SEMICOLON",\
"COMMA",\
"DOT",\
"COLON",\
"CARET",\
"TILDE",\
"PERCENT",\
"EXCLAMATION",\
"LOWER",\
"GREATER",\
"PIPE",\
"AMPERSAND",\
"SLASH",\
"STAR",\
"MINUS",\
"PLUS",\
"UMINUS",\
"UPLUS",\
"LPARA",\
"RPARA",\
"LBRACK",\
"RBRACK",\
"LBRACE",\
"RBRACE",\
"END",\
"FUN_MAKE",\
"IF",\
"ELIF",\
"ELSE",\
"FOR",\
"WHILE",\
"BREAK",\
"CONT",\
"RETURN",\
"LOAD",\
"TRUE",\
"FALSE",\
"START",\
"JUMP",\
"AND",\
"OR",\
"NOT",\
"NEWLINE",\
"ROW",\
"EXPRESSION",\
"ASSIGNMENT",\
"STATEMENT",\
"ASSIGNMENT_EXPRESSION",\
"UNARY_EXPRESSION",\
"BINARY_EXPRESSION",\
"BALANCED_EXPRESSION_LIST",\
"UNBALANCED_EXPRESSION_LIST",\
"IF_BEGIN",\
"ELIF_BEGIN",\
"WHILE_BEGIN",\
"FOR_BEGIN",\
"FUN_CALL",\
"BUILD_TUPLE",\
"BUILD_MATRIX",\
//TOKENS_END

extern const char * object_name_array[];
extern const token_struct operator_token_array[];
extern const token_struct reserved_words_token_array[];

fbgc_token get_operator_code(const char *str);
fbgc_token get_operator_code_from_substr(const char *str1,const char *str2);
fbgc_token get_reserved_word_code(const char *str);
fbgc_token get_reserved_word_code_from_substr(const char *str1,const char *str2);


const char * get_token_as_str(fbgc_token tok);


#define is_fbgc_OPERATOR(T)(T>=THREE_DOT && T<=PLUS)
#define is_fbgc_IDENTIFIER(T)(T>=IDENTIFIER && T<=REFERENCE)
#define is_fbgc_ATOM(T)(T>= INT && T<=STRING)
#define is_fbgc_INT(T) (T == INT)
#define is_fbgc_DOUBLE(T) (T == DOUBLE)
#define is_fbgc_STRING(T) (T == STRING)
#define is_fbgc_PARA(T)(T>=LPARA && T<= RBRACK)
#define is_fbgc_UNARY_OPERATOR(T)( T==PLUSPLUS || T==MINUSMINUS || T == EXCLAMATION || T== TILDE)
#define is_fbgc_ASSIGNMENT_OPERATOR(T)( T == ASSIGN || (T>= PLUS_ASSIGN && T<= CONST_ASSIGN)  )
#define is_fbgc_BINARY_OPERATOR(T)( is_fbgc_ASSIGNMENT_OPERATOR(T) == 0 && is_fbgc_UNARY_OPERATOR(T) )


#define is_fbgc_MATRIX(x)(x == MATRIX || x == BUILD_MATRIX)
#define is_fbgc_TUPLE(x)(x == NUPLE || x == MONUPLE ||x == BUILD_TUPLE || x == TUPLE)

#define is_fbgc_FUNCTIONABLE(x)(x == IF || x == ELIF || x == ELSE || x == WHILE || x == FUN || x == LOAD)

#define is_fbgc_LIST(x) (x == LIST)
#define is_fbgc_EXPRESSION(x)(is_fbgc_ATOM(x) || is_fbgc_IDENTIFIER(x)|| x == EXPRESSION || x == UNARY_EXPRESSION ||x==BINARY_EXPRESSION||\
is_fbgc_TUPLE(x) || is_fbgc_MATRIX(x) || is_fbgc_LIST(x) || x == CFUN || x == SEMICOLON)

#define is_fbgc_JUMP_STATEMENT(x)(x == BREAK || x == CONT)

#define is_fbgc_ASSIGNMENT(x)(x==ASSIGNMENT_EXPRESSION)
#define is_fbgc_STATEMENT(x)(x == STATEMENT || is_fbgc_EXPRESSION(x) || is_fbgc_ASSIGNMENT(x) || is_fbgc_JUMP_STATEMENT(x))

#ifdef  __cplusplus
}
#endif

#endif
