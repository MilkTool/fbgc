#ifndef TOKENS_H
#define TOKENS_H

#ifdef __cplusplus
extern "C" {
#endif

typedef uint8_t fbgc_token;

typedef struct {
	fbgc_token tokencode;
	const char * name;
}token_struct;


//TOKENS_BEGIN
//Autogenerated by helper/token_creator.py
#define UNKNOWN 0 // Begin with unknown
#define NIL 1 // null or none
#define INT 2 // int class
#define DOUBLE 3 // double class
#define COMPLEX 4 // complex class
#define STRING 5 // string class
#define TUPLE 6 // tuple class
#define MATRIX 7 // matrix class
#define CFUN 8 // c function
#define FUN 9 // builtin fbgc function
#define NAME 10 // name class, name:value pairs
#define IDENTIFIER 11 // identifiers
#define RANGE 12 // range obj
#define REFERENCE 13 //
#define CSTRING 14 //
#define MONATRIX 15 //
#define NUPLE 16 //
#define MONUPLE 17 //
#define ARRAY 18 //
#define LINKED_LIST 19 //
#define LINKED_LIST_TAIL 20 //
#define STACK 21 //
#define CMODULE 22 //
#define GARBAGE 23 //
#define FIELD 24 //
#define END 25 // end
#define FUN_MAKE 26 //
#define ELIF 27 //
#define ELSE 28 //
#define WHILE 29 //
#define FOR 30 //
#define BREAK 31 //
#define CONT 32 //
#define LOAD 33 //
#define TRUE 34 //
#define FALSE 35 //
#define IF 36 //
#define RETURN 37 //
#define NEWLINE 38 //
#define LPARA 39 // (
#define RPARA 40 // )
#define LBRACK 41 // [
#define RBRACK 42 // ]
#define LBRACE 43 // {
#define RBRACE 44 // }
#define THREE_DOT 45 // ...
#define R_ARROW 46 // ->
#define L_ARROW 47 // <-
#define RW_ARROW 48 // ~>
#define LW_ARROW 49 // <~
#define TWO_COLON 50 // ::
#define PLUS_ASSIGN 51 // +=
#define MINUS_ASSIGN 52 // -=
#define STAR_ASSIGN 53 // *=
#define SLASH_ASSIGN 54 // /=
#define CONST_ASSIGN 55 // :=
#define PLUSPLUS 56 // ++
#define MINUSMINUS 57 // --
#define IF_THEN 58 // =>
#define STARSTAR 59 // **
#define SLASHSLASH 60 // //
#define LO_EQ 61 // <=
#define GR_EQ 62 // >=
#define EQ_EQ 63 // ==
#define NOT_EQ 64 // !=
#define R_SHIFT 65 // >>
#define L_SHIFT 66 // <<
#define CARET 67 // ^
#define PERCENT 68 // %
#define LOWER 69 // <
#define GREATER 70 // >
#define PIPE 71 // |
#define AMPERSAND 72 // &
#define SLASH 73 // /
#define STAR 74 // *
#define MINUS 75 // -
#define PLUS 76 // +
#define EXCLAMATION 77 // !
#define TILDE 78 // ~
#define SEMICOLON 79 // ;
#define COMMA 80 // :
#define DOT 81 // .
#define COLON 82 // :
#define ASSIGN 83 // =
#define UMINUS 84 // -
#define UPLUS 85 // +
#define START 86 //
#define JUMP 87 //
#define AND 88 //
#define OR 89 //
#define NOT 90 //
#define ROW 91 //
#define EXPRESSION 92 //
#define ASSIGNMENT 93 //
#define STATEMENT 94 //
#define ASSIGNMENT_EXPRESSION 95 //
#define UNARY_EXPRESSION 96 //
#define BINARY_EXPRESSION 97 //
#define BALANCED_EXPRESSION_LIST 98 //
#define UNBALANCED_EXPRESSION_LIST 99 //
#define LEN 100 //
#define IF_BEGIN 101 //
#define ELIF_BEGIN 102 //
#define WHILE_BEGIN 103 //
#define FOR_BEGIN 104 //
#define FUN_CALL 105 //
#define BUILD_TUPLE 106 //
#define BUILD_MATRIX 107 //
#define TOKEN_LIST_AS_STRINGS()\
"UNKNOWN",\
"NIL",\
"INT",\
"DOUBLE",\
"COMPLEX",\
"STRING",\
"TUPLE",\
"MATRIX",\
"CFUN",\
"FUN",\
"NAME",\
"IDENTIFIER",\
"RANGE",\
"REFERENCE",\
"CSTRING",\
"MONATRIX",\
"NUPLE",\
"MONUPLE",\
"ARRAY",\
"LINKED_LIST",\
"LINKED_LIST_TAIL",\
"STACK",\
"CMODULE",\
"GARBAGE",\
"FIELD",\
"END",\
"FUN_MAKE",\
"ELIF",\
"ELSE",\
"WHILE",\
"FOR",\
"BREAK",\
"CONT",\
"LOAD",\
"TRUE",\
"FALSE",\
"IF",\
"RETURN",\
"NEWLINE",\
"LPARA",\
"RPARA",\
"LBRACK",\
"RBRACK",\
"LBRACE",\
"RBRACE",\
"THREE_DOT",\
"R_ARROW",\
"L_ARROW",\
"RW_ARROW",\
"LW_ARROW",\
"TWO_COLON",\
"PLUS_ASSIGN",\
"MINUS_ASSIGN",\
"STAR_ASSIGN",\
"SLASH_ASSIGN",\
"CONST_ASSIGN",\
"PLUSPLUS",\
"MINUSMINUS",\
"IF_THEN",\
"STARSTAR",\
"SLASHSLASH",\
"LO_EQ",\
"GR_EQ",\
"EQ_EQ",\
"NOT_EQ",\
"R_SHIFT",\
"L_SHIFT",\
"CARET",\
"PERCENT",\
"LOWER",\
"GREATER",\
"PIPE",\
"AMPERSAND",\
"SLASH",\
"STAR",\
"MINUS",\
"PLUS",\
"EXCLAMATION",\
"TILDE",\
"SEMICOLON",\
"COMMA",\
"DOT",\
"COLON",\
"ASSIGN",\
"UMINUS",\
"UPLUS",\
"START",\
"JUMP",\
"AND",\
"OR",\
"NOT",\
"ROW",\
"EXPRESSION",\
"ASSIGNMENT",\
"STATEMENT",\
"ASSIGNMENT_EXPRESSION",\
"UNARY_EXPRESSION",\
"BINARY_EXPRESSION",\
"BALANCED_EXPRESSION_LIST",\
"UNBALANCED_EXPRESSION_LIST",\
"LEN",\
"IF_BEGIN",\
"ELIF_BEGIN",\
"WHILE_BEGIN",\
"FOR_BEGIN",\
"FUN_CALL",\
"BUILD_TUPLE",\
"BUILD_MATRIX",\
//TOKENS_END

extern const char * object_name_array[];
extern const token_struct operator_token_array[];
extern const token_struct reserved_words_token_array[];

fbgc_token get_operator_code(const char *str);
fbgc_token get_operator_code_from_substr(const char *str1,const char *str2);
fbgc_token get_reserved_word_code(const char *str);
fbgc_token get_reserved_word_code_from_substr(const char *str1,const char *str2);


const char * get_token_as_str(fbgc_token tok);


#define is_fbgc_OPERATOR(T)(T>=THREE_DOT && T<=ASSIGN)
#define is_fbgc_IDENTIFIER(T)(T>=IDENTIFIER && T<=REFERENCE)
#define is_fbgc_ATOM(T)(T>= INT && T<=STRING)
#define is_fbgc_INT(T) (T == INT)
#define is_fbgc_DOUBLE(T) (T == DOUBLE)
#define is_fbgc_STRING(T) (T == STRING)
#define is_fbgc_PARA(T)(T>=LPARA && T<= RBRACK)
#define is_fbgc_UNARY_OPERATOR(T)( T==PLUSPLUS || T==MINUSMINUS || T == EXCLAMATION || T== TILDE)
#define is_fbgc_ASSIGNMENT_OPERATOR(T)( T == ASSIGN || (T>= PLUS_ASSIGN && T<= CONST_ASSIGN)  )
#define is_fbgc_BINARY_OPERATOR(T)( T>=STARSTAR && T<= PLUS  )


#define is_fbgc_MATRIX(x)(x == MATRIX || x == BUILD_MATRIX)
#define is_fbgc_TUPLE(x)(x == NUPLE || x == MONUPLE ||x == BUILD_TUPLE || x == TUPLE)

#define is_fbgc_FUNCTIONABLE(x)(x == IF || x == ELIF || x == ELSE || x == WHILE || x == FUN || x == LOAD)

#define is_fbgc_EXPRESSION(x)(is_fbgc_ATOM(x) || is_fbgc_IDENTIFIER(x)|| x == EXPRESSION || x == UNARY_EXPRESSION ||x==BINARY_EXPRESSION||\
is_fbgc_TUPLE(x) || is_fbgc_MATRIX(x) || x == CFUN || x == SEMICOLON || x == LEN)

#define is_fbgc_JUMP_STATEMENT(x)(x == BREAK || x == CONT)

#define is_fbgc_ASSIGNMENT(x)(x==ASSIGNMENT_EXPRESSION)
#define is_fbgc_STATEMENT(x)(x == STATEMENT || is_fbgc_EXPRESSION(x) || is_fbgc_ASSIGNMENT(x) || is_fbgc_JUMP_STATEMENT(x))

#ifdef  __cplusplus
}
#endif

#endif
