#ifndef TOKENS_H
#define TOKENS_H

#ifdef __cplusplus
extern "C" {
#endif

typedef uint8_t fbgc_token;

typedef struct {
	fbgc_token tokencode;
	const char * name;
}token_struct;


//TOKENS_BEGIN
//Autogenerated by helper/token_creator.py
#define UNKNOWN 0 // Begin with unknown
#define NIL 1 // null or none
#define INT 2 // int class
#define DOUBLE 3 // double class
#define COMPLEX 4 // complex class
#define STRING 5 // string class
#define MATRIX 6 // matrix class
#define TUPLE 7 // tuple class
#define CFUN 8 // c function
#define FUN 9 // builtin fbgc function
#define NAME 10 // name class, name:value pairs
#define IDENTIFIER 11 // identifiers
#define RANGE 12 // range obj
#define REFERENCE 13 //
#define CSTRING 14 //
#define MONATRIX 15 //
#define NUPLE 16 //
#define MONUPLE 17 //
#define ARRAY 18 //
#define LINKED_LIST 19 //
#define CMODULE 20 //
#define GARBAGE 21 //
#define FIELD 22 //
#define END 23 // end
#define FUN_MAKE 24 //
#define ELIF 25 //
#define ELSE 26 //
#define WHILE 27 //
#define FOR 28 //
#define BREAK 29 //
#define CONT 30 //
#define LOAD 31 //
#define TRUE 32 //
#define FALSE 33 //
#define IF 34 //
#define RETURN 35 //
#define NEWLINE 36 //
#define LPARA 37 // (
#define RPARA 38 // )
#define LBRACK 39 // [
#define RBRACK 40 // ]
#define LBRACE 41 // {
#define RBRACE 42 // }
#define UMINUS 43 // -
#define UPLUS 44 // +
#define PRE_PLUPLUS 45 //
#define PRE_MINUSMINUS 46 //
#define TILDE 47 // ~ set1 starts from here
#define COLON 48 // :
#define COMMA 49 // ,
#define DOT 50 // .
#define SEMICOLON 51 // ;
#define PLUSPLUS 52 // ++
#define MINUSMINUS 53 // -- set1 finish
#define R_SHIFT 54 // >> assignment and binary operators start from here
#define L_SHIFT 55 // <<
#define STARSTAR 56 // **
#define SLASHSLASH 57 // //
#define PLUS 58 // +
#define MINUS 59 // -
#define STAR 60 // *
#define SLASH 61 // /
#define CARET 62 // ^
#define PERCENT 63 // % assignment finish
#define LO_EQ 64 // <=
#define GR_EQ 65 // >=
#define EQ_EQ 66 // ==
#define NOT_EQ 67 // !=
#define LOWER 68 // <
#define GREATER 69 // >
#define PIPE 70 // |
#define AMPERSAND 71 // & binary finish
#define EXCLAMATION 72 // !
#define ASSIGN 73 // = assignment ops start from here
#define R_SHIFT_ASSIGN 74 // >>=
#define L_SHIFT_ASSIGN 75 // <<=
#define STARSTAR_ASSIGN 76 // **=
#define SLASHSLASH_ASSIGN 77 // //=
#define PLUS_ASSIGN 78 // +=
#define MINUS_ASSIGN 79 // -=
#define STAR_ASSIGN 80 // *=
#define SLASH_ASSIGN 81 // /=
#define CARET_ASSIGN 82 // ^=
#define PERCENT_ASSIGN 83 // %=
#define START 84 //
#define JUMP 85 //
#define AND 86 //
#define OR 87 //
#define NOT 88 //
#define ROW 89 //
#define EXPRESSION 90 //
#define ASSIGNMENT 91 //
#define STATEMENT 92 //
#define ASSIGNMENT_EXPRESSION 93 //
#define UNARY_EXPRESSION 94 //
#define BINARY_EXPRESSION 95 //
#define BALANCED_EXPRESSION_LIST 96 //
#define UNBALANCED_EXPRESSION_LIST 97 //
#define ASSIGN_SUBSCRIPT 98 //
#define LOAD_SUBSCRIPT 99 //
#define LEN 100 //
#define IF_BEGIN 101 //
#define ELIF_BEGIN 102 //
#define WHILE_BEGIN 103 //
#define FOR_BEGIN 104 //
#define FUN_CALL 105 //
#define BUILD_TUPLE 106 //
#define BUILD_MATRIX 107 //
#define TOKEN_LIST_AS_STRINGS()\
"UNKNOWN",\
"NIL",\
"INT",\
"DOUBLE",\
"COMPLEX",\
"STRING",\
"MATRIX",\
"TUPLE",\
"CFUN",\
"FUN",\
"NAME",\
"IDENTIFIER",\
"RANGE",\
"REFERENCE",\
"CSTRING",\
"MONATRIX",\
"NUPLE",\
"MONUPLE",\
"ARRAY",\
"LINKED_LIST",\
"CMODULE",\
"GARBAGE",\
"FIELD",\
"END",\
"FUN_MAKE",\
"ELIF",\
"ELSE",\
"WHILE",\
"FOR",\
"BREAK",\
"CONT",\
"LOAD",\
"TRUE",\
"FALSE",\
"IF",\
"RETURN",\
"NEWLINE",\
"LPARA",\
"RPARA",\
"LBRACK",\
"RBRACK",\
"LBRACE",\
"RBRACE",\
"UMINUS",\
"UPLUS",\
"PRE_PLUPLUS",\
"PRE_MINUSMINUS",\
"TILDE",\
"COLON",\
"COMMA",\
"DOT",\
"SEMICOLON",\
"PLUSPLUS",\
"MINUSMINUS",\
"R_SHIFT",\
"L_SHIFT",\
"STARSTAR",\
"SLASHSLASH",\
"PLUS",\
"MINUS",\
"STAR",\
"SLASH",\
"CARET",\
"PERCENT",\
"LO_EQ",\
"GR_EQ",\
"EQ_EQ",\
"NOT_EQ",\
"LOWER",\
"GREATER",\
"PIPE",\
"AMPERSAND",\
"EXCLAMATION",\
"ASSIGN",\
"R_SHIFT_ASSIGN",\
"L_SHIFT_ASSIGN",\
"STARSTAR_ASSIGN",\
"SLASHSLASH_ASSIGN",\
"PLUS_ASSIGN",\
"MINUS_ASSIGN",\
"STAR_ASSIGN",\
"SLASH_ASSIGN",\
"CARET_ASSIGN",\
"PERCENT_ASSIGN",\
"START",\
"JUMP",\
"AND",\
"OR",\
"NOT",\
"ROW",\
"EXPRESSION",\
"ASSIGNMENT",\
"STATEMENT",\
"ASSIGNMENT_EXPRESSION",\
"UNARY_EXPRESSION",\
"BINARY_EXPRESSION",\
"BALANCED_EXPRESSION_LIST",\
"UNBALANCED_EXPRESSION_LIST",\
"ASSIGN_SUBSCRIPT",\
"LOAD_SUBSCRIPT",\
"LEN",\
"IF_BEGIN",\
"ELIF_BEGIN",\
"WHILE_BEGIN",\
"FOR_BEGIN",\
"FUN_CALL",\
"BUILD_TUPLE",\
"BUILD_MATRIX",\
//TOKENS_END

extern const char * object_name_array[];
extern const token_struct operator_token_array[];
extern const token_struct reserved_words_token_array[];

fbgc_token get_operator_code(const char *str);
fbgc_token get_operator_code_from_substr(const char *str1,const char *str2);
fbgc_token get_reserved_word_code(const char *str);
fbgc_token get_reserved_word_code_from_substr(const char *str1,const char *str2);


const char * get_token_as_str(fbgc_token tok);


#define is_fbgc_OPERATOR(T)(T>=UMINUS && T< START)
#define is_fbgc_IDENTIFIER(T)(T>=IDENTIFIER && T<=REFERENCE)
#define is_fbgc_ATOM(T)(T>= INT && T<=STRING)
#define is_fbgc_INT(T) (T == INT)
#define is_fbgc_DOUBLE(T) (T == DOUBLE)
#define is_fbgc_STRING(T) (T == STRING)
#define is_fbgc_PARA(T)(T>=LPARA && T<= RBRACK)
#define is_fbgc_UNARY_OPERATOR(T)( T==PLUSPLUS || T==MINUSMINUS || T == EXCLAMATION || T== TILDE || T == UPLUS || T == UMINUS)
#define is_fbgc_ASSIGNMENT_OPERATOR(T)( T >= ASSIGN && T< START )
#define is_fbgc_BINARY_OPERATOR(T)( T>=R_SHIFT && T<= AMPERSAND  )


#define is_fbgc_MATRIX(x)(x == MATRIX || x == BUILD_MATRIX)
#define is_fbgc_TUPLE(x)(x == NUPLE || x == MONUPLE ||x == BUILD_TUPLE || x == TUPLE)

#define is_fbgc_FUNCTIONABLE(x)(x == IF || x == ELIF || x == ELSE || x == WHILE || x == FUN || x == LOAD)

#define is_fbgc_EXPRESSION(x)(is_fbgc_ATOM(x) || is_fbgc_IDENTIFIER(x)|| x == EXPRESSION || x == UNARY_EXPRESSION ||x==BINARY_EXPRESSION||\
is_fbgc_TUPLE(x) || is_fbgc_MATRIX(x) || x == CFUN || x == SEMICOLON || x == LEN)

#define is_fbgc_JUMP_STATEMENT(x)(x == BREAK || x == CONT)

#define is_fbgc_ASSIGNMENT(x)(x==ASSIGNMENT_EXPRESSION)
#define is_fbgc_STATEMENT(x)(x == STATEMENT || is_fbgc_EXPRESSION(x) || is_fbgc_ASSIGNMENT(x) || is_fbgc_JUMP_STATEMENT(x))

#ifdef  __cplusplus
}
#endif

#endif
