_x12_ + a1b2c4 aAbBcCdDeEfF_gGhHiI ____fbg___ _____ f_b_g 123456 123.323 1E16 1E-12 0x42 0b01010023 'LOL naber' > => 

{"_x12_", WORD},
{"a1b2c3", WORD},
{"aAbBcCdDeEfF_gGhHiI", WORD},
{"___fbg___", WORD},
{"_______", WORD},
{"f_b_g_", WORD},
{"1234567", NUM},
{"123.23", NUM},
{"1E16", NUM},
{"1E-16", NUM},
{"0x42" ,NUM},
{"0X123", NUM},
{"0b0010101", NUM},
{"0B10101010", NUM},
{"1+2j", NUM},
{"1+2i", NUM},
{"5+5.123i", NUM},
{"'123ABCDEF'", STRING},
{"\"FBGENCER 8 88 888\"", STRING},
{"=", OPERATOR},
{"==", OPERATOR},
{"^=", OPERATOR},
{"++", OPERATOR},
{"...", OPERATOR},
{".", OPERATOR},
{"=>", OPERATOR}


hatalar
0x0aqe 
0x0x
0x000()


unary
x = (-y) + 5 : para,uminus
x = -y : op, uminus
3 + -7 = -4
!-2
-(2+3)


-12+(7/6) +39

3 * -4 + 7 / 6 * -(3 + -7 * (4 + !2))
3,4,-,*,7,6,/,3,7,-,4,2,!,+,*,+,-,*,+

-12,(7/6),39,*,+

typedef struct{
	
	ufbg_token type;
}lexer;


begin,continue,type
{
	{ {alpha,underscore}, {alpha,digit,underscore}, WORD }, //a_b, _b_, ____, __ab, abc_
	{ {digit},{digit} ,INT}, //123 , 2223
	{ {0b},{binary} ,INT}, // 0b000101
	{ {0x},{hexadecimal} ,INT},
	{ {digit},{exponential,exponential+unary},,{digit}, DOUBLE}, //5e+3,5e-3
	{ {digit},{'.'},{digit} ,DOUBLE},
	{ {'.'},{digit}, DOUBLE },
	{ {digit},{'.'},{digit},{i,j} ,COMPLEX},
	{ {'.'},{digit},{i,j},COMPLEX },
	{ {operator},{operator},OPERATOR},
	{ {"},{'\r','\n',''},{"},STRING },
	{ {'},{'\r','\n',''},{'},STRING }

};	

str = " _x = .23 + 1e3 - 0b0011" 


ID
 : [a-zA-Z_] [a-zA-Z_0-9]*
 ;

INT
 : [0-9]+
 ;

FLOAT
 : [0-9]+ '.' [0-9]* 
 | '.' [0-9]+
 ;

STRING
 : '"' (~["\r\n] | '""')* '"'
 ;

COMMENT
 : '#' ~[\r\n]* -> skip
 ;

SPACE
 : [ \t\r\n] -> skip
 ;

OTHER
 : . 
 ;